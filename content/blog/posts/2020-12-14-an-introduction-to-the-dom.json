{
  "date": "Monday December 14th, 2020",
  "dateshort": "December 14th",
  "body": "The **Document Object Model**, or the “DOM”, defines the logical structure of HTML documents & essentially acts as an interface to web pages. Through the use of programming languages such as JavaScript, we can access the DOM to manipulate websites and make them interactive.\n\nIn this article, we’re going to be working with the `document` object, taking a look at the DOM tree and nodes. Let’s get started!\n\n## What is the DOM?\n\nAt its core, a website must consist of an HTML document, an `index.html`. Using a browser we view the website, which renders from our HTML file/s and any CSS files which add style and layout rules.\n\nThe browser also creates a representation of this document known as the **Document Object Model**. It’s through the use of the DOM, that JavaScript is able to access and alter the content and elements of the website.\n\nTo view the DOM, using your web browser, right-click anywhere on a page and choose “Inspect”. This will open up Developer Tools, like so:\n\n![DOM in Chrome DevTools](/images/uploads/dom-devtools.png)\n\nThe DOM is shown under the Elements tab. You can also view it by selecting the *Console* tab and typing “document”.\n\n### The Document Object\n\nThe `document` object is a built-in [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), containing many properties and methods.\n\nWe access and manipulate this object with JavaScript. And by manipulating the DOM, we can now make our web pages highly interactive! As we’re no longer limited to just building static sites with styled HTML content.\n\nWe can now build apps that update page data without needing to refresh, we can give users the ability to customize the page layout, we can create drag and drop elements, in-browser games, clocks, timers, and complex animations. Working with the DOM opens up a whole lot of possibilities!\n\nSo let’s perform our first DOM manipulation...\n\nGo to [www.google.com](http://www.google.com/) and open up your Developer Tools. Then select the *Console* tab & type in the following:\n\n```\ndocument.body.style.backgroundColor = ‘orange’;\n```\n\nPress enter and you’ll see the background color has now changed to orange.\n\nOf course, you haven’t edited Google’s source code (!), but you have changed how the content renders locally in your browser, by manipulating the `document` object.\n\nThe `document` is an object, `body` is a property that we’ve chosen to edit by accessing the `style` attribute & changing our `backgroundColor` to orange.\n\nNote that we use camel case `backgroundColor` in JavaScript, instead of `background-color` which is used in CSS. Any hyphenated CSS property will be written in camel case in JavaScript.\n\nYou can see your DOM adjustment under the body element of the *Elements* tab, or by typing `document.body` into the console.\n\nAs we are working directly with the DOM in the browser, we’re not actually altering the source code. If you refresh the browser it will return to its original state.\n\n## The DOM Tree & Nodes\n\nLargely due to the layout of the DOM, it’s often called the *DOM Tree*.\n\n![DOM Tree Diagram](/images/uploads/dom-tree.png)\n\nThe tree consists of objects called nodes. There are many different types of nodes, but you’ll most often be working with *element nodes* (HTML elements), *text nodes* (any text content), and *comment nodes* (commented code). The `document` object is its own node which sits at the root.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Nodes</title>\n  </head>\n  <body>\n    <h1>This is an element node</h1>\n    <!-- This is a comment node -->\n    This is a text node.\n  </body>\n</html>\n```\n\nWhen working with DOM nodes they’re also referred to as parents, children, and siblings, depending on their relation to other nodes.\n\nIn our above code example, the `html` element node is the parent node, the `head` and `body` elements are its siblings. And the `body` contains three child nodes (which are siblings in relation to each other — much like a family tree). We’ll look further into this later on in the article!\n\n### How to Identify Node Type\n\nSo every node in a document has a type, we can access the type using the `nodeType` property. See the full list of node types [here](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType).\n\nLet's look at a few examples of the types that exist within our previous example:\n\nOur `<html>`, `<title>`, `<body>` and `<h1>` are of the type `ELEMENT_NODE` with a the value of `1`.\n\nOur text `This is a text node.` located within the body which isn’t within an element is a `TEXT_NODE` with a value of `3`.\n\nAnd our comment `<!-- This is a comment node -->` is a `COMMENT_NODE` type with a value of `8`.\n\n**How can we check our node types?**\n\nGo to the Elements tab in Developer Tools and click on any line. You’ll see the value of `== $0` display alongside. Now if you go to the Console tab and type `$0` the value of the node you selected will display. To check the node type, run:\n\n```\n$0.nodeType;\n```\n\nThe numerical value of the node type, corresponding to the selected node will be displayed. e.g. If you had selected `h1`, you’d see `1`. Doing the same for the text would yield `3`, and the comment `8`.\n\nAnd when you know where the node sits in the DOM, you don’t need to manually select it, you can access it directly, for example:\n\n```\ndocument.body.nodeType;      // 1\n```\n\nYou can also use `nodeValue` to get the value of a text or comment node, and `nodeName` to get the tag name of an element.\n\nIn the next article, we'll learn how to work with DOM elements using the following methods:\n\n`getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, `querySelector()` and `querySelectorAll()`.\n\n## Related Posts:\n\n* [The Basics of JavaScript Strings](https://www.easeout.co/blog/2020-11-16-the-basics-of-javascript-strings)\n* [JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)",
  "title": "An Introduction to the DOM",
  "description": "An Introduction to the Document Object Model.",
  "short": "An Introduction to the Document Object Model.",
  "category": "JavaScript"
}