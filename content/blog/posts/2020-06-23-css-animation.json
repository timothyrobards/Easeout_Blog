{
  "date": "Tuesday June 23rd, 2020",
  "dateshort": "June 23rd",
  "body": "**CSS Animations** are a great way to animate CSS properties from one to another. While we can use transitions to perform single movements, animations give us much finer control.\n\nSome common properties we might animate include colors (`color`& `background-color`), and numbers such as `height` & `width`.\n\nCheck out the [full list of animatable CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties).\n\n## Creating an animation\n\nAn animation consists of both a style rule which describes the animation, and a set of keyframes indicating the start and end states of the that style. We can also optionally add waypoints.\n\nLet’s see an example:\n\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Bouncing Ball CSS Animation\" src=\"https://codepen.io/trobes/embed/YzwVLYm?height=265&theme-id=default&default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/trobes/pen/YzwVLYm'>Bouncing Ball CSS Animation</a> by Timothy Robards\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\nOur animation is defined using the `animation` property & it’s movement with `@keyframes`, like so:\n\n```css\n.ball {\n  border-radius: 50%;\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  border: 2px solid #000;\n  animation: bounce 1s infinite alternate;\n}\n@keyframes bounce {\n  from {\n    margin-top: 0;\n  }\n  to {\n    margin-top: -250px;\n  }\n}\n```\n\nOur element moves between the differing start and end positions (in this case we’ve adjusted the margin).\n\n## Sub-properties\n\nThere are a number of sub-properties we can work with, to give us more control:\n\n* `animation-name`: Specifies the name of the `@keyframes` at-rule, which describes the animation’s keyframes.\n* `animation-duration`: Sets the length of time that an animation should take to complete one cycle.\n* `animation-timing-function`: Specifies the timing of the animation; or how it ‘flows’ through the keyframes.\n* `animation-delay`: Sets a delay between the time the element is loaded and the beginning of the animation.\n* `animation-direction`: Sets the direction of the animation after the cycle.\n* `animation-iteration-count`: Sets the number of times the animation should repeat. We can use `infinite` to repeat the animation indefinitely.\n* `animation-fill-mode`: Sets which values are applied before & after the animation executes. For example, you can set the animation to remain on screen upon completion, or revert to its start state.\n* `animation-play-state`: Lets you pause and resume the animation sequence.\n\nLet’s see another example:\n\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Growing Ball CSS Animation\" src=\"https://codepen.io/trobes/embed/GRomGBM?height=265&theme-id=default&default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/trobes/pen/GRomGBM'>Growing Ball CSS Animation</a> by Timothy Robards\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\nHere we use the following values:\n\n```css\n.ball {   \n  animation-name: grow;\n  animation-duration: 2s; \n  animation-timing-function: ease-out; \n  animation-delay: 0;\n  animation-direction: alternate;\n  animation-iteration-count: infinite;\n  animation-fill-mode: none;\n  animation-play-state: running;  \n}\n```\n\nWe could simplify this using the `animation` shortcode:\n\n```css\n.ball {   \n  animation: \n    grow\n    2s     \n    ease-out     \n    0s     \n    alternate     \n    infinite     \n    none     \n    running; \n}\n```\n\nIn our example, the keyframes are set like so:\n\n```css\n@keyframes grow {\n  0% {\n    transform: scale(.5);\n    background-color: yellow;\n    border-radius: 100%;\n  }\n  50% {\n    background-color: purple;\n  }\n  100% {\n    transform: scale(1.5);\n    background-color: pink;\n  }\n}\n```\n\nAs mentioned, we can use waypoints with `@keyframes` to further control the animation. They are set as percentages, with 0% being the beginning of the animation and 100% the end.\n\nIn our example, we have our initial (0%) state set to scale *.5* & *yellow,* then 50% of the way through we change the color to *purple*, and at 100% it has scaled to *1.5* and turned *pink*.\n\n## Working with multiple animations\n\nMultiple animations can be declared on a selector, using comma-separated values.\n\nIn the following example, we set the colors to swap with one keyframe rule, and we move it side to side with another:\n\n```css\n.ball {\n  animation: \n    colorswap 2s linear infinite alternate, \n    movement 6s ease-out infinite alternate;\n}\n```\n\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Using Multiple CSS Animations\" src=\"https://codepen.io/trobes/embed/qBbmyPP?height=265&theme-id=default&default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/trobes/pen/qBbmyPP'>Using Multiple CSS Animations</a> by Timothy Robards\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## A note on prefixing\n\nModern browsers now widely support animation properties, so there is no real need to worry about vendor prefixing. In the case where we want to support old browsers. We’d need to ensure we have the appropriate prefixes, like so:\n\n```css\n.element {\n  -webkit-animation: YOUR-KEYFRAME-NAME 1s infinite;\n  -moz-animation:    YOUR-KEYFRAME-NAME 1s infinite;\n  -o-animation:      YOUR-KEYFRAME-NAME 1s infinite;\n  animation:         YOUR-KEYFRAME-NAME 1s infinite;\n}\n@-webkit-keyframes YOUR-KEYFRAME-NAME {\n  0%   { /* ... */ }\n  100% { /* ... */ }\n}\n@-moz-keyframes YOUR-KEYFRAME-NAME {\n  0%   { /* ... */ }\n  100% { /* ... */ }\n}\n@-o-keyframes YOUR-KEYFRAME-NAME {\n  0%   { /* ... */ }\n  100% { /* ... */ }\n}\n@keyframes YOUR-KEYFRAME-NAME {\n  0%   { /* ... */ }\n  100% { /* ... */ }\n}\n```\n\n## Related Posts:\n\n* [CSS Transforms](https://www.easeout.co/blog/2020-06-10-css-transforms)\n* [CSS Transitions](https://www.easeout.co/blog/2020-06-19-css-transitions)\n* [Feature Queries](https://www.easeout.co/blog/2020-06-08-css-feature-queries)",
  "title": "CSS Animation",
  "description": "Learn how to create animations with CSS.",
  "short": "Learn how to create animations with CSS.",
  "category": "CSS"
}