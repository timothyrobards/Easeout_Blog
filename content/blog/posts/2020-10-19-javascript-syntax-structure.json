{
  "date": "Monday October 19th, 2020",
  "dateshort": "October 19th",
  "body": "As with any language, programming languages are defined by sets of rules. The rules (or syntax) are what we follow when we write our code, which form the logical structure of our programs.\n\nThis article marks the beginning of a series I‚Äôll be writing on learning the JavaScript fundamentals. Be sure to check back often!\n\nLet‚Äôs dive right in with the building blocks of JavaScript. We‚Äôll be looking at values (literals & variables), camel casing, unicode, semi colons, indentation, white spacing, commenting, case sensitivity, keywords, operators and expressions! üòÖ\n\nBy taking the time to learn the fundamentals, we‚Äôll be well on our way toward building more functional and readable code!\n\n## JavaScript Values\n\nIn JavaScript there are two types of values: Fixed values (or **literals**) and Variable values (**variables**).\n\n### Literals\n\nLiterals are defined as values that are written in our code, such as numbers, strings, booleans (true or false), as well as object and array literals (don‚Äôt worry too much about these just yet). Some examples include:\n\n```\n10          // A number (can be a decimal eg. 10.5)\n'Boat'      // A string (can be in double \"\" or single '' quotes)\ntrue        // A boolean (true or false)\n['a', 'b']                           // An array\n{color: 'blue', shape: 'Circle'}     // An object\n```\n\n*Note: I‚Äôll be looking at data types in detail in the next article in this series, stay tuned!*\n\n### Variables\n\nVariables are named values which store data. In JavaScript we declare our variables with the `var`, `let` or `const` keywords, and we assign values with the equal sign `=`.\n\nFor example, `key` is defined as a variable. Which is assigned the value `abc123`:\n\n```\nlet key;\nkey = abc123;\n```\n\nWhen to use `var`? Don‚Äôt. It really should only be used when working with legacy code. Its the old pre-ES6 syntax.\n\nWhen to use `let`? Use it if your variable needs to be updated within the program (it can be reassigned).\n\nWhen to use `const`? Use it if your variable holds a constant value. It must be assigned at the time of declaration and it cannot be reassigned.\n\n## Camel Case\n\nWhat if our variable name consists of more than one word? For example, how would we declare a variable we wish to name ‚Äúfirst name‚Äù?\n\nCould we use **hyphens?** e.g. `first-name`Nope, `-`‚Äôs are reserved for subtractions in JavaScript.\n\nWhat about **underscores?** e.g. `first_name` We could, but it has a tendency to make our code look messy and confusing.\n\nThe solution? **camel case**! e.g. `firstName`. The first word is lower-case, the first letter of any subsequent words are upper-case. This is the convention within the community.\n\nNote: It‚Äôs quite acceptable however, to name your `const` variables in upper-case with underscores e.g. `const DEFAULT_PLAYBACK_SPEED = 1;` This would make it clear to others that the value is fixed. Otherwise just stick with camelCase!\n\n## Unicode\n\nJavaScript uses the unicode character set. Unicode covers just about all of the characters, punctuations, and symbols that there are! Check out the [complete reference](https://unicode-table.com/). This is great as we can write our names in any language, and we could even use [emojis](https://emojipedia.org/) as variable names (because why not? ü§∑üèª‚Äç‚ôÇÔ∏è).\n\n## Semicolons\n\nJavaScript programs are made up of a number of instructions known as statements. Such as:\n\n```\n// These are all examples of JavaScript statements:\n\nlet a = 1000;\n\na = b + c;\n\nconst time = Date.now();\n```\n\nJavaScript statements often end in a semicolon `;`.\n\nHowever, **semicolons aren‚Äôt always mandatory!** JavaScript does not have any issues if you don‚Äôt use them.\n\n```\n// Still perfectly valid!\n\nlet a = 1000\n\na = b + c\n\nconst time = Date.now()\n```\n\nThere are however, some situations where they are mandatory. For instance when we use a `for` loop, like so:\n\n```javascript\nfor (i = 0; i < .length; i++) { \n  // code to execute\n}\n```\n\nWhen using a block statement however, semicolons are not to be included after the curly braces, for example:\n\n```javascript\nif (name == \"Samantha\") {\n  // code\n}                           // <- no ';'\n//or,\nfunction people(name) {\n  // code\n}                           // <- no ';'\n```\n\nIf we‚Äôre using an object however, such as:\n\n```javascript\nconst person = {\n  firstName: \"Samantha\",\n  lastName: \"Doe\",\n  age: 30,\n  eyeColor: \"blue\"\n};                          // the ';' is mandatory\n```\n\nThen our `;`‚Äôs are required!\n\nOver time you‚Äôll start to memorize where semicolons can and can‚Äôt be used. Until then it‚Äôs wise to use them at the end of all statements (with the exception of block statements!)\n\nPlus it really is a common convention is to use them regardless, it‚Äôs considered good practice as its reduces the probability of errors.\n\n*Note: Once you really get going with JavaScript, start using a linter such as [ESLint](https://eslint.org/). It‚Äôll automatically find syntax errors in your code and make life much easier!*\n\n## Indentation\n\nIn theory we could write an entire JavaScript program on one line. However this would be just about impossible to read and maintain. Which is why we use lines and indentation. Lets use a conditional statement as an example:\n\n```javascript\nif (loginSuccessful === 1) {\n  // code to run if true\n} else {\n  // code to run if false\n}\n```\n\nHere we can see that any code inside a block is indented. In this case its our comment code `// code to run if true` and then `// code to run if false.` You can choose to indent your lines with either a few spaces (2 or 4 are common) or a tab. It‚Äôs entirely your choice, the main thing is to be consistent!\n\nIf we are nesting our code, we‚Äôd indent further like so:\n\n```javascript\nif (loginAttempts < 5){\n  if (loginAttempts < 3){\n    alert(\"< 3\");\n  } else {\n    alert(\"between 3 and 5\");\n  }\n} else {\n  if (loginAttempts > 10){\n    alert(\"> 10\");\n  } else {\n    alert(\"between 5 and 10\");\n  }\n}\n```\n\nBy applying indentation you‚Äôll have much cleaner, more maintainable and easier to read code!\n\n## White Space\n\nJavaScript only requires one space between keywords, names and identifiers, otherwise any white space is completely ignored. This means that as far as the language is concerned, there is no difference between the following statements:\n\n```javascript\nconst visitedCities=\"Melbourne, \"+\"Montreal, \"+\"Marrakech\";\nconst visitedCities = \"Melbourne, \" + \"Montreal, \" + \"Marrakech\";\n```\n\nI‚Äôm sure you‚Äôll find the second line much more readable. And another example:\n\n```\nlet x=1*y;       \nlet x = 1 * y;  \n```\n\nAgain, the second line is much easier to read and debug! So feel free to space out your code in a way that makes sense! For that reason, this is also an acceptable use of white space:\n\n```\nconst cityName         = \"Melbourne\";\nconst cityPopulation   = 5000001;\nconst cityAirport      = \"MEL\";\n```\n\n## Commenting\n\nA comment is un-executable code. They‚Äôre useful for providing an explanation of some code within a program. And also to ‚Äòcomment out‚Äô a section of code to prevent execution ‚Äî often used when testing an alternative piece of code.\n\nThere are two types of comments in JavaScript:\n\n```javascript\n// Comment goes here\n\n/* Comment goes here */\n```\n\nThe first syntax is a single line comment. The comment goes to the right of the `//`\n\nThe second a multi-line comment. The comment goes in between the asterisks `/* here */`\n\nA longer multi-line comment:\n\n```javascript\n/* This is \na comment spanning\nmultiple lines */\n```\n\n## Identifiers\n\nIn JavaScript, the name of a variable, function, or property is known as an identifier. Identifiers may consist of letters, numbers, `$` and `_`. No other symbols are permitted, and they cannot begin with a number.\n\n```javascript\n// Valid üòÄ\n\nName\nname\nNAME\n_name\nName1\n$name\n\n// Invalid üò¢\n\n1name\nn@me\nname!\n```\n\n## Case Sensitivity\n\nJavaScript is case sensitive! An identifier named `test` is different from `Test`.\n\nThe following will throw an error:\n\n```javascript\nfunction test() {\n  alert(\"This is a test!\");\n}\nfunction showAlert() {\n  Test();                     // error! test(); is correct\n}\n```\n\nIn order to ensure that our code is readable, it‚Äôs best to try to vary our names, so no identifiers are found looking too similar.\n\n## Reserved Words\n\nThere are a number of words within JavaScript that may not be used as identifiers. Those words are reserved by the language, as they have built-in functionality. Such as:\n\n```\nbreak, do, instanceof, typeof, case, else, new, var, catch, finally, return, void, continue, for, switch, while, debugger, function, this, with, default, if, throw, delete, in, try, class, enum, extends, super, const, export, import.\n```\n\nSee the full [list of reserved keywords](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015).\n\nYou certainly don‚Äôt need to commit these words to memory! If you get any strange syntax errors pointing to a variable, you can check the list and change the name.\n\n## JavaScript Operators\n\nArithmetical operators `+ -` `*` and `/` are primarily used when performing calculations within JavaScript, such as:\n\n```\n(2 + 2) * 100\n```\n\nThe assignment operator `=` is used to assign values to our variables:\n\n```javascript\nlet a, b, c;\na = 1;\nb = 2;\nc = 3;\n```\n\n## JavaScript Expressions\n\nAn expression is when we combine values, variables and operators to compute a new value (known as a evaluation). Such as:\n\n```javascript\n10 * 10    // Evaluates to 100\n\nlet x = 5\nx * 10     // Evaluates to 50\n\nconst firstName = \"Samantha\";\nconst lastName = \"Doe\";\nfirstName + \" \" + lastName;    // Evaluates to: Samantha Doe\n```\n\n## Wrapping up\n\nAnd there we go! This article aimed to provide a general overview of the basic syntax and structure of JavaScript. We‚Äôve looked at many of the common conventions, however, remember you can be somewhat flexible ‚Äî especially when working in collaborative environments with their own particular standards.\n\nSyntax and structuring both have an important role the play for both the functionality of our programs as well as for code readability and maintainability.\n\n## Related Posts:\n\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)\n* [Understanding JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)",
  "title": "JavaScript Syntax & Structure",
  "description": "Learn the basics of JavaScript syntax & structure.",
  "short": "Learn the basics of JavaScript syntax & structure.",
  "category": "JavaScript"
}