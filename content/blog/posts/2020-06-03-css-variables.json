{
  "date": "Wednesday June 3rd, 2020",
  "dateshort": "June 3rd",
  "body": "**Custom Properties** (commonly known as **CSS Variables**) are a modern addition to CSS. If you’ve worked with programming languages such as JavaScript, Python, etc, you’ll know that variables are extremely useful.\n\nA **variable** is a name which refers to a value, and by using variables in CSS we greatly reduce code repetition & create much more easily maintainable stylesheets.\n\n## Defining a CSS Variable\n\nWe define a variable by using a name beginning with a double hyphen (`--variable-name`), followed by a colon and a value (any valid CSS value):\n\n```css\n:root {\n  --main-color: green;\n}\n```\n\nThe `:root` pseudo-class is a special selector, that applies the style globally to the HTML document. More on this later!\n\nThe variable can be accessed using `var()`:\n\n```css\np {\n  color: var(--main-color)\n}\n```\n\n## Defining Variables in Elements\n\nWe can define CSS Variables inside of any element:\n\n```css\n:root {\n  --default-padding: 30px 30px 20px 20px;\n}\nbody {\n  --main-bg-color: brown;\n}\np {\n  --main-color: yellow;\n}\na:hover {\n  --main-color: red;\n}\n```\n\n## Variable Scope\n\nEach variable is available only to child elements of the selector they are defined in — this is the ‘scope’.\n\nLet’s see this in the context of our previous example using `:root`:\n\n```css\n:root {\n  --main-color: green;\n}\n```\n\n`:root` is a special pseudo-class that refers to the the root element of a tree.\n\nIn an HTML document, the `:root` selector refers to the `html` element. And in fact, it has a higher [specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity) than html so it will always take priority.\n\nSo when a variable is applied to `:root` it’s considered to have ‘global scope’ & is available to all elements.\n\nIf we added a variable to a `main` element, it’d only be available to children of `main`:\n\n```css\nmain {\n  --main-color: yellow;\n}\n```\n\nIf we attempt to use it using it outside of this element, it won’t work.\n\nSo with our two variables as follows:\n\n```css\n:root {\n  --main-color: green;\n}\nmain {\n  --main-color: yellow;\n}\n```\n\nOur `--main-color` will be *green* anywhere in our document, **except** for `main` and any of its child elements — they will be *yellow*.\n\n## Bonus tips..\n\n### Case sensitivity\n\nCSS variables are case sensitive!\n\n```css\n:root {\n --color: green;\n --COLOR: yellow;\n}\n```\n\nSo `--color` and `-COLOR` are two separate variables.\n\n### Using variables in HTML\n\nVariables can be used directly in HTML, like so:\n\n```html\n<!--HTML-->\n<html style=\"--size: 800px\">\nbody {\n  max-width: var(--size)\n}\n```\n\n### Using variables within variables\n\nA variable can be used within another variable:\n\n```css\n--base-red-color: #f00;\n--background-gradient: linear-gradient(to top, var(--base-red-color), #222);\n```\n\n### Using variables with math\n\nCSS variables can be used with the [calc()](https://www.easeout.co/blog/2020-05-08-css-calc) function:\n\n```css\n--input-width: 500px;\nmax-width: calc(var(--input-width) / 2);\n```\n\n### Using variables with media queries\n\nWe can make CSS variables conditional with media queries!\n\nThe following code changes the value of the padding, based on the screen size:\n\n```css\n:root {\n\t--padding: 25px \n}\n@media screen and (max-width: 750px) {\n\t--padding: 10px\n}\n```\n\n### Setting a fallback value for var()\n\nWhen you use the `var()` function you can define a second parameter. This value will be used if the custom property is not found:\n\n```css\nwidth: var(--custom-width, 33%);\n```\n\n## Wrapping up\n\nI’m sure you can tell that the use of CSS variables will make your code much more readable and maintainable.\n\nThey also significantly improve the ease of change across larger codebases. If you set all your constants in a separate CSS file, you won’t find yourself jumping through thousands of lines of code, whenever you want to make a simple change!\n\n## Related Posts:\n\n* [CSS calc()](https://www.easeout.co/blog/2020-05-08-css-calc)\n* [Media Queries](https://www.easeout.co/blog/2020-06-04-css-media-queries)\n* [The Cascade, Inheritance & Specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity)",
  "title": "CSS Variables",
  "description": "Learn how to work with custom properties aka 'variables'.",
  "short": "Learn how to work with custom properties aka 'variables'.",
  "category": "CSS",
  "thumbnail": "/images/uploads/css-variables-min.png"
}