{
  "date": "Thursday September 10th, 2020",
  "dateshort": "September 10th",
  "title": "An Introduction to PUG",
  "short": "Learn how to boost your productivity with PUG.",
  "category": "HTML",
  "description": "Learn how to boost your productivity with PUG.",
  "body": "Pug (formerly known as Jade) is a preprocessor which simplifies the task of writing HTML. It also adds a ton of functionality, such as JavaScript objects, conditionals, loops, mixins and templates. The syntax is arguably a lot cleaner to read and it can be a real time-saver when working with a lot of HTML (especially frameworks such as Bootstrap, Foundation, etc).\n\nLets take a peek at some Pug syntax & compare it to regular HTML..\n\n```pug\n// index.pug\ndoctype html  \nhtml(lang='en')  \n head\n   title Pug demo\n body\n   h1 Welcome to Pug Life\n   div.container\n     p I'm a p that needs to be contained!\n```\n\nNote the use of indentation to nest our HTML as we require. And the lack of closing tags!\n\nAnd here’s the standard HTML output:\n\n```html\n<!-- index.html -->\n\n<!DOCTYPE html>  \n<html lang=\"en\">  \n <head>\n   <title>Pug demo</title>\n </head>\n <body>\n   <h1>Welcome to Pug Life</h1>\n   <div class=\"container\">\n     <p>I'm a p that needs to be contained!</p>\n   </div>\n </body>\n</html>\n```\n\nBy comparison our pug code is much more concise. Additionally, the compiler will throw errors if we have any mistakes in our code – which makes for convenient error prevention.\n\nSo let’s get started!\n\n## How to Install Pug\n\nNote: You’ll need NodeJS installed! Go ahead and [install](https://nodejs.org/en/download/) if you haven’t already.\n\nTo install pug run the following command from your terminal:\n\n```\nnpm install -g pug-cli\n```\n\nWe install globally with `-g` as we’ll need access to Pug commands from terminal.\n\nNow in our root directory, create a file called `index.pug`.\n\nLet's test this out! Add the following text to our file as follows:\n\n```\n// file: index.pug\n\ndoctype html\n```\n\nAnd lets compile it to HTML with the following command:\n\n```\npug index.pug\n```\n\nWe should now see our `index.html` generated in the root directory. It will of course convert to HTML as follows:\n\n```\n// file: index.html\n\n<!DOCTYPE html>\n```\n\nWhen working on a larger project, you might want to use a more specific compile command, such as:\n\n```\npug -w ./ -o ./html -P\n```\n\nThe `-w` flag will watch our pug file for changes and re-compile automatically each time we save. `./` will watch everything in the current directory. -`o ./html` will set the output folder to html. `-P` will make our HTML source code pretty printed, with indentation, line-breaks, etc.\n\nNote: Once you’ve executed this command, keep your terminal running to continue the auto-compile!\n\n## The Basics\n\nLet's get started on a basic HTML structure. Type up the following in your `index.pug`.\n\n```pug\ndoctype html\nhtml\n  head\n  body\n    h1#title Lets get pugging!\n    p I'm a paragraph\n    p.\n      I'm a multi-line paragraph!\n      And this is the second line.\n    p.para. \n      This paragraph has class!\n    .firstDiv A div with a class.\n    #secondDiv A div with an id.\n```\n\nNote the use of indentation! Make sure you tab your child elements.\n\nWhen you save and open up `index.html.` You’ll see the complete HTML generated like so..\n\n```html\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <h1 id=\"title\">Lets get pugging!</h1>\n    <p>I'm a paragraph</p>\n    <p>\n      I'm a multi-line paragraph!\n      And this is the second line.\n    </p>\n    <p class=\"para\">This paragraph has class!</p>\n    <div class=\"firstDiv\">A div with a class.</div>       \n    <div id=\"secondDiv\">A div with an id.</div>\n  </body>\n</html>\n```\n\n## Attributes\n\nLet's take a look some syntax for setting attributes in pug.\n\n```pug\ndoctype html\nhtml\n  head\n    //- Invisible comment.\n    //Visible comment.    \n    script(src=\"script.js\")\n    link(rel='stylesheet', href='css/main.css')\n  body\n    a(href=\"https://google.com\") google.com\n    img(src=\"https://google.com/logo.png\" alt=\"google logo\")\n    input(type=\"password\" name =\"inputpass\")\n    input(type='checkbox' checked)\n    input(type='checkbox' checked=true)\n    input(type='checkbox' checked=false)\n    //Inline styles\n    a(href=\"your-link\", style={color: \"Red\", \"font-size\": \"24px\"}) I'm a link!\n```\n\nOur HTML will generate as follows:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <!--Visible comment.-->\n    <script src=\"script.js\"></script>\n    <link rel=\"stylesheet\" href=\"css/main.css\">\n  </head>\n  <body>\n    <a href=\"https://google.com\">google.com</a>\n    <img src=\"https://google.com/logo.png\" alt=\"google logo\">\n    \n    <input type=\"password\" name=\"inputpass\">\n    <input type=\"checkbox\" checked>\n    <input type=\"checkbox\" checked>\n    <input type=\"checkbox\">\n    <!--Inline styles-->\n    <a href=\"your-link\" style=\"color:Red;font-size:24px;\">I'm a  link!</a>\n  </body>\n</html>\n```\n\n## Adding JavaScript\n\nOne of the most powerful features of Pug, is the ability to easily make our HTML dynamic, using inline JavaScript. Lets take a look at a few examples:\n\n### Variables\n\n```\n- let name = 'Timothy'\n- let city = 'Montreal'\n- let transport = { type: 'Bike' }\n- let food = ['Tacos', 'Pizza', 'Cheetos']\n\n// Incrementation for numeric variables\nage++\n\n// Assigning variables to elements\np= name\nspan.age= age\n```\n\n### Interpolation\n\n```\n- let size =\"medium\"\n  img(src=`https://google.com/logo-${size}.png` alt=\"logo\")\n---------------------\n\n// output:\n<img src=\"https://google.com/logo-medium.png\" alt=\"logo\">\n```\n\n### Loops\n\n```\nul\n  each city in ['Sydney', 'Montreal', 'New York']\n    li= city\nul\n  each city, index in ['Sydney', 'Montreal', 'New York']\n    li= 'Number ' + index + ': ' + city\n-------------------------------------------------\n// output:\n<ul>\n  <li>Sydney</li>\n  <li>Montreal</li>\n  <li>New York</li>\n</ul>\n<ul>\n  <li>Number 0: Sydney</li>\n  <li>Number 1: Montreal</li>\n  <li>Number 2: New York</li>\n</ul>\n```\n\n### Conditionals\n\n```\nif user\n  h2 Welcome back #{user}!\nelse if admin\n  h2 Hey #{admin}!\nelse\n  h2 Sign up!\n```\n\n### Mixins\n\n```\n// Declaration\nmixin list\n  ul\n    li Sydney\n    li Montreal\n    li New York\n// Use\n+list\n+list\n------------------\n// output:\n<ul>\n  <li>Sydney</li>\n  <li>Montreal</li>\n  <li>New York</li>\n</ul>\n<ul>\n  <li>Sydney</li>\n  <li>Montreal</li>\n  <li>New York</li>\n</ul>\n```\n\nMixins compile as functions, and therefore can take arguments!\n\n```\nmixin city(name)\n  li.city= name\nul\n  +city('Sydney')\n  +city('Montreal')\n  +city('New York')\n--------------------\n// output:\n<ul>\n  <li class=\"city\">Sydney</li> \n  <li class=\"city\">Montreal</li>\n  <li class=\"city\">New York</li>\n</ul>\n```\n\nThe features we’ve looked at here are really just the tip of the iceberg! For the full specs check out [PugJS.org — Getting Started](https://pugjs.org/api/getting-started.html).\n\n## Structuring your Pug files\n\nA well organized template system is a crucial part of any development process. What follows is a look at how we can organize our projects using both `includes` and `extends`.\n\n### Includes\n\nIncludes allow you to insert the contents of one Pug file into another. All you need to do is add an `include` directive into your main pug file, as follows:\n\n```pug\ndoctype html\nhtml\n  include additions.pug\n  body\n    h1 My Heading\n    p Here goes the text.\n```\n\nLets now create the `additions.pug` file and add the following content:\n\n```pug\nhead\n  title My Site\n  script(src='/js/jquery.js')\n  script(src='/js/app.js')\n```\n\nOur files will compile merged into `index.html` like so:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  <title>My Site</title>\n  <script src=\"/js/jquery.js\"></script>\n  <script src=\"/js/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Heading</h1>\n    <p>Here goes the text.</p>\n  </body>\n</html>\n```\n\n### Extends\n\nThe `extends` keyword allows a template to extend a layout or parent template. It can then override certain pre-defined blocks of content, using the `block` command.\n\nWe want to keep our projects as organized as possible! A logical template system will define a base template, and then all the other templates extend from it. For example:\n\n```\n// file: index.pug\n\nextends layout.pug\n\nblock content\n  h1 hello world!\n```\n\nHere we’ve set our `index.pug` file as the base template. With a call to the `layout.pug` file via extends.\n\nNote the use of the `block` command. This is how we direct part of a template to be extended.\n\n```\n// file: layout.pug\n\ndoctype html\nhtml(lang=\"en\")\n  head\n    meta(charset='utf-8')\n  body\n    block content\n    h2 hello again world!\n\n```\n\nHere is the content of our layout.pug, we use the `block` command with the same name (you can call it whatever you like!), so the pug engine knows where to put the code block.\n\nThis code will compile as follows:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n  </head>\n  <body>\n    <h1>hello world!</h1>\n    <h2>hello again world!</h2>\n  </body>\n</html>\n```\n\nOf course you can use as many blocks as you like, and create as many pug files as you like. The point is to build a logical structure into our projects & keep our code clean and organized!\n\n## Wrapping up\n\nAnd that’s it! We’ve setup a Pug development environment and covered the fundamentals. We’ve looked at many of the features provided by adding JavaScript such as variables, interpolation, loops, conditionals and mixins. We’ve also looked at how to structure our Pug files using templating with the include and extend directives.\n\n## Related Posts:\n\n* [The CSS Cascade, Inheritance & Specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity)\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)"
}