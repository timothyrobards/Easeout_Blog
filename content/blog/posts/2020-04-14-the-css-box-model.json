{
  "date": "Tuesday April 14th, 2020",
  "dateshort": "April 14th",
  "title": "The CSS Box Model",
  "description": "How to use the box model to lay out elements.",
  "category": "CSS",
  "body": "In this tutorial, we’ll be learning about the CSS Box Model!\n\nUnderstanding the box model is a key concept to grasp in CSS. And for many, learning the box model provides a real moment of clarity — where CSS layouts start to really make sense!\n\nThe thing to remember is that *each element in web design, is a rectangular box*.\n\n# The Box Model\n\nWhen rendering a document, the browser see’s each element as a rectangular box — this is the box model. The CSS determines the size of the box based on a few properties:\n\n* Content\n* Padding\n* Border\n* Margin\n\nPerhaps the best way to visualize this, is to open your browser DevTools and see how it is displayed:\n\n![Firefox Box Model Example](/images/uploads/box-model-firefox.png)\n\nHere you can examine the box model of any element on a page! Check this out by right-clicking an element & selecting *Inspect*, then see the layout panel in DevTools.\n\nThe area in light blue is the content box, around it we have the padding, then the border and finally the margin. This is our box! Within it we have:\n\n**Content:** This is the area where your content is displayed, which can be sized using *width* & *height* properties. It’s typically where text and images appear.\n\n**Padding:** The padding sits around the content area, its transparent and its size is set using *padding* properties.\n\n**Border:** The border box wraps around the padding (if any) and content. Its size and style are set using *border* properties.\n\n**Margin:** The margin clears an area outside the border, wrapping the content, padding and border with white-space between this box and other elements. Its size is set using *margin* properties.\n\nWith the box model we can also add a border around elements, and define space between elements.\n\nTypically when you set a width (or height) on the element, those rules will apply to the **content area**. Any padding, border, or margins are added to that width and height to give the total size of the box.\n\n## Calculating the box size\n\nLet’s use an example to see how we calculate the size of our box:\n\n```css\n.box {\n  width: 300px;\n  height: 200px;\n  margin: 10px;\n  padding: 25px;\n  border: 2px solid black;\n}\n```\n\nWith the above CSS, our box width is actually 354px (300 + 25 + 25 + 2+ 2), and its height is 254px (200 + 25 + 25 + 2+ 2). As the padding and border are added to the width used for the content area.\n\nThe margin is **not** counted towards the size of the box. It affects the space on the page, but only the space outside the box. The box’s area stops at the border — it does not extend into the margin.\n\n*Note:* If padding or borders are undeclared, they are either zero (if you’ve used a css reset or framework) or the browser default value (which is probably not zero).\n\n## CSS Box Sizing\n\nThe CSS `box-sizing` property lets us include the padding and border in our box size calculation — that is the total box width & height.\n\n### Without box-sizing\n\nAs we’ve seen, the width and height of an element is calculated like so:\n\n*width + padding + border = actual element width\\\nheight + padding + border = actual element height*\n\nAs a result, when you set the width or height of an element, it often appears bigger than you might’ve thought (as the element’s border and padding are added to the specified width & height).\n\nIn the below example, the two elements end up being different sizes, as *item2* has padding specified:\n\n```css\n.item1 {\n  width: 300px;\n  height: 200px;\n  border: 3px solid green;\n}\n.item2 {\n  width: 300px;\n  height: 200px;\n  padding: 50px;\n  border: 3px solid red;\n}\n```\n\nThe `box-sizing` property solves this problem!\n\n### Using box-sizing\n\nWith `box-sizing` CSS includes the padding and border in the element's total width and height.\n\nSet `box-sizing: border-box;` on an element, like so:\n\n```css\n.item1 {\n  width: 300px;\n  height: 200px;\n  border: 3px solid green;\n  box-sizing: border-box;\n}\n\n.item2 {\n  width: 300px;\n  height: 200px;\n  padding: 50px;\n  border: 3px solid red;\n  box-sizing: border-box;\n}\n```\n\nNow it’ll make much more sense when we lay out elements. As they’re sized in a much more intuitive way — with the padding and border included in the total height/width.\n\nMany developers want this to apply to all elements on their pages. A simple way to ensure this is to implement the following CSS rule:\n\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\nAnd there you go! We’ve looked at the Box Model & how its defined, as well as how to calculate the box size on our elements & how to apply the `box-sizing` property to handle our sizing more intuitively.\n\nIn the next tutorial, we’ll be looking at Margins, Padding & Borders in more detail. Be sure to check this out to build upon your knowledge of the box model!\n\n## Related Posts:\n\n* [Margins, Padding & Borders](https://www.easeout.co/blog/2020-04-16-css-margins-padding-borders)\n* [CSS Units](https://www.easeout.co/blog/2020-04-30-css-units)\n* [Basic Selectors](https://www.easeout.co/blog/2020-03-10-css-basic-selectors)",
  "short": "How to use the box model to lay out elements."
}