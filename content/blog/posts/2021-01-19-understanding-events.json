{
  "date": "Monday January 18th, 2021",
  "dateshort": "January 18th",
  "body": "The interaction of JavaScript with HTML is handled through events. Events are actions that occur when either the user or the browser itself manipulates the page.\n\nSome common events that occur with websites are page loads, button clicks, keypresses, hovers, form submissions, window resizing, to name but a few.\n\nAs developers, we can use these events to execute coded responses, such as displaying messages, validating data, reacting to button clicks, and really anything else we can imagine!\n\n## What are Event Handlers & Event Listeners?\n\nAn event is fired whenever an action occurs on a page that JavaScript can react to, such as when a user clicks on a button (click event) or presses a key (keypress event).\n\nAn event handler is a JavaScript function that runs when an event fires.\n\nAn event listener attaches responsiveness to a given element, which allows the element to wait or “listen” for the given event to fire.\n\nEvents can be assigned to elements via inline event handlers, event handler properties & event listeners. Let’s take a look at each of these methods.\n\n## Inline Event Handlers\n\nLet’s start with a basic example of an inline event handler. The below HTML consists of a `button` and a `p` element, we want the text content of `p` to change when the user clicks the `button`.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<head>\n    <title>Understanding Events</title>\n</head>\n\n<body>\n\n<button onclick=\"changeText()\">Click me</button>\n\n<p>Change me!</p>\n\n</body>\n</html>\n```\n\nAs you can see, we’ve added an attribute called `onclick` to our `button` element. The attribute value will be a JavaScript function we’ll create called `changeText()`.\n\nHere’s our output so far:\n\n![JavaScript Event Demo 1](/images/uploads/javascript-events1.png)\n\nNow let’s create our function! I’ll add it between script tags for this example:\n\n```\n<script>\n\n// Function to modify the text content of the paragraph\nconst changeText = () => {\n    const p = document.querySelector('p');\n\np.textContent = \"I was changed with an inline event handler!\";\n}\n\n</script>\n```\n\nOur `changeText()` function modifies the `textContent` of our`p` element.\n\nSo now when you click on the button, the event fires which runs our `changeText()`function, which alters the text in our `p` tag.\n\n![JavaScript Event Demo 2](/images/uploads/javascript-events2.png)\n\nWhile inline event handlers clearly work — they really shouldn’t be used in production. For the same reason that inline CSS shouldn’t be used, it’s messy! And our code will be much more maintainable, if we handle our JavaScript entirely in separate script files, rather then having handlers throughout our HTML.\n\n## Event Handler Properties\n\nEvent handler properties work very similarly to inline handlers, except we set the property of an element in JavaScript, instead of on the attribute in our HTML.\n\nOur HTML is the same, except we’re now excluding the `onclick=\"changeText()\"` we used previously:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<head>\n    <title>Understanding Events</title>\n</head>\n\n<body>\n\n<button>Click me</button>\n\n<p>Change me!</p>\n\n</body>\n</html>\n```\n\nAnd our function will remain similar as well, except now we need to access the `button` element in our JavaScript. We simply access `onclick` just as we would access `style` or `id` or any other element property, then assign the function reference.\n\n```\n// Function to modify the text content of the paragraph\n\nconst changeText = () => {\n  const p = document.querySelector('p');\n  p.textContent = \"I was changed with an event handler property!\";\n}\n\n// Add event handler as a property of the button element\n\nconst button = document.querySelector('button');\nbutton.onclick = changeText;\n```\n\nNote: Event handlers do not follow the camelCase convention. Notice the code is `onclick`, not `onClick`!\n\nNow when you click the button, it’ll fire the event from our JavaScript property:\n\n![JavaScript Event Demo 3](/images/uploads/javascript-events3.png)\n\nYou’ll see that when passing a function reference to the `onclick` property, we don’t include parentheses, as we are not invoking the function at that moment, but only passing a reference to it.\n\nThe event handler property is more maintainable than the inline handler, but it still isn’t the greatest way to manage events. If for example, you tried to set multiple `onclick` properties, all but the last one would be overwritten, as demonstrated below:\n\n```javascript\nconst p = document.querySelector('p');\nconst button = document.querySelector('button');\n\nconst changeText = () => {\n    p.textContent = \"Will I change?\";\n}\n\nconst alertText = () => {\n    alert('Will I alert?');\n}\n\n// Events can be overwritten!\n\nbutton.onclick = changeText;\nbutton.onclick = alertText;\n```\n\nIn the above example, the `button` click would **only** display an alert, and not change the `p` text, since the `alert()` code was the last one added to the property.\n\n![JavaScript Event Demo 4](/images/uploads/javascript-events4.png)\n\nNow that we have an understanding of both inline event handlers and event handler properties, let’s move onto event listeners.\n\n## Event Listeners\n\nEvent listeners watch for an event on an element, instead of assigning the event directly to a property on the element, we’ll use the `addEventListener()` method to listen for the event.\n\n`addEventListener()` takes two mandatory parameters — the event to listen for and the listener callback function.\n\nThe HTML for our event listener will remain the same as the previous example. And we’ll still be using the same `changeText()` function as before.\n\nHowever, we'll now attach the `addEventListener()`method to the button, as follows:\n\n```javascript\n// Function to modify the text content of the paragraph\n\nconst changeText = () => {\n    const p = document.querySelector('p');\n    p.textContent = \"I changed because of an event listener.\";\n}\n\n// Listen for click event\n\nconst button = document.querySelector('button');\nbutton.addEventListener('click', changeText);\n```\n\nNote: In the first two methods, a click event was referred to as `onclick`, but with event listeners, it is referred to as `click`. Every event listener drops the `on` from the word.\n\nAnd now when we click the button, our output will be:\n\n![JavaScript Event Demo 5](/images/uploads/javascript-events5.png)\n\nEvent listeners appear very similar to event handler properties, however, they have a crucial advantage. We can set multiple event listeners on the same element, for example:\n\n```javascript\nconst p = document.querySelector('p');\nconst button = document.querySelector('button');\n\nconst changeText = () => {\n    p.textContent = \"Will I change?\";\n}\n\nconst alertText = () => {\n    alert('Will I alert?');\n}\n\n// Multiple listeners can be added to the same event and element\n\nbutton.addEventListener('click', changeText);\nbutton.addEventListener('click', alertText);\n```\n\nWe can see how both events have fired, providing the user with both an alert and modified text once clicking out of the alert.\n\n![JavaScript Event Demo 6](/images/uploads/javascript-events6.png)\n\nIt’s more concise to use anonymous functions instead of function references on event listeners. Anonymous functions are functions that are not named, such as:\n\n```javascript\n// An anonymous function on an event listener\n\nbutton.addEventListener('click', () => {\n    p.textContent = \"Will I change?\";\n});\n```\n\nWe could also use the `removeEventListener()` function to remove one or all events from an element.\n\n```javascript\n// Remove alert function from button element\n\nbutton.removeEventListener('click', alertText);\n```\n\nIt’s also useful to know that you can use `addEventListener()` on the `document` and `window` object.\n\nEvent listeners are currently the most common and preferred way to handle events in JavaScript. Next up we’ll take a brief look at some of the more common events that we’re likely to work with.\n\n## Common Events\n\nSo far we’ve focused on using the click event while learning about inline event handlers, event handler properties and event listeners. However there are many more events available for us to work with, so let’s take a look!\n\n### Mouse Events\n\nMouse events are among the most frequently used events. They refer to events that involve clicking the mouse button or hovering and moving the pointer. And of course, these events also correspond to the equivalent action on a touch device. Some examples are:\n\n`click` Fires when the mouse is pressed and released on an element.\\\n`dblclick` Fires when an element is clicked twice.\\\n`mouseenter` Fires when a pointer enters an element.\\\n`mouseleave` Fires when a pointer leaves an element.\\\n`mousemove` Fires every time a pointer moves inside an element.\n\nA `click` is actually a compound event that is comprised of combined `mousedown` and `mouseup` events, these fire when the mouse button is pressed down or lifted, respectively.\n\nUsing `mouseenter` and `mouseleave` together recreates a hover effect that lasts as long as a mouse pointer is on the element.\n\n### Form Events\n\nForm events are actions that relate to forms, such as `input` elements and whether they are selected or unselected, and also form submission.\n\n`submit` Fires when a form is submitted.\\\n`focus` Fires when an element (such as an input) receives focus.\\\n`blur` Fires when an element loses focus.\n\nFocus is achieved when an element is selected, for example, through a mouse click or navigating to it via the `TAB` key.\n\nJavaScript is often used to submit forms and send the values through to a back-end language. The advantage of using JavaScript to send forms is that it does not require a page reload to submit the form, and JavaScript can be used for form validation.\n\n### Keyboard Events\n\nKeyboard events are used for handling keyboard actions, such as pressing a key, lifting a key, and holding down a key.\n\n`keydown` Fires once when a key is pressed.\\\n`keyup` Fires once when a key is released.\\\n`keypress` Fires continuously while a key is pressed.\n\nAlthough they look similar, `keydown` and `keypress` events do not access all the exact same keys. While `keydown` will acknowledge every key that is pressed, `keypress` will omit keys that do not produce a character, such as `SHIFT`, `ALT`, or `DELETE`.\n\nKeyboard events also have specific properties for accessing individual keys.\n\nIf a parameter, known as an `event` object is passed through to the event listener, we can access more information about the action that took place. Three properties that pertain to keyboard objects include `keyCode`, `key`, and `code`.\n\nFor example, if the user presses the letter `a` key on their keyboard, the following properties pertaining to that key will surface:\n\n`keyCode` A number pertaining to the key e.g. “65”\\\n`key` Represents the character name e.g. “a”\\\n`code` Represents the physical key being pressed e.g. “KeyA”\n\nLet’s take a closer look at this with the following code:\n\n```javascript\n// Test the keyCode, key, and code properties\n\ndocument.addEventListener('keydown', event => {\n    console.log('key: ' + event.keyCode);\n    console.log('key: ' + event.key);\n    console.log('code: ' + event.code);\n});\n```\n\nYou could save this code inside of script tags in a new HTML file. Then open up your browser, go to developer tools and open up the console tab. You’ll then see the information is logged every time you press a key on the keyboard. For example, if you press the ‘a’ key, your output would be:\n\n```\nkeyCode: 65\nkey: a\ncode: KeyA\n```\n\nThe `keyCode` property is a number that pertains to the key that has been pressed. The `key` property is the name of the character, which can change — for example, pressing `a` with `SHIFT` would result in a `key` of `A`. The `code` property represents the physical key on the keyboard.\n\nNote: the `keyCode` property is being deprecated so it’s preferable to use `code` in new projects.\n\nCheck out the complete list of events [here](https://developer.mozilla.org/en-US/docs/Web/Events).\n\n## Event Objects\n\nThe `Event` object consists of properties and methods that all events can access. In addition to the generic `Event` object, each type of event has its own extensions, such as `KeyboardEvent` and `MouseEvent`.\n\nThe `Event` object is passed through a listener function as a parameter. It is typically written as `event` or `e`. We can access the `code` property of the `keydown` event to replicate the keyboard controls of a PC game.\n\nLet’s test it out with the following HTML:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<head>\n    <title>Event Objects</title>\n</head>\n\n<body>\n   <p></p>\n</body>\n</html>\n```\n\nOpen it up in your browser, and paste the following code into your developer console:\n\n```javascript\n// Pass an event through to a listener\n\ndocument.addEventListener('keydown', event => {\n    var element = document.querySelector('p');\n\n    // Set variables for keydown codes\n    var a = 'KeyA';\n    var s = 'KeyS';\n    var d = 'KeyD';\n    var w = 'KeyW';\n\n    // Set a direction for each code\n    switch (event.code) {\n        case a:\n            element.textContent = 'Left';\n            break;\n        case s:\n            element.textContent = 'Down';\n            break;\n        case d:\n            element.textContent = 'Right';\n            break;\n        case w:\n            element.textContent = 'Up';\n            break;\n    }\n});\n```\n\nWhen you press one of the keys `a`, `s`, `d`, or `w`, you'll see output like so:\n\n![JavaScript Event Demo 7](/images/uploads/javascript-events7.png)\n\nI’m sure you’re now seeing that by having this control over how the browser responds — we can build increasingly dynamic websites.\n\n### event.target\n\nIn this final section, we’ll look at one of the most frequently used event properties: the `target` property.\n\nLet’s work with the following HTML:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<head>\n    <title>Target</title>\n</head>\n\n<body>\n\n  <section>\n    <div id=\"one\">One</div>\n    <div id=\"two\">Two</div>\n    <div id=\"three\">Three</div>\n  </section>\n\n</body>\n</html>\n```\n\nUsing `event.target` within our browser's Developer Console, we can place one event listener on the outer `section` element and get the most deeply nested element.\n\n```javascript\nconst section = document.querySelector('section');\n\n// Print the selected target\n\nsection.addEventListener('click', event => {\n    console.log(event.target);\n});\n```\n\nClicking on any one of our `div` elements will return the output of the relevant specific element to the Console using `event.target`. This is extremely useful, as it allows you to place only one event listener that can be used to access many nested elements.\n\n![JavaScript Event Demo 8](/images/uploads/javascript-events8.png)\n\nWith the `Event` object, we can set up responses related to all events, including generic events and more specific extensions.\n\n## Conclusion\n\nEvents are actions that take place on a website, such as clicking, hovering, submitting a form, loading a page, or pressing a key on the keyboard. JavaScript becomes truly interactive and dynamic when we are able to make websites respond to actions the user has taken.\n\nIn this tutorial, we learned what events are, examples of common events, the difference between event handlers and event listeners, and how to access the `Event` object. Using this knowledge, you will be ready to begin making dynamic websites and applications!\n\n## Related Posts:\n\n* [An Introduction to the DOM](https://www.easeout.co/blog/2020-12-14-an-introduction-to-the-dom)\n* [Accessing DOM Elements](https://www.easeout.co/blog/2020-12-21-accessing-dom-elements)\n* [Traversing the DOM](https://www.easeout.co/blog/2020-12-28-traversing-the-dom/)",
  "title": "Understanding Events",
  "description": "Learn how to work with events in JavaScript.",
  "short": "Learn how to work with events in JavaScript.",
  "category": "JavaScript"
}