{
  "date": "Wednesday June 10th, 2020",
  "dateshort": "June 10th",
  "body": "The `transform` property allows us to visually manipulate elements by scaling, skewing, rotating, or translating them.\n\nFor example:\n\n```css\n.element {   \n  width: 30px;   \n  height: 30px;   \n  transform: scale(10); \n}\n```\n\nDespite our height and width declarations, the transform scales our element to ten times its original size!\n\nTransforms are especially fun when combined with [animations](https://www.easeout.co/blog/2020-06-23-css-animation).\n\n## Transform functions\n\nWe can use the following functions:\n\n* `scale()`: scales the size of an element.\n* `skew()`: turns an element to its left or right.\n* `rotate()`: rotates an element clockwise from its current position.\n* `translate()`: repositions an element in a horizontal or vertical direction.\n* `perspective()`: sets the depth used in 3D transforms.\n\nLet’s take a look at each!\n\n### Scale\n\nThe `scale()` function is a shorthand for `scaleX()` and `scaleY()`.\n\n`scaleX()` resizes an element along its x-axis (horizontally) and `scaleY()` along its y-axis (vertically).\n\nFor example, lets scale the `.element` width by 2 (doubling its width) and reduce its height by 0.5 (reducing by half):\n\n```css\n.element {\n  transform: scale(2, 0.5);\n}\n```\n\nThe first parameter is `scaleX()` and the second `scaleY()`.\n\n### Skew\n\nThe `skew()` function tilts an element left or right. It’s also shorthand for `skewX()` and `skewY()`.\n\nSkew along the x-axis (horizontal):\n\n```css\ntransform: skewX(15deg);\n```\n\nSkew along the y-axis (vertical):\n\n```css\ntransform: skewY(15deg);\n```\n\nSkew along both axis simultaneously:\n\n```css\ntransform: skew(15deg, 15deg);\n```\n\n### Rotate\n\nThe `rotate()` function rotates an element clockwise from its original position:\n\n```css\ntransform: rotate(25deg);\n```\n\nWe can use a negative value to rotate it in the opposite direction:\n\n```css\ntransform: rotate(-25deg);\n```\n\n### Translate\n\nThe `translate()` function moves an element in a horizontal or vertical direction (from its original position):\n\n```css\ntransform: translate(50px, 10px);\n```\n\nHere our element will have moved 50px (to the right) on its horizontal axis, and 10px (down) on its vertical axis.\n\nThis is shorthand for:\n\n```css\ntransform: translateX(50px);\ntransform: translateY(10px);\n```\n\nTo instead move to the left or up, we’d simply use negative values.\n\nWe can use any valid length value, like `px`, `em` & `rem`.\n\n### Combining multiple transforms\n\nMultiple transforms can be combined, by separating each function with a space:\n\n```css\ntransform: rotateY(30deg) scaleX(2) translateX(200px);\n```\n\n## 3D transforms\n\nWith 3D transforms, we add a third “z” axis, which adds the depth dimension.\n\nThe following additional functions control the Z axis:\n\n* `translateZ()`\n* `rotateZ()`\n* `scaleZ()`\n\nFor these we have the corresponding shorthands of `translate3d()`, `rotate3d()` and `scale3d()`. For when we want to combine `translateX()`, `translateY()` and `translateZ()`.\n\n### Perspective\n\nThe `perspective` property specifies how far away a 3D object appears from the viewer: \n\n```css\n.element {\n  perspective: 100px;\n}\n```\n\nA lower value will result in a more intense 3D effect than a higher value.\n\nNote that when defining `perspective` for an element, the **child** elements get the perspective view, **not** the element itself.\n\n### Perspective-origin\n\nThe `perspective-origin` property defines at which position the user is looking at the 3D object:\n\n```css\n.element {\n  perspective: 100px;\n  perspective-origin: left;\n}\n```\n\nIt positions the 3D object as if it’s being viewed from a different angle.\n\n## Related Posts:\n\n* [CSS Transitions](https://www.easeout.co/blog/2020-06-19-css-transitions)\n* [CSS Animation](https://www.easeout.co/blog/2020-06-23-css-animation)\n* [Feature Queries](https://www.easeout.co/blog/2020-06-08-css-feature-queries)",
  "title": "CSS Transforms",
  "description": "Learn how to transform elements with CSS.",
  "short": "Learn how to transform elements with CSS.",
  "category": "CSS"
}