{
  "date": "Monday December 21st, 2020",
  "dateshort": "December 21st",
  "body": "In this tutorial, we’re going to take a look at several methods we can use to access DOM elements, such as: `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, `querySelector()` and `querySelectorAll()`.\n\nWe’ll be working with an HTML file that consists of a variety of elements, this way we can practice each method. \n\nThe HTML is as follows:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Master the DOM!</title>\n</head>\n<body>\n  <h1>Master the DOM!</h1>\n  <div id=\"test\">I'm an ID</div>\n  <div class=\"test\">I'm a class</div>\n  <div class=\"test\">I'm another class</div>\n  <section>I'm a tag</section>\n  <section>I'm another tag</section>\n  <div id=\"test-query\">Use a query selector</div>\n  <div class=\"test-query-all\">Use query selector ALL</div>\n  <div class=\"test-query-all\">Use query selector ALL</div>\n</body>\n</html>\n```\n\nOur output looks like this:\n\n![DOM Example](/images/uploads/dom1.png)\n\n## getElementById()\n\nPerhaps the most simple way to access a single element in the DOM is by its unique `id`. To do this we use the `getElementById()` method.\n\n```\ndocument.getElementById();\n```\n\nTo access an element in this way it must have an `id` attribute. Such as:\n\n```html\n<div id=\"test\">I'm an ID</div>\n```\n\nWith our HTML file open in the browser, open up the Console tab of Developer Tools. And let’s get that element and assign it to a variable named `testId`.\n\n```\nconst testId = document.getElementById('test');\n```\n\nWe can see the result with a console log:\n\n```\nconsole.log(testId);\n\n// output: \n \n<div id=\"test\">I'm an ID</div>\n```\n\nAnd let’s be sure we’re accessing the right element by giving it some style:\n\n```\ntestId.style.backgroundColor = 'red';\n```\n\n*Note:* We’ll dive deeper into altering style later in the article!\n\nOur live page will now look like this:\n\n![DOM Example Selection](/images/uploads/dom2.png)\n\nAccessing an element via its `id` is simple enough, however, it can only connect you to a single element at a time (*as `id`’s must be unique*). So let's look at some more methods.\n\n## getElementsByClassName()\n\nWhen we want to get one or more elements in the DOM, we can access elements by class name using `getElementsByClassName()`.\n\n```\ndocument.getElementsByClassName();\n```\n\nIn our example, we have two elements with the *class* of `test`.\n\n```\n<div class=\"test\">I'm a class</div>\n<div class=\"test\">I'm another class</div>\n```\n\nIn the *Console*, let's get both of these elements and add them to a variable called `testClass`.\n\n```\nconst testClass = document.getElementsByClassName(‘test’);\n```\n\nHowever, if we attempt to modify our elements in the same way we did with the previous ID example, we’d run into an error!\n\n```\ntestClass.style.backgroundColor = 'green';\n\n// output:\n\nUncaught TypeError: Cannot set property 'backgroundColor' of undefined\n    at <anonymous>\n```\n\nThis won’t work as instead of accessing one element, we’re accessing multiple elements that are stored in an array-like object.\n\n```\nconsole.log(testClass);\n\n// Output:\n\nHTMLCollection(2) [div.test, div.test]\n```\n\nWhen working with arrays, we access elements using an index number, the numbers start from `0`. So we can change our first class element like so:\n\n```\ntestClass[0].style.backgroundColor = 'green';\n```\n\nAnd to change all our class elements, we could use a `for` loop:\n\n```\nfor (i = 0; i < testClass.length; i++) {\n  testClass[i].style.backgroundColor = 'green';\n}\n```\n\n*Note:* I’ll be looking into the fundamentals of arrays and loops in future articles.\n\nHere’s our updated example:\n\n![DOM Example Updated Selection](/images/uploads/dom3.png)\n\n## getElementsByTagName()\n\nAnother way to access multiple elements is via its HTML tag name using `getElementsByTagName()`.\n\n```\ndocument.getElementsByTagName();\n```\n\nHere are the `section` elements in our example:\n\n```html\n<section>I'm a tag</section>\n<section>I'm another tag</section>\n```\n\nLet's add them to a variable:\n\n```\nconst testTag = document.getElementsByTagName(‘section’);\n```\n\nAgain, we’re working with an array-like object of elements, so let's modify all our `section` tags with a `for` loop.\n\n```\nfor (i = 0; i < testTag.length; i++) {\n  testTag[i].style.backgroundColor = 'blue';\n}\n```\n\n![DOM Example Updated Selection](/images/uploads/dom4.png)\n\n## Query Selectors\n\nLet’s take a look at our final element access methods `querySelector()` and `querySelectorAll()`.\n\n```\ndocument.querySelector();\ndocument.querySelectorAll();\n```\n\nTo target a single element, we use the `querySelector()` method. Let’s access the following element in our example:\n\n```\n<div id=\"test-query\">Use a query selector</div>\n```\n\nAs it’s an `id` attribute, we use the hash `#` symbol when assigning our element:\n\n```\nconst testQuery = document.querySelector(‘#test-query’);\n```\n\nIf there were multiple instances of the element selected with `querySelector()`, only the first would be returned. To collect *all* elements matching a query, we’d use `querySelectorAll()`.\n\nOur example contains two elements with the `test-query-all` class:\n\n```html\n<div class=\"test-query-all\">Use query selector ALL</div>\n<div class=\"test-query-all\">Use query selector ALL</div>\n```\n\nAs we’re now working with `class` attributes, we use the period `.` symbol to access our elements:\n\n```\nconst testQueryAll = document.querySelectorAll(‘.test-query-all’);\n```\n\nAnd let’s use a `forEach()` method to modify our styles, like so:\n\n```\ntestQueryAll.forEach(query => {\n  query.style.backgroundColor = 'yellow';\n});\n```\n\n![DOM Example Query Selector All](/images/uploads/dom5.png)\n\nAdditionally, query selector methods have the ability to work with multiple element types. For example:\n\n`querySelector('section, article')` would match with whichever tag appears first, and:\n\n`querySelectorAll('section, article')` would match with *all* `section` and `article` tags within the document.\n\nQuery selector methods are very powerful! You can use them to access any element or group of elements in the DOM, in the same way as you would when selecting elements in CSS.\n\n## Wrapping up\n\nAnd that's all for today! We’ve learned all about the DOM, and worked with the DOM tree and nodes to learn all about accessing and working with DOM elements.\n\nIn the next tutorial, we’ll move on to traversing and modifying elements. Stay tuned!\n\n## Related Posts:\n\n* [An Introduction to the DOM](https://www.easeout.co/blog/2020-12-14-an-introduction-to-the-dom)\n* [Traversing the DOM](https://www.easeout.co/blog/2020-12-28-traversing-the-dom)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)",
  "title": "Accessing DOM Elements",
  "description": "How to access DOM elements with JavaScript.",
  "short": "How to access DOM elements with JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-accessing-dom-elements.png"
}