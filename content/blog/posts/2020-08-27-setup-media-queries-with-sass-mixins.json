{
  "date": "Thursday August 27th, 2020",
  "dateshort": "August 27th",
  "body": "When building websites and apps, we’ll often use media queries to help ensure our layouts’ responsivity. This way, they can adapt to suit the multitudes of devices accessing them, as we need to ensure all of our users are catered for when engaging with our products.\n\n## CSS Media Queries\n\nIf you have experience with CSS, you’ll likely know that a media query is a CSS3 module which allows content to render and adapt to conditions. Such as screen resolution, for example:\n\n```CSS\n@media (max-width: 599px) {\n font-size: 1rem;\n}\n```\n\nHere, we’ve set the font size to `1rem` when the viewport size is **<=** `599px`.\n\nThis is simple enough, and of course we’ll need multiple media queries to have a fully responsive site.\n\nHowever, inevitably, the time will come where we’ll need to edit the rules for the actual breakpoints, and searching through all of your code to change every line affected by a rule change is far from ideal. There has to be a better way!\n\nModern layout specifications have improved greatly over the past few years, [Grid](https://www.easeout.co/blog/2020-05-29-the-css-grid-guide) and [Flexbox](https://www.easeout.co/blog/2020-05-22-the-flexbox-guide) are responsive by default. This helps us to cut down on the amount of media queries required in our projects & makes for cleaner code.\n\nHowever, media queries still have a place in modern web development. And as our projects grow bigger, we need a better way of managing them.\n\nEnter SASS mixins!\n\n## Mixins\n\nAs we know (see [mixins](https://www.easeout.co/blog/2020-07-21-sass-mixins)), SASS mixins give us the ability to create reusable chunks of code — they reduce repetition, promote dry code and allow for ease of maintenance.\n\nSo writing media queries as mixins to inject into your stylesheets, wherever they’re required makes a whole lot of sense!\n\nLet’s now look at an example..\n\n## Setting up your mixins\n\n```SASS\n@mixin for-phone-only {\n  @media (max-width: 599px) { @content; }\n}\n@mixin for-tablet-portrait-up {\n  @media (min-width: 600px) { @content; }\n}\n@mixin for-tablet-landscape-up {\n  @media (min-width: 900px) { @content; }\n}\n@mixin for-desktop-up {\n  @media (min-width: 1200px) { @content; }\n}\n@mixin for-big-desktop-up {\n  @media (min-width: 1800px) { @content; }\n}\n```\n\nHere, we’ve written up 5 common breakpoints into `@mixin` blocks.\n\nThe `@content` syntax is a directive of SASS which allows for the insertion of content later on, as you likely won’t be writing all of your queries at once.\n\n## Using a mixin \n\nSay we want to use a mixin to reduce the font size of our header text on mobile devices.\n\nWe add the mixin (nested under the appropriate class) as an **include**, like so:\n\n```SASS\n.header-title {  \n   font-size: 2rem;  \n \n   @include for-phone-only {    \n      font-size: 1rem; \n   }\n}\n```\n\nWhen we compile our project, our @include will translate into:\n\n```CSS\n@media (max-width: 599px) {\n   font-size: 1rem;\n}\n```\n\nWe now have the ability to easily insert our media queries wherever we like throughout our projects!\n\nAdditionally, we won’t need to memorize our breakpoints, as we have them pre-defined. If we need to alter them, we can simply edit the mixins.\n\n## Another way to setup our mixins\n\nIf you want to take it a step further, you could use conditionals to setup your mixins.\n\nYou create just one `@mixin` block and set the parameters to be passed in — which we use to select our breakpoints, like so:\n\n```SASS\n@mixin for-size($size) {\n  @if $size == phone-only {\n    @media (max-width: 599px) { @content; }\n  } @else if $size == tablet-portrait-up {\n    @media (min-width: 600px) { @content; }\n  } @else if $size == tablet-landscape-up {\n    @media (min-width: 900px) { @content; }\n  } @else if $size == desktop-up {\n    @media (min-width: 1200px) { @content; }\n  } @else if $size == big-desktop-up {\n    @media (min-width: 1800px) { @content; }\n  }\n}\n```\n\nThen, to use our mixins in this manner, we’d select it like so:\n\n```SASS\n.header-title {  \n   font-size: 2rem;  \n \n   @include for-size(phone-only) {    \n      font-size: 1rem; \n   }\n}\n```\n\nIt’s that simple!\n\nWriting media queries doesn’t need to be a headache, and by using SASS mixins, we have one centralized location in which to manage our media queries.\n\nHandling the responsivity of our projects just got a whole lot easier!\n\n## Related Posts:\n\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)\n* [Setting up SASS](https://www.easeout.co/blog/2020-07-09-setting-up-sass)\n* [Using SASS Variables](https://www.easeout.co/blog/2020-07-14-using-sass-variables)",
  "title": "Setup Media Queries with SASS Mixins",
  "description": "Learn how to use Media Queries with SASS Mixins.",
  "short": "Learn how to use Media Queries with SASS Mixins.",
  "category": "SASS",
  "thumbnail": "/images/uploads/sass-media-queries-min.png"
}