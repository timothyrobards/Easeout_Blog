{
  "date": "Monday November 23rd, 2020",
  "dateshort": "November 23rd",
  "body": "In this article, we’ll look at some of the common ways to work with JavaScript strings! \n\nThis follows on from my previous post: [The Basics of JavaScript Strings](https://www.easeout.co/blog/2020-11-16-the-basics-of-javascript-strings), be sure to check it out if you haven't already! \n\n## The Anatomy of a String\n\nEach character in a string is numbered, starting at `0`. For example:\n\n```javascript\n\"This is my string!\"   \n```\n\nThe first character is `T` at index position `0`.\n\nThe last character is `!` at index position `17`.\n\nThe spaces also have index positions at `4`, `7` and `10`.\n\nWe can access any character like so:\n\n```javascript\n\"This is my string![8]\"     // m\n```\n\n### charAt()\n\nWe can similarly use the `charAt()` method. It returns the character at the specified index in a string, such as:\n\n```javascript\n\"This is my string!.charAt(8)\"     // m\n```\n\n### indexOf()\n\nWe can use `indexOf()` if we wish to return an index number.\n\nIt returns the index of where the substring starts in the string, or `-1` if the substring isn’t found. It’s case-sensitive.\n\n```javascript\nconst str = \"This is my string!\";\r\n\nstr.indexOf('s');       // returns 3 (the first 's' instance)\r\n\nstr.indexOf('my');      // returns 8\r\n\nstr.indexOf('My');      // returns -1\r\n\nstr.lastIndexOf('s');   // returns 11 (the last instance)\n```\n\nYou can use a conditional to test if a substring exists:\n\n```javascript\nif (str.indexOf('my') > -1) {\r\n\tconsole.log('Success! It contains the string');\r\n}\n```\n\nThis works as we know that `-1` results when nothing is found, so logically any result greater than `-1` would mean the substring exists.\n\n### slice()\n\nTo get a portion of a string starting (and *optionally* ending) at a particular character, we can use `slice()`.\n\nThis method can take 2 arguments. The first is the start position (`0` is of course the first character), and the second *optional* argument is the end position. If either argument is a negative number, it will start at the end of the string and work backward.\n\n```javascript\nconst str = \"This is my string!\";\r\n\nstr.slice(5);         // \"is my string!\"\r\nstr.slice(5, 10);     // \"is my\"\r\nstr.slice(0, -8);     // \"This is my\"\n```\n\n### Finding the Length of a String\n\nTo find the length of a string we can use the `length` property. It returns the number of characters in a string.\n\n```javascript\n\"This is my string!\".length;     //18\n```\n\nThe `length` property returns the actual number of characters starting with `1`, which in our example is `18`, not the final index number, which starts at `0` and ends at `17`.\n\n### Converting to Upper or Lower Case\n\nThe two methods `toUpperCase()` and `toLowerCase()` are useful ways to format our text.\n\n`toUpperCase()`converts all text in a string to uppercase.\n\n```javascript\nconst str = \"This is my string!\";\r\nconst upper = str.toUpperCase();\r\nconsole.log(upper);\r\n\n// \"THIS IS MY STRING!\"\n```\n\n`toLowerCase()`converts all text in a string to lowercase.\n\n```javascript\nconst str = \"This is my string!\";\r\nconst lower = str.toLowerCase();\r\nconsole.log(lower);\r\n\n// \"this is my string!\"\n```\n\n### split()\n\nTo divide a string up into sections & insert the contents into an array, we can use the `split()` method.\n\nThe argument we provide is the `delimiter`, the character that we’re using to split up our string.\n\nIn the below example, let's use the whitespace `“ “` character as our delimiter:\n\n```javascript\nconst str = \"This is my string!\";\r\nconst splitString = str.split(\" \");\r\n\nconsole.log(splitString);\r\n\n// [\"This\", \"is\", \"my\", \"string!\"]\n```\n\nWe can now access each section via its array position..\n\n```javascript\nsplitSting[0];    // This\r\nsplitSting[1];    // is\r\nsplitSting[2];    // my\r\nsplitSting[3];    // string!\n```\n\nWe can also optionally provide a second argument to stop splitting a string, after a certain number of delimiter matches have been found.\n\nLet's look at another example, this time using a comma `‘, ‘` as our delimiter.\n\n```javascript\nconst shoppingList = 'Bananas, green apples, chocolate, cat food';\r\nconst foodItems = shoppingList.split(', ');\r\nconsole.log(foodItems);\r\n\n// [\"Bananas\", \"green apples\", \"chocolate\", \"cat food\"]\r\n\nconst snacks = shoppingList.split(', ', 2);\r\nconsole.log(snacks)\r\n\n// [\"Bananas\", \"green apples\"]\n```\n\nOur `.split(', ', 2)` stopped the split after the second comma, returning just the first two array entries.\n\n### trim()\n\nThe `trim()` method removes any white space from both ends of a string, but importantly not anywhere in between.\n\n```javascript\nconst ahhhhWhitespace = \"     This is my string!     \";\r\n\nconst trimmed = ahhhhWhitespace.trim();\r\n\nconsole.log(trimmed);\r\n\n// \"This is my string!\"\n```\n\nWhitespace can be tabs or spaces, the `trim()` method conveniently removes any excess.\n\n### replace()\n\nIf we wish to search through a string for a value, and replace it with a new value, we use `replace()`.\n\nThe first parameter will be the value to find, and the second will be the replacement value.\n\n```javascript\nconst str = \"This is my string!\";\r\n\nconst newString = str.replace(\"my\", \"your\");\r\n\nconsole.log(newString);\r\n\n// This is your string!\n```\n\nBy default, the `replace()` method replaces the first match only. To replace **all matches**, you’ll need to pass in a regular expression using the global flag `g`. If we also want to ignore case, we’d add the case insensitive flag `i`.\n\n```javascript\nconst str = \"GOOGLE is my homepage. But I don't use Google Chrome.\"\r\n\nconst newString = str.replace(/google/gi, \"Google\");\r\n\nconsole.log(newString);\r\n\n// Google is my homepage. But I don't use Google Chrome.\n```\n\nHere we’re telling **every** instance of google within our string (regardless of case), to be replaced by “Google”.\n\n## Converting Strings into Numbers\n\nIn this final section, let's take a quick look at some of the ways we can convert strings into numbers.\n\n### parseInt()\n\nTo convert a string into an integer (a whole number) we can use `parseInt()`. It takes two arguments, the first being the value we want to convert, and the second is called the *radix.* This is the base number used in mathematical systems. For our use, it should always be `10`, the decimal system.\n\n```javascript\nparseInt('64', 10);     // 64\r\n\nparseInt('64.9', 10);   // 64\r\n\nparseInt('64px', 10);   // 64\n```\n\n### parseFloat()\n\nIf we wish to convert into a floating-point number (a number with decimal points), we’d use `parseFloat()`.\n\n```javascript\nparseFloat('64.9');             // 64.9\r\n\nparseFloat('64bit');            // 64\r\n\nconsole.log(parseFloat('64'));  // 64\n```\n\n### Number()\n\nWe can convert our strings with the `Number()` method as well, however, it's stricter about which values it can convert. It only works with strings that consist of numbers.\n\n```javascript\nNumber('64');      // 64\r\n\nNumber('64.9');    // 64.9\r\n\nNumber('64bit');   // NaN\r\n\nNumber('64%');     // NaN\n```\n\n`NaN` if you recall — stands for Not a number.\n\n## Related Posts:\n\n* [The Basics of JavaScript Strings](https://www.easeout.co/blog/2020-11-16-the-basics-of-javascript-strings)\n* [JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)",
  "title": "Working with Strings in JavaScript",
  "description": "Learn how to work with JavaScript strings.",
  "short": "Learn how to work with JavaScript strings.",
  "category": "JavaScript"
}