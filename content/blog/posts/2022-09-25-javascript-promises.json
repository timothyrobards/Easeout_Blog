{
  "date": "Sunday September 25th, 2022",
  "dateshort": "September 25th",
  "body": "**Promises** are used in JavaScript to handle asynchronous operations. They essentially represent an operation that hasn’t completed yet — hence the name of ‘promise’.\n\nThey simplify the process of dealing with multiple asynchronous operations, and reduce the likelihood of “callback hell” which often leads to messy and unmanageable code.\n\n**Why use promises?**\n\n* A better way to handle asynchronous operations\n* Improved error handling\n* And, they make for much cleaner code!\n\nLet’s take a look at how they work..\n\nSo a **promise** can be thought of as a placeholder for (an unknown) value that’s expected whenever a promise is created. They allow you to associate *event handlers* with an asynchronous action's eventual success or failure.\n\nThis means that asynchronous methods return values in the same manner as synchronous methods — instead of immediately returning a final value, they return a *promise* to provide the value at some point in the future.\n\nA promise can be in one of these states:\n\n* *Pending*: the initial state, when the operation hasn’t fulfilled or rejected\n* *Fulfilled*: the operation has successfully completed\n* *Rejected*: the operation has failed\n* *Settled:* the operation has either fulfilled or rejected\n\nLet’s see how to create a promise:\n\n```\nlet completed = true;\nlet promise = new Promise(function(resolve, reject) {\n  // perform an action\n  if (completed) {\n    resolve(\"It worked!\");\n  }\n  else {\n    reject(Error(\"It didn't work..\"));\n  }\n});\n```\n\nWe can see that the promise constructor takes one argument, a callback with two parameters, `resolve` and `reject`. Within the callback you perform your desired action (such as an ‘async’ operation), if it’s successful, call `resolve`, if not call `reject`.\n\nNote that in this example we reject with an `Error` object. It’s not mandatory, but beneficial for certain debugging tools, as they capture a stack trace.\n\nSo how do we use this promise?\n\n```\npromise.then(function(result) {\n  console.log(result); // \"It worked!\"\n}, function(err) {\n  console.log(err); // Error: \"It didn't work..\"\n});\n```\n\nWe can see `then()`takes two arguments, a callback for “success”, and a callback for a “failure”. Both are entirely optional, you’re free to just add a callback for either success or failure if you wish.\n\n# To summarise\n\nA promise is an object that returns a future value. It begins in the *pending* state and proceeds to either the *fulfilled* state or *rejected* state, before being considered *settled*.",
  "title": "JavaScript Promises",
  "description": "What are JavaScript promises?",
  "short": "What are JavaScript promises?",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-promises.png"
}