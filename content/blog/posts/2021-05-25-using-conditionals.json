{
  "date": "Tuesday May 25th, 2021",
  "dateshort": "May 25th",
  "body": "When we want to introduce logic & make decisions in our programs, we use **conditionals**. With conditionals, we can control the behavior of our code — by determining whether or not pieces of code can run.\n\nFor example, when using a weather app, if the weather is sunny we could see a sun image, or if it's raining we could see a rain-cloud image. Let’s now take a look at how we can implement conditionals in our code...\n\n## if/else Statements\n\nThe most common type of conditional statements are `if` and `else` statements. The syntax looks like so:\n\n```\nif (condition) {\r\n  run this code if the condition is true\r\n} else {\r\n  run this code instead\r\n}\n```\n\nWe use `if` followed by a set of parentheses that contain our **condition**. The condition will make use of comparison operators to test whether our condition evaluates to `true` or `false`, and it’ll return the result.\n\nIf the result is `true`, the code in the following set of curly braces will execute. The code in this section can be whatever we like.\n\nIf the result is `false`, the code contained within the curly braces following our `else` statement will execute instead.\n\nLet’s take a look at an example:\n\n```\nif (hour < 12) {\r\n  notify = \"It is AM\";\r\n} else {\r\n  notify = \"It is PM\";\r\n}\n```\n\nIn our above code, our `notify` variable will be set to *“It is AM”* if the `hour` is less than 12. Otherwise `hour` is greater than 12 and will be set to *“It is PM”*.\n\n## else if\n\nOf course, we will often have more than two choices to work with! To consider these additional choices we use `else if`. We put additional blocks in between our `if () {}` and `else {}` statements. Let's adjust our previous example to see this in action:\n\n```\nif (hour < 12) {\r\n  notify = \"It is Morning\";\r\n} else if (hour < 19){\r\n  notify = \"It is Afternoon\";\r\n} else {\r\n  notify = \"It is Evening\";\r\n}\n```\n\n## Comparison operators\n\nTo test the conditions inside our conditional statements, we use **comparison operators**. These operators are as follows:\n\n* `===` and `!==` — to test if one value is equal to, or not equal to, the other.\n* `<` and `>` — to test if one value is less than or greater than the other.\n* `<=` and `>=` — to test if one value is less than or equal to, or greater than or equal to, the other.\n\nA very common pattern when doing comparisons in conditional statements is to test Booleans (`true` and `false`). Any value that is not `false`, `undefined`, `null`, `0`, `NaN`, or an empty string (`''`) will in fact return `true` when tested as a conditional statement. This means you can easily use a variable name on its own to test whether it is `true`, or even that it exists at all (i.e. it is not undefined.) For example:\n\n```\nlet snack = 'Cheetos';\n\n\r\nif (snack) {\r\n  console.log('I have Cheetos!');\r\n} else {\r\n  console.log('No Cheetos this time..');\r\n}\n```\n\n## Nesting if/else\n\nThere will be times when you’ll want to nest an `if/else` statement inside of another one — and it's fine to do so! Let’s see an example:\n\n```\nif (snack === 'Cheetos') {\r\n  if (hungerLevel > 5) {\r\n    console.log('My hunger level is' + hungerLevel + ' and I have Cheetos. So I will eat them!');\r\n  } else if (hungerLevel <= 5) {\r\n    console.log('My hunger level is' + hungerLevel + ' and even though I have Cheetos. I\\'m not that hungry so I won\\'t eat them yet!');\r\n  }\r\n}\n```\n\n## Logical operators: AND, OR, and NOT\n\nWe can also test multiple conditions without needing to write nested `if/else` statements, we do this with logical operators:\n\n**AND:** `&&`- lets you chain together two or more expressions. Every expression must evaluate to `true` for the whole expression to return `true`.\n\nLet's rewrite our previous example using AND:\n\n```\nif (snack === 'Cheetos' && hungerLevel > 5) {\r\n  console.log('My hunger level is' + hungerLevel + ' and I have Cheetos. So I will eat them!');\r\n} else if (snack === 'Cheetos' && hungerLevel <= 5) {\r\n  console.log('My hunger level is' + hungerLevel + ' and even though I have Cheetos. I\\'m not that hungry so I won\\'t eat them yet!');\r\n}\n```\n\nThe first code block will only run if `snack === 'Cheetos'` *and* `hungerLevel < 5 `return `true`.\n\n**OR:**`||`- also lets you chain together two or more expressions. One or more of them have to evaluate to `true` for the whole expression to return `true`.\n\nLet’s see an example using OR:\n\n```\nif (trafficLightIsGreen || carStatus === 'working') {\r\n  console.log('You should commence driving.');\r\n} else {\r\n  console.log('Might be an issue.');\r\n}\n```\n\n**NOT:** `!` - can be used to negate an expression. Let's combine it with OR in the above example:\n\n```\nif (!(trafficLightIsGreen || carStatus === 'working')){\r\n  console.log('You should commence driving.');\r\n} else {\r\n  console.log('Might be an issue.');\r\n}\n```\n\nIn this example, our OR statement returns `true`, however, the NOT operator will negate it - so that the overall expression now returns `false`.\n\nA common mistake when using the logical OR operator in conditional statements is to try to state the variable whose value you are checking once, and then give a list of values it could be to return true, separated by `||` (OR) operators. For example:\n\n```\nif (x === 10 || 20 || 30 || 40) {\r\n  // run this code\r\n}\n```\n\nIn this case, the condition inside `if(...)` will always evaluate to true since 20 (or any other non-zero value) always evaluates to true. This condition is actually saying \"if x equals 10, or 20 is true — which it always is\". This is logically not what we want! To make this work you've got to specify a complete test on either side of each OR operator:\n\n```\nif (x === 10 || x === 20 || x === 30 || x === 40) {\r\n  // run this code\r\n}\n```\n\n## switch statements\n\n`if/else` statements do a great job of enabling conditional code, but they are not always the best way to handle every scenario. They are mainly useful when you've got a couple of options, and each one requires a reasonable amount of code to be run. They’re also useful when the conditions are complex (e.g. multiple logical operators).\n\nFor cases where you just want to set a variable to a certain choice of value or print out a particular statement depending on a condition, the syntax can be a bit inefficient, especially if you've got a large number of choices.\n\nThis is when we should consider using a `switch` statement! — they take a single expression/value as an input and then look through a number of choices until they find one that matches that value, executing the corresponding code that goes along with it. Let’s see an example:\n\n```\nswitch (new Date().getDay()) {\r\n  case 0:\r\n    day = \"Sunday\";\r\n    break;\r\n  case 1:\r\n    day = \"Monday\";\r\n    break;\r\n  case 2:\r\n    day = \"Tuesday\";\r\n    break;\r\n  case 3:\r\n    day = \"Wednesday\";\r\n    break;\r\n  case 4:\r\n    day = \"Thursday\";\r\n    break;\r\n  case 5:\r\n    day = \"Friday\";\r\n    break;\r\n  case 6:\r\n    day = \"Saturday\";\r\n}\n```\n\nWe use the keyword `switch`, followed by a set of parentheses that contains our expression. This is followed by the keyword `case`, followed by a choice that the expression/value could be, followed by a colon. We then include some code to run if the choice matches the expression. And finally a `break` statement.\n\nIf the previous choice matches the expression/value, the browser stops executing the code block here and moves on to any code that appears below the switch statement. We can include as many other cases as we need!\n\n## Ternary operator\n\nIn this final section of the article, let's take a look at the **ternary operator**. It’s a small piece of syntax that tests a condition and returns one value/expression if it’s `true`, and another if it's `false` — this can be useful in some situations and takes up a lot less code than an `if/else` block. The pseudocode looks like this:\n\n```\n( condition ) ? run this code : run this code instead\n```\n\nSo let’s look at a simple example:\n\n```\nlet age = 25;\r\nlet beverage = (age >= 18) ? \"Beer\" : \"Apple Juice\";\r\nconsole.log(beverage); // \"Beer\"\n```\n\nIf `age` is `true`, the customer can buy a beer, if not, all we have to sell them is apple juice.\n\n## Conclusion\n\nAnd that’s it! We’ve learned all about how we use conditionals to make decisions in our code. By using if, else and switch statements, combined with comparison, logical and ternary operators — we’re well equipped to introduce logic into our programs!\n\n### Related Posts:\n\n* [Understanding Variables, Scope and Hoisting](https://www.easeout.co/blog/2021-01-25-understanding-variables-scope-and-hoisting/)\n* [Working with Strings in JavaScript](easeout.co/blog/2020-11-23-working-with-strings-in-javascript/)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion/)",
  "title": "Using Conditionals",
  "description": "How to use conditionals (if, else, else if) in JavaScript.",
  "short": "How to use conditionals (if, else, else if) in JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-conditionals.png"
}