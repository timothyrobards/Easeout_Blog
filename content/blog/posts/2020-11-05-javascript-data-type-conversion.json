{
  "date": "Wednesday November 4th, 2020",
  "dateshort": "November 4th",
  "body": "## Converting Data Types\n\nAs we’ve seen in the previous article, data types are classifications of a particular type of data. And it’s the type that determines which operations are able to be performed on the data. As we write programs, we’ll often need to convert our data types in order to perform tasks.\n\nJavaScript is intelligent enough to convert *some* values for us, this is known as *type coercion*:\n\n```javascript\n\"15\" - \"5\"    // 10\n\"15\" / \"3\"    // 5\n```\n\nThe above will work as our strings evaluate to numbers. However,\n\n```javascript\n\"5\" + \"5\"   // 55\n```\n\nIf we’re using the `+` operator, the strings will concatenate! So if we attempted to rely on type coercion in this case, we’d see unexpected results.\n\nFor this reason, when writing our own code, we should endeavor to convert data types ourselves — thus reducing potential errors. \n\nLet's now take a look at how we can go about that!\n\n### Converting Values to Strings\n\nUsing the `String()` method, we can explicitly convert values to strings.\n\nFor example, let's take the *number* 100 and convert it to a *string literal* “100”.\n\n```javascript\nString(100);     // \"100\"\n```\n\nAnd let's convert a *Boolean* false into a *string literal* “false”.\n\n```javascript\nString(false);   // \"false\"\n```\n\nWithin a variable, we can convert our value to a string like so:\n\n```javascript\nlet name = 5000;       // 5000\nname = String(name);   // \"5000\"\n```\n\nWe can check the data type of any value, using `typeof`, for example:\n\n```javascript\ntypeof name;    // string\n```\n\nAlternatively, we could do this more concisely like so:\n\n```javascript\nlet name = 5000;\nname.toString();    // \"5000\"\n\n(5000).toString();  // also returns \"5000\"\n```\n\nRegardless of the method we choose, by using `String()` or `n.toString()`, we can explicitly convert our data into string values.\n\n### Converting Values to Numbers\n\nWhen the time comes to convert values into numbers, we use the `Number()` method in a similar manner:\n\n```javascript\nNumber(\"2000\");   // 2000\n```\n\nWe’ve turned our string “2000” into the number 2000.\n\nWe could also convert a Boolean:\n\n```javascript\nNumber(true);    // 1\nNumber(false);   // 0\n```\n\nIt should be noted however, that we cannot convert our data type into a number if there are any characters or spaces within the string! If this were to be attempted a `NaN` (not a number) would be returned.\n\n```javascript\nNumber(\"one\");      // NaN\nNumber(\"1,000\");    // NaN\nNumber(\"1 1\");      // NaN\nNumber(\"01-01-19\"); // NaN\n```\n\n### Converting Values to Booleans\n\nWe use `Boolean()` to convert strings and numbers into Boolean.\n\nIf **any** value is present, it will be converted to `true`:\n\n```javascript\nBoolean(100);     // true\nBoolean(\"name\");  // true\nBoolean(\" \");     // true, a space is considered a value\n```\n\nIf the value is considered empty (`0`, an `empty string (\"\")`, `undefined`, `NaN` or `null`), it will return false:\n\n```javascript\nBoolean(0);         // false\nBoolean(\"\");        // false, an empty string (with no space)\nBoolean(undefined); // false\nBoolean(NaN);       // false\nBoolean(null);      // false\n```\n\nConverting numbers and strings into Boolean values is a powerful way to start to introduce logic into our programming. For instance, we could detect a missed required field on an input form, if the Boolean returns false.\n\n## Wrapping up\n\nThat's all for today! \n\nIn this article, we looked at how we can work with data types, using both type coercion as well as by implicitly performing our own type conversions. \n\nIn the next one, we'll dive right into working with strings!\n\n## Related Posts:\n\n* [JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)\n* [JavaScript Syntax & Structure](https://www.easeout.co/blog/2020-10-19-javascript-syntax-structure)",
  "title": "JavaScript Data Type Conversion",
  "description": "How to convert data types in JavaScript.",
  "short": "How to convert data types in JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript_data_type_conversion.png"
}