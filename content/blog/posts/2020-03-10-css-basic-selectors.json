{
  "date": "Tuesday March 10th, 2020",
  "dateshort": "March 10th",
  "title": "CSS Basic Selectors",
  "short": "Learn how to use CSS Selectors to style HTML elements.",
  "category": "CSS",
  "description": "Learn how to use CSS Selectors to style HTML elements.",
  "body": "Selectors are used to target HTML elements that we want to style with CSS. By associating our declarations with one (or many!) elements in our HTML document.\n\nThe 4 basic selectors are `element`, `.class`, `#id` & `*` (universal).\n\n# Element selectors\n\nAn element selector will select an HTML element by name. \n\nTo begin, letâ€™s say we have a paragraph of text on our HTML page, like so:\n\n```html\n<p>My paragraph</p>\n```\n\nUsing CSS we can select the `p` element, and style it as we like. \n\nLetâ€™s say we want to give the text a red color.\n\nWeâ€™d do this by targeting the element using the `p` selector, with a simple CSS rule like so:\n\n```css\np {\n  color: red;\n}\n```\n\nNote that this rule will target *all* `p` tags on our page. So if we have multiple paragraphs theyâ€™d all be changed to red.\n\nWhen we want to style specific elements, we use **classes** & **idâ€™s**\n\n# Classes & IDâ€™s\n\nEvery HTML element can have `class` or `id` attributes applied. We use these attributes to target the element specifically.\n\nAnd as weâ€™ll see, class's and id's are both used in a similar manner, but thereâ€™s an important difference between the two:\n\n* The same `class` value is repeatable across many elements.\n* An `id` may only be used once.\n\nSo we use classes when we need to select an element with 2 or more specific class names.\n\nIn our CSS, we prefix with the period `.` symbol to denote a `class`, and for `id`â€™s we use the hash `#` symbol.\n\nLetâ€™s see an example of a `class` selector:\n\n```css\n<p class=\"city\">  \n  London  \n</p>  \n\n.city {  \n  color: red;  \n}  \n```\n\nAnd an example using an`id`:\n\n```css\n<p id=\"city\">\n  London\n</p>\n\n#city {\n  color: red;\n}\n```\n\nThe end result here is the same, our \"London\" text becomes red. \n\nThe thing to remember is that `id` selectors are rigid and don't allow for reuse. A general rule of thumb when considering using an `id`. Is to first try to use a tag name, one of the new HTML5 elements, or even a pseudo-class.\n\n# The Universal Selector\n\nAn asterisk `*` symbol will select *all* elements. The following will set the `background-color` of all elements on the page:\n\n```css\n* {\n    background-color: yellow;\n}\n```\n\nThis could also style all elements inside a `<div>`, like so:\n\n```css\ndiv * {\n    background-color: yellow;\n}\n```\n\nYouâ€™ll often see the use of universal selectors as a trick to clear any default browser margins & padding:\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n```\n\nThis isn't considered good practice in production code, as it adds unnecessary weight.\n\n# Connecting selectors\n\nSo weâ€™ve seen how to use a `class` or an `id` to target a given HTML element for styling with CSS.\n\nLetâ€™s take a look at how we can connect multiple selectors, for even more specific styling!\n\n## Targeting a specific element with a class or id\n\nAs we've seen, we can select *all* elements with a specific `class` or `id` name and apply our style rules accordingly. \n\nYou can in fact, target a *specific* element that has a given `class` or `id`. \n\nFor this we use the element followed by `.` or `#` (to denote `class` or `id`), followed by the `class` or `id` name.\n\nUsing a `class` :\n\n```html\n<p class=\"city\">\n  London\n</p>\n\np.city {\n  color: red;\n}\n```\n\nUsing an `id` :\n\n```html\n<p id=\"city\">\n  London\n</p>\n\np#city {\n  color: red;\n}\n```\n\n## Targeting multiple classes\n\nAs weâ€™ve now seen, we can select an element with a specific class using `.` followed by the class name. But itâ€™s often the case that an element will have 2 (or more) classes. \n\nWe select such elements, by combining the class names separated with a dot, without spaces.\n\nFor example:\n\n```html\n<p class=\"city london\">\n  London\n</p>\n\n.city.london {\n  color: red;\n}\n```\n\n## Targeting with combined classes and ids\n\nUsing the same method, you can select elements by combining a `class` and an `id`.\n\nFor example:\n\n```html\n<p class=\"city\" id=\"london\">\n  London\n</p>\n\n.city#london {\n  color: red;\n}\n```\n\n## Grouping selectors\n\nWe can also combine selectors to apply the same declarations to multiple selectors. \n\nWe do this by separating with a comma.\n\nFor example:\n\n```html\n<p>\n  The city I live in is:\n</p>\n\n<span class=\"city\">\n  London\n</span>\n\np, .city {\n  color: red;\n}\n```\n\nSo here weâ€™re grouping both `p` and `span` elements together.\n\nFor increased readability in our CSS, we could format our declarations like so:\n\n```css\np,\n.city {\n  color: red;\n}\n```\n\n# Using the document hierarchy\n\nWe can get even more specific, by selecting elements according to how they sit in the [document hierarchy](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure).\n\nItâ€™s quite common to have a `span` tag nested inside of a `p` tag. We could choose to target *just the nested* `span`, without applying the style to any `span` tags that are not nested in a `p` tag:\n\n```html\n<span>\n  Greetings!\n</span>\n\n<p>\n  The city I live in is:\n  <span class=\"city\">\n    London\n  </span>\n</p>\n\np span {\n  color: red;\n}\n```\n\nNote: the space is necessary between the two elements `p` and `span`!\n\nThis selection will work regardless of how deeply our span is nested. As itâ€™s selecting any `span` with a parent `p` element.\n\nIf we wish to ensure that itâ€™s only selecting at the first level of nesting. We could use the `>` symbol, like so:\n\n```css\np > span {\n  color: red;\n}\n```\n\nSo in this case, if a `span` is not the first child of the `p` element, itâ€™s not going to have the styling applied.\n\nOnly direct children will have the style applied:\n\n```css\n<p>\n  <span>\n    This is red\n  </span>\n\n  <strong>\n    <span>\n      This is not red\n    </span>\n  </strong>\n</p>\n```\n\nWe can also select adjacent siblings, that is an element only if itâ€™s preceded by a specific element. \n\nWe do so using the `+` operator:\n\nFor example:\n\n```css\np + span {\n  color: red;\n}\n```\n\nThis will assign the color red to all span elements that are **immediately** preceded by a `p` element:\n\n```html\n<p>My paragraph</p>\n<span>My first span</span>    // ONLY this span will be red\n<span>My second span</span>\n```\n\nWe can also use the `~` operator, as a general sibling selector. This selects all preceding elements â€” not only the first as with `+` :\n\n```css\np ~ span {\n  color: red;\n}\n```\n\nResulting in:\n\n```html\n<p>My paragraph</p>\n<span>My first span</span>    // This span will be red\n<span>My second span</span>   // This span will also be red\n```\n\nAnd that's all for today!\n\nNext up weâ€™ll be looking at some more advanced selectors. Such as attribute selectors, pseudo-class selectors & pseudo-element selectors. Stay tuned! ðŸ˜Ž\n\n\n\n## Related Posts:\n\n* [The Cascade, Inheritance & Specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity)\n* [Attribute Selectors](https://www.easeout.co/blog/2020-03-26-attribute-selectors)\n* [Pseudo-Classes](https://www.easeout.co/blog/2020-03-31-css-pseudo-classes)\n* [Pseudo-Elements](https://www.easeout.co/blog/2020-04-06-css-pseudo-elements)",
  "thumbnail": "/images/uploads/css-basic-selectors-min.png"
}