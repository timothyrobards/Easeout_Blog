{
  "date": "Tuesday March 10th, 2020",
  "title": "CSS Basic Selectors",
  "category": "Code",
  "description": "An overview of the basic CSS Selectors",
  "body": "In this article, we’re going to learn about the basic CSS Selectors. We use selectors to target HTML elements that we want to style with CSS. By associating one (or many) CSS declarations to one (or many) elements on the page.\n\nThe 4 basic selectors are `element`, `.class`, `#id`& `*`.\n\n> **Are you ready to take your CSS skills to the next level?** Get started now with my new course at Educative.io [SASS for CSS: Advanced Frontend Development](https://www.educative.io/courses/sass-for-css?aff=KNqG). Get up-to-date on all the features you need to advance your front end development skills!\n\n# Element selectors\n\nAn element selector will select an HTML element by name. To begin, let’s say we have a paragraph of text on our HTML page:\n\n```html\n<p>My paragraph</p>\n```\n\nUsing CSS we can select this `p` element, and style it however we like. Let’s say we want to give the text a red color.\n\nWe’d do this by targeting the element using the `p` selector, a simple CSS rule to achieve this would be:\n\n```css\np {\\\n  color: red;\\\n}\n```\n\nNote that this rule will target **all** `p` tags on our page. So if we have multiple paragraphs they’d all change to red.\n\nWe can select specific paragraphs using *classes* & *id’s*, which we’ll take a look at now.\n\n# Classes & ID’s\n\nEvery HTML element has two attributes which we commonly use when associating our styling to a *specific* element, they are `class` and `id` .\n\nAnd as we’ll see, they are both used in a similar manner, however, there’s a fundamental difference between the two:\n\n* Within an HTML document, the same `class` value can be repeated across multiple elements.\n* Whereas an `id` can only be used once.\n\nSo we use classes when we need to select an element with 2 or more specific class names.\n\nIn our CSS, we prefix with the period (`.`) symbol to denote a **class**, and for **id**’s we use the hash (`#`) symbol.\n\nLet’s see an example using a `class` selector:\n\n```css\n<p class=\"city\">  \n  London  \n</p>  \n\n.city {  \n  color: red;  \n}  \n```\n\nAnd an example using an`id`:\n\n```css\n<p id=\"city\">\n  London\n</p>\n\n#city {\n  color: red;\n}\n```\n\nIt’s worth remembering that `id` selectors are rigid and don't allow for reuse. If possible, first try to use a tag name, one of the new HTML5 elements, or even a pseudo-class.\n\n# The Universal Selector\n\nAn asterisk `*` symbol will select all elements. The following will set the `background-color` of all elements on the page:\n\n```css\n* {\n    background-color: yellow;\n}\n```\n\nThis could also be used to style all elements inside a `<div>`, like so:\n\n```css\ndiv * {\n    background-color: yellow;\n}\n```\n\nYou’ll often see the use of universal selectors as a trick to clear any default browser margins & padding:\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n```\n\nHowever, in production code, this adds unnecessary weight and isn’t recommended.\n\n# Connecting multiple selectors\n\nSo we’ve seen how to use a `class` or an `id` to target a given HTML element for styling with CSS.\n\nLet’s take a look at how we can connect multiple selectors, for even more specific styling!\n\n## Targeting a specific element with a class or id\n\nIn our previous example, we first selected **all** elements that had the *city* `class` and then **all** elements that had the *city* `id`.\n\nYou can in fact, target a **specific** element that has a given `class` or `id`, for this we use the element followed by `.` or `#` (to denote `class` or `id`), followed by the `class` or `id` name.\n\nUsing a `class` :\n\n```html\n<p class=\"city\">\n  London\n</p>\n\np.city {\n  color: red;\n}\n```\n\nUsing an `id` :\n\n```html\n<p id=\"city\">\n  London\n</p>\n\np#city {\n  color: red;\n}\n```\n\n## Targeting multiple classes\n\nAs we’ve now seen, you can select an element with a specific class using `.` followed by the class name. However, it’s often the case that an element will have 2 (or more) classes. We can select such elements, by combining the class names separated with a dot, without spaces.\n\nFor example:\n\n```html\n<p class=\"city london\">\n  London\n</p>\n\n.city.london {\n  color: red;\n}\n```\n\n## Targeting with combined classes and ids\n\nUsing the same method, you can select elements by combining a `class` and an `id`.\n\nFor example:\n\n```html\n<p class=\"city\" id=\"london\">\n  London\n</p>\n\n.city#london {\n  color: red;\n}\n```\n\n## Grouping multiple selectors\n\nWe can also combine selectors to apply the same declarations to multiple selectors. We do this by separating with a comma.\n\nFor example:\n\n```html\n<p>\n  The city I live in is:\n</p>\n\n<span class=\"city\">\n  London\n</span>\n\np, .city {\n  color: red;\n}\n```\n\nSo here we’re grouping both `p` and `span` elements together.\n\nFor increased readability in our CSS, we could optionally format our declarations like so:\n\n```css\np,\n.city {\n  color: red;\n}\n```\n\n# Using the document hierarchy\n\nWe can create even more specific selections, by combining multiple items in accordance with the [document hierarchy](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure).\n\nIt’s quite common to have a `span` tag nested inside of a `p` tag. We could choose to target **only the nested** `span` , without applying the style to any `span` tags that are not nested in a `p` tag:\n\n```html\n<span>\n  Greetings!\n</span>\n\n<p>\n  The city I live in is:\n  <span class=\"city\">\n    London\n  </span>\n</p>\n\np span {\n  color: red;\n}\n```\n\nThe space is needed between the two elements `p` and `span`.\n\nThis selection will work regardless of how deeply our span is nested. As it’s simply selecting any `span` with a parent `p` element.\n\nIf we wish to ensure that it’s only selecting at the first level of nesting. We could use the `>` symbol, like so:\n\n```css\np > span {\n  color: red;\n}\n```\n\nSo in this case, if a `span` is not the first child of the `p` element, it’s not going to have the styling applied.\n\nAnd only direct children will have the style applied:\n\n```css\n<p>\n  <span>\n    This is red\n  </span>\n  <strong>\n    <span>\n      This is not red\n    </span>\n  </strong>\n</p>\n```\n\nWe can also select adjacent siblings, which is an element only if it’s preceded by a specific element. We do so using the `+` operator:\n\nFor example:\n\n```css\np + span {\n  color: red;\n}\n```\n\nThis will assign the color red to all span elements that are **immediately** preceded by a `p` element:\n\n```html\n<p>My paragraph</p>\n<span>My first span</span>    // ONLY this span will be red\n<span>My second span</span>\n```\n\nWe can also use the `~` operator, when working with sibling selections. We would use this as a general sibling selector, which selects all preceding elements — not just the first as with `+` :\n\n```css\np ~ span {\n  color: red;\n}\n```\n\nResulting in:\n\n```html\n<p>My paragraph</p>\n<span>My first span</span>    // This span will be red\n<span>My second span</span>   // This span will also be red\n```\n\nIn future articles, we’ll be looking at more advanced selectors such as attribute selectors, pseudo-class selectors & pseudo-element selectors. So stay tuned.\n\n> If you’re ready to advance your CSS skills, check out my new course [SASS for CSS: Advanced Frontend Development](https://www.educative.io/courses/sass-for-css?aff=KNqG). This interactive, beginner-friendly course walks you through all you need-to-know to level up your front end development skills!"
}