{
  "date": "Monday February 14th, 2022",
  "dateshort": "February 14th",
  "body": "In this article, we’ll be taking a look at some highly useful array and object methods. The eloquence of these methods will help us to write very clean and readable code — as we go about manipulating our arrays & objects.\n\n## Object.assign()\n\nThis method gives us the ability to combine objects together.\n\n***Example:***\n\nCombine two separate objects into one:\n\n```\nconst objectOne = {\r\n  firstName: 'Santa'\r\n}\n\n\r\nconst objectTwo = {\r\n  lastName: 'Claus'\r\n}\n\n\r\nconst objectCombined = Object.assign(objectOne, objectTwo);\r\n// objectCombined is: { firstName: 'Santa', lastName: 'Claus' }\n```\n\n*Note:* You could also use the object spread syntax — which we’ll look at later in this article!\n\n## Object.create()\n\nThis method will create a new object, using an existing object as the prototype of the newly created object.\n\n***Example:***\n\n```\nlet newObject = Object.create(obj);\n\n\r\nconsole.log(newObject);  \r\n//{}\n\n\r\nnewObject.name = “William”;\n\n\r\nconsole.log(newObject.speak());\n\n\r\n// My Name is William and this is year 2019\n```\n\nIn our example, ***obj*** is the prototype from which ***newObject*** is created. So via inheritance, it can use the properties of our prototype. This is why we can use the ***speak()*** method without declaring it in ***newObject***.\n\n## Object.entries()\n\nHere we can create an array containing arrays of key/value pairs of an object. Essentially, it converts objects into arrays of arrays.\n\n***Example:***\n\n```\nlet person = {\r\n  name:”William”,\r\n  age:30\r\n}\n\n\r\nlet entries = Object.entries(person);\n\n\r\nconsole.log(entries);\n\n\r\n//[ [ 'name', 'William' ], [ 'age', 30 ] ]\n```\n\n## Object.keys()\n\nThis method returns an array of the ***keys*** (or property labels) of a given object.\n\n***Example:***\n\n```\nconst seasonalColors = {\r\n  winter: 'blue',\r\n  spring: 'green',\r\n  summer: 'yellow',\r\n  fall: 'brown'\r\n}\n\n\r\nconst types = Object.keys(seasonalColors);\n\n\r\n// 'types' is equal to [\"winter\", \"spring\", \"summer\", \"fall\"]\n```\n\n## Object.values()\n\nThis method returns an array of the ***values*** of a given object.\n\n***Example:***\n\n```\nconst seasonalColors = {\r\n  winter: 'blue',\r\n  spring: 'green',\r\n  summer: 'yellow',\r\n  fall: 'brown'\r\n}\n\n\r\nconst colors = Object.values(seasonalColors);\n\n\r\n// 'colors' are equal to [\"blue\", \"green\", \"yellow\", \"brown\"]\n```\n\n## Object.freeze()\n\nYou can use this method to prevent the modification of existing object properties, or of adding new properties and values to an object. Essentially the function **freezes** the object from any further changes (key or values).\n\n***Example:***\n\nFreeze an object to prevent the `name` property from being changed.\n\n```\nconst frozenObject = {\r\n  name: 'Batman'\r\n}\n\n\r\nObject.freeze(frozenObject);\n\n\r\nfrozenObject.name = 'Superman';\n\n\r\n// frozenObject will remain equal to { name: 'Batman' }\n```\n\n## Object.seal()\n\nThis method stops any new properties from being added to an object, but it’ll still allow for existing properties to be changed.\n\n***Example:***\n\nSeal an object to prevent the `isBetter` property from being added.\n\n```\nconst sealedObject = {\r\n  name: 'Batman'\r\n}\n\n\r\nObject.seal(sealedObject);\n\n\r\nsealedObject.name = 'Superman';\r\nsealedObject.isBetter = true;\n\n\r\n// sealedObject will be equal to { name: 'Superman' }\n```\n\n## .map()\n\nWith this method, we can create a new array by manipulating the values in another array. The new array is then returned.\n\n***Example:***\n\nCreate an array that will multiply each number by *10*:\n\n```\nlet arr = [1,2,3,4];\n\n\r\nlet multiply10 = arr.map((val, i, arr) => {\r\n  return val *10;\r\n});\n\n\r\nmultiply10 = [10,20,30,40]\n```\n\n*Note:* With **.map()** we just define what we want to happen & return it — no loops are required!\n\n## .filter()\n\nUsing this method we create a new array based on whether the items of an array pass a certain condition.\n\n***Example:***\n\nCreate an array of lucky numbers (numbers > 3):\n\n```\nconst allNumbers = [1, 2, 3, 4, 5, 6];\n\n\r\nconst luckyNumbers = allNumbers.filter( num => num > 3);\n\n\r\n// luckyNumbers will be equal to [4, 5, 6]\n```\n\n## .reduce()\n\nThis method will reduce all items in an array to a single value. It’s quite useful for calculating totals. And the returned value can be of any type (object, array, string, number).\n\n***Example:***\n\nAdd up **all** the numbers in an array:\n\n```\nconst numbers = [10, 20, 20];\n\n\r\nconst total = numbers.reduce( (accumulator, currentValue) => accumulator + currentValue);\n\n\r\n// total will be equal to 50\n```\n\n## .forEach()\n\nUsing this method we can apply a function to each item in a given array.\n\n***Example:***\n\n```\nconst poets = ['Ginsberg', 'Plath', 'Yeats'];\n\n\r\npoets.forEach( poet => console.log(poet) );\n\n\r\n// 'Ginsberg'\r\n// 'Plath'\r\n// 'Yeats'\n```\n\n## .some()\n\nThis method checks if **any** item in an array passes a given condition. A good use case would be checking for user privileges.\n\n***Example:***\n\nCheck if there is at least one `'teacher'` in an array:\n\n```\nconst classReady = ['student', 'student', 'teacher', 'student'];\n\n\r\nconst containsTeacher = classReady.some( element => element === 'teacher');\n\n\r\n// containsTeacher will equal true\n```\n\n## .every()\n\nThis method is very similar to `.some()`, however, it will check if **all** items in an array pass a condition.\n\n***Example:***\n\nCheck if **all** ratings are equal to or greater than 3 stars.\n\n```\nconst ratings = [4, 5, 4, 3, 4];\n\n\r\nconst goodOverallRating = ratings.every( rating => rating >= 3 );\n\n\r\n// goodOverallRating will equal true\n```\n\n## .includes()\n\nUsing this method we can check if an array contains a certain value. It’s like`.some()`, however, instead of looking for a condition to pass, it’ll check for a specific value in the given array.\n\n***Example:***\n\nCheck if the array includes an item with the string `‘no’`.\n\n```\nconst respones = ['yes', 'maybe', 'no', 'yes'];\n\n\r\nconst includesNo = responses.includes('no');\n\n\r\n// includesNo will equal true\n\n```\n\n## Array.from()\n\nThis method creates an array based on another array or string. However, it’s far more common to use the `.map()` method.\n\n***Example:***\n\nCreate an array from a string:\n\n```\nconst newArray = Array.from('abcde');\n\n\r\n// newArray will equal ['a', 'b', 'c', 'd', 'e']\n```\n\nCreate an array that has double the value for each item in another array.\n\n```\nconst doubledValues = Array.from([2, 4, 6], number => number * 2);\n\n\r\n// doubleValues will equal [4, 8, 12]\n```\n\n## Array spread\n\nWe can spread arrays using the spread operator (…). This allows us to expand the elements in an array. It’s very useful when concatenating a number of arrays together.\n\n***Example:***\n\nCombine two given arrays.\n\n```\nconst arrayOne = [1, 2, 3];\r\nconst arrayTwo = [4, 5, 6];\n\n\r\nconst combinedArrays = [...arrayOne, ...arrayTwo];\n\n\r\n// combinedArrays is equal to [1, 2, 3, 4, 5, 6]\n```\n\nWe can also use spread with `.slice()` to remove an array element *without mutating the original array*:\n\n```\nconst companies = ['mercedes', 'boeing', 'starbucks', 'honda'];\n\n\r\nconst transport = [...companies.slice(0,2), ...companies.slice(3)];\n\n\r\n// transport will equal ['mercedes', 'boeing', 'honda']\n```\n\n## Object spread\n\nWe can spread an object to allow for the addition of new properties and values without mutations (a new object is created). It can also be used to combine multiple objects together.\n\n***Example:***\n\nAdd a new object property and value without mutating the original object:\n\n```\nconst originalObject = {\r\n  name: 'Jonathan',\r\n  city: 'Toronto'\r\n};\n\n\r\nconst newObject = {\r\n  ...originalObject,\r\n  occupation: 'Chef'\r\n}\n\n\r\n// newObject is equal to\r\n// { occupation: 'Chef', name: 'Jonathan', city: 'Toronto' }\n```\n\n## Wrapping up\n\nAnd there we go! We’ve looked at a number of array and object methods including: `.assign()`, `.create()`, `.entries()`, `.keys()`, `.values()`, .`freeze()`,` .seal()`, .`map()`, `.filter()`, `.reduce()`, `.forEach()`, `.some()`, `.every()`, `.includes()`, `.from(),` & Array/Object spread syntax. 😅\n\nMastering these methods will greatly improve the readability of your code. As well as give you some great go-to techniques to have ready, as you go about manipulating arrays & objects!",
  "title": "Array & Object Methods",
  "description": "Learn how to use Array & Object methods in JavaScript.",
  "short": "Learn how to use Array & Object methods in JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-array-obj.png"
}