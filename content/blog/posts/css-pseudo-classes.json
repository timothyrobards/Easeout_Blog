{
  "date": "Tuesday March 31st, 2020",
  "dateshort": "March 31st",
  "title": "CSS Pseudo-Classes",
  "body": "In this tutorial, we’ll be learning about CSS Pseudo-classes!\n\nPseudo class selectors are predefined keywords used to define a state of an element, or to target a child element. We can see them in action when an element is followed by a colon. And you’ve likely seen them often, e.g.`hover`:\n\n```css\na:hover {   \n   /* Hover is a pseudo-class! */ \n}\n```\n\nThey are extremely useful in many cases!\n\n# Common Pseudo-class selectors\n\nWhat follows are the most common pseudo classes grouped into the following categories: State, Validation, Structural & Relational.\n\nLet’s take a look!\n\n## State pseudo-class selectors\n\nA state pseudo-class is used when the user is expected to complete particular actions. Such as clicking or hovering over a link.\n\n`:link`- Represents a link that has *not* yet been visited. It matches all unvisted `a` elements provided they have an `href` attribute.\n\n```css\na:link {\n  color: red;\n}\n```\n\nStyles defined by the `:link` pseudo-class will be overridden by any subsequent state pseudo-class (`:active`,`:hover`, or`:visited`). So it’s always best to put the `:link` rule before the rest.\n\n`:visited`- Selects links that have been visited by the current browser.\n\n```css\na:visited {\n    color: blue;\n}\n```\n\n`:hover`- Whenever the users’ mouse cursor rolls over a link, that link is in it's hover state. We can apply styles to this state with the `:hover` pseudo-class.\n\nIn the below example, `a` elements will change to orange when hovered:\n\n```css\na:hover {\n    color: orange;\n}\n```\n\n`:active`- Selects a link when it’s being activated. This could be when its clicked, tapped (on a touchscreen), or even when tabbed to (as in a nav item) on a keyboard.\n\n```css\na:active {\n    color: coral;\n}\n```\n\n## Validation pseudo-class selectors\n\nWe’ll likely be working with forms when using validation pseudo-classes. Let’s now take a look at these extremely handy selectors.\n\n`:focus`- Selects an element that has gained focus via a pointing device. This could be for links, for example:\n\n```css\na:focus {\n    color: green;\n}\n```\n\nOr for form inputs or textareas, like:\n\n```css\ninput:focus {\n    background: yellow;\n}\ntextarea:focus {\n    background: pink;\n}\n```\n\n`:target`- This pseudo-class is used with IDs, it matches when the hash tag in the current URL matches that ID. Its used for inner navigation, if you are at www.website.com/#projects, the selector #projects:target will match.\n\nWe could use this to create tabs on a page. Where the tabs link to hash tags whenever the panels \"activate\" by matching `:target` selectors.\n\n`:enabled`- Selects inputs that are enabled (the default state). Every form element is enabled by default — unless we add `:disabled`.\n\n`:disabled`- Selects a form element with the disabled state. In this state our element cannot be selected, checked, activated or given focus.\n\nFor example, here we’ve disabled the input for the `name` field in our HTML:\n\n```html\n<input type=\"text\" id=\"name\" disabled>\n```\n\nAnd indicated this by reducing the opacity of the element:\n\n```css\n:disabled {\n    opacity: .5;\n}\n```\n\n`:checked`- Selects checkboxes & radio buttons that have been checked or selected.\n\n`:required`- Selects input elements that have the `required` attribute.\n\nFor example:\n\n```html\n<input type=\"email\" required>\n```\n\nWe could style this element to indicate that the field is mandatory:\n\n```css\n:required {\n    color: black;\n    font-weight: bold;\n}\n```\n\n`:optional`- Selects inputs that do not have the `required` attribute.\n\n## Structural Pseudo Class Selectors\n\nStructural pseudo-classes select additional information in the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction), which cannot be targeted otherwise.\n\n`:root`- Selects the highest element in a document. Which is almost guaranteed to be the`<html>`element. Unless we’re using a different markup language, such as SVG or XML.\n\n```css\n:root {\n    background: coral;\n}\n```\n\nWe could’ve also used `html` as the selector, to set our background. However, `:root` has a higher specificity than an element selector — which could be useful in some scenarios.\n\n`:first-child`- Selects the first element within its parent.\n\nIn the following example, the first `li` element will be the only one with red text.\n\n**HTML:**\n\n```html\n<ul>\n    <li>This text will be red.</li>\n    <li>Lorem ipsum.</li>\n    <li>Lorem ipsum.</li>\n</ul>\n```\n\n**CSS:**\n\n```css\nli:first-child {\n    color: red;\n}\n```\n\n`:last-child`- Selects the last element within its parent.\n\nIn the following example, the last `li` element will be the only one with red text.\n\n**HTML:**\n\n```html\n<ul>\n    <li>Lorem ipsum.</li>\n    <li>Lorem ipsum.</li>\n    <li>This text will be red.</li>\n</ul>\n```\n\n**CSS:**\n\n```css\nli:last-child {\n    color: red;\n}\n```\n\n`:nth-child()`- Uses a simple formula to select elements depending on their order.\n\nAll `:nth` pseudo-classes take an argument, which is the formula that we type in parentheses. The formula may be a single integer, a formula structured as `an+b` or using the keyword `odd` or `even`.\n\nThe `an+b` formula:\n\n* the `a` is a number\n* the `n` is a literal `n`\n* the `+` is an operator (may also be set to a minus sign `-`)\n* the `b` is an optional number (only required if an operator is being used)\n\nLet’s work with list of elements, to show this in action!\n\nHTML:\n\n```html\n<ol>\n    <li>Pacific Ocean</li>\n    <li>Atlantic Ocean</li>\n    <li>Indian Ocean</li>\n    <li>Southern Ocean</li>\n    <li>Arctic Ocean</li>\n    <li>Philippine Sea</li>\n    <li>Coral Sea</li>\n    <li>Arabian Sea</li>\n    <li>South China Sea</li>\n</ol>\n```\n\n**CSS:**\n\nSelect the second child “Atlantic Ocean” & set *color* to yellow:\n\n```css\nol :nth-child(2) {\n    color: yellow;\n}\n```\n\nSelect every other child starting from the second. So, “Atlantic Ocean”, “Southern Ocean”, “Philippine Sea” and “Arabian Sea” will be purple:\n\n```css\nol :nth-child(2n) {\n    color: purple;\n}\n```\n\nSelects all even-numbered children:\n\n```css\nol :nth-child(even) {\n    color: yellow;\n}\n```\n\nSelects every other child, starting from the fifth. So, “Arctic Ocean,” “Coral Sea” and “South China Sea” will be purple:\n\n```css\nol :nth-child(2n+5) {\n    color: purple;\n}\n```\n\n`:nth-of-type()`- Works similarly to `:nth-child`, only used in places where the elements at the same level are of different types.\n\nSay for example you have a `<div>` containing a number of paragraphs and a number of images. If you want to select the odd images. `:nth-child` won't work, instead you'd use `div img:nth-of-type(odd)`.\n\n`:first-of-type`- Selects the first element of its type within the parent.\n\nFor example, the first `li` element and the first `span` element will styled with red text:\n\n**HTML:**\n\n```html\n<ul>\n    <li>This text will be red.</li>\n    <li>Lorem ipsum. <span>This text will be red.</span></li>\n    <li>Lorem ipsum.</li>\n</ul>\n```\n\n**CSS:**\n\n```css\nul :first-of-type {\n    color: red;\n}\n```\n\n`:last-of-type`- Same as above, only selecting the last element:\n\n**HTML:**\n\n```html\n<ul>\n    <li>Lorem ipsum. <span>Lorem ipsum.</span> <span>This text will be red.</span></li>\n    <li>Lorem ipsum.</li>\n    <li>This text will be red.</li>\n</ul>\n```\n\n**CSS:**\n\n```css\nul :last-of-type {\n    color: red;\n}\n```\n\n`:nth-last-of-type()`- Works like `:nth-of-type,` but it counts in reverse, up from the bottom instead of the top.\n\n`:nth-last-child()`- Works like `:nth-child`, but also counting in reverse.\n\n`:only-of-type`- Selects only if the element is the only one of its kind within its parent.\n\n## Relational pseudo-class selectors\n\n`:not()`- It accepts an argument inside the parentheses (which can be any selector). And selects all elements within the parent that are *not* represented by the argument.\n\nFor example:\n\n**HTML:**\n\n```html\n<ul>\n    <li class=\"first-item\">Lorem ipsum.</li>\n    <li>Lorem ipsum.</li>\n    <li>Lorem ipsum.</li>\n    <li>Lorem ipsum.</li>\n</ul>\n```\n\n**CSS:**\n\nIn the following, all text is red, except the `li` element with the class of `.first-item`:\n\n```css\nli:not(.first-item) {\n    color: red;\n}\n```\n\nWe can even chain `:not` pseudo-classes together.\n\nFor example, all below elements will have blue text, except the `li` element with the class `.first-item` and the last `li` element in the list:\n\n```css\nli:not(.first-item):not(:last-of-type) {\n    color: blue;\n}\n```\n\n`:empty`- Selects elements that contain no text and no child elements. Such as: `<p></p>` but not `<p> </p>`. Note that a space is considered a character, therefore not empty.\n\n## Conclusion\n\nAnd that’s it! We’ve looked at the common pseudo-class selectors, how they’re categorized into state, validation, structural & relational pseudo-selectors. As well as looking into a number of working examples.",
  "description": "Learn how to style elements with pseudo-classes."
}