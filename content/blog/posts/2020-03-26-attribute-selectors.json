{
  "date": "Thursday March 26th, 2020",
  "dateshort": "March 26th",
  "title": "CSS Attribute Selectors",
  "short": "Learn all about styling with CSS attribute selectors.",
  "description": "Learn all about styling with attribute selectors.",
  "category": "CSS",
  "body": "In this article, we’ll be learning all about attribute selectors. If you remember from HTML, elements can have attributes that give extra details.\n\nAn `a` tag with an `href` attribute:\n\n```html\n<a href=\"https://easeout.co\">This is a link</a>\n```\n\nWe use CSS attribute selectors to target these elements with their specific attributes. For example:\n\n```css\na[href=\"https://easeout.co\"] {\n  color: #FFFF00;\n}\n```\n\nHere we have an **exact match** selector, it will only select links with the **exact** `href` attribute value of \"https://easeout.co\".\n\nSo let’s learn how to use these very useful selectors!\n\n## Types of attribute selectors\n\nThere are many different types of attribute selectors, which are classified as either presence and value selectors or substring matching selectors.\n\nThe syntax for each selector starts with the attribute name and ends with an equals sign followed by the attribute value(s), usually in quotes.\n\nIt’s what goes between the attribute name and equals sign, that determines the selector type!\n\n## Presence and value selectors\n\nThese selectors will select an element based on the presence of an attribute alone (e.g. `href`), or on various different matches against the value of the attribute.\n\n`[attr]` *The attribute itself.*\n\nMatches all elements with an attribute name of *attr.* Such as `a[title]`.\n\n`[attr=”value”]` *The attribute has this exact value.*\n\nMatches all elements with an attribute name of *attr* whose value is **exactly** *value* — the string inside the quotes. Such as `a[href=\"https://easeout.co\"]`.\n\n`[attr~=”value”]` *The attribute has this value in a space-separated list.*\n\nMatches elements with an attribute name of *attr* whose value is exactly *value*, or elements with an *attr* attribute containing one or more values, at least one of which matches *value*.\n\nIn a list of multiple values the separate values are whitespace-separated. For example, `img[alt~=\"dough\"]`will select images with the alt text “making *dough*” and “*dough* types”, but not “*dough*nuts”.\n\n`[attr|=”value”]` *The first attribute value in a dash-separated list.*\n\nMatches all elements with an attribute name of *attr* whose value can be exactly *value* or can begin with *value* immediately followed by a hyphen. For example, `li[attr-years|=\"1990\"]` will select list items with a `attr-years` value of \"1990-2000\", but not the list item with a `attr-years` value of \"1900-1990\".\n\n## Substring matching selectors\n\nSubstring selectors allow for more advanced matching inside the value of your attribute. For example, if you had classes of `message-warning` and `message-error` and wanted to match everything that started with the string \"message-\", you could use `[class^=\"message-\"]` to select them both!\n\n`[attr*=”value”]` *The attribute value contains this value.*\n\nMatches all elements with an attribute name of *attr* whose value contains at least one occurrence of the substring *value* anywhere within the string. For example, `img[alt*=\"dough\"]`will select images containing the alt text “dough”. So “making *dough*”, “*dough* types” and “*dough*nuts” would all be selected.\n\n`[attr^=”value”]` *The attribute starts with this value.*\n\nMatches any elements with an attribute name of *attr* whose value has the substring *value* at the start of it. eg `li[class^=”message-”]`.\n\n`[attr$=”value”]` *The attribute ends with this value.*\n\nMatches any elements with an attribute name of *attr* whose value has the substring *value* at the end of it. For example, `a[href$=\"pdf\"]` selects every link that ends with .pdf.\n\n## Case sensitivity\n\nAll the checks so far have been **case sensitive**.\n\nIf you add an `i` just before the closing bracket, the check will be case insensitive. It’s supported by most browsers but not all, check <https://caniuse.com/#feat=css-case-insensitive>.\n\n## Combining attribute selectors\n\nAttribute selectors can also be combined with other selectors, such as tag, class, or ID.\n\n```css\ndiv[attr=\"value\"] {\n  /* style rules */\n}\n.item[attr=\"value\"] {\n  /* style rules */\n}\n#header[attr=\"value\"] {\n  /* style rules */\n}\n```\n\nAnd multiple attribute selectors can be combined:\n\n```css\nimg[alt~=\"city\"][src*=\"europe\"] {\n  /* style rules here */\n}\n```\n\nHere we select all images with alt text including the word “city” as the only value or a value in a space separated list, **and** a `src` value that includes the value \"europe\".\n\nAnd that’s it for today! We’ve covered the fundamentals of attribute selectors. Including presence and value selectors, substring matching selectors, adding case-sensitivity and combining selectors.\n\n\n\n## Related Posts:\n\n* [Basic Selectors](https://www.easeout.co/blog/2020-03-10-css-basic-selectors)\n* [Pseudo-Classes](https://www.easeout.co/blog/2020-03-31-css-pseudo-classes)\n* [Pseudo-Elements](https://www.easeout.co/blog/2020-04-06-css-pseudo-elements)"
}