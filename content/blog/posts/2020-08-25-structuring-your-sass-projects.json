{
  "date": "Tuesday August 25th, 2020",
  "dateshort": "August 25th",
  "body": "Let’s take a look at how we can structure our Sass projects!\n\nAs projects grow and expand, the need to modularize our directory and file structure increases dramatically. Thus keeping our files and folders organized is crucial. We also have the added benefit of creating components that can be reused across multiple projects. There is no one “correct” structure — its entirely up to you!\n\n## How do we structure our Sass projects?\n\nWe do this by dividing up our stylesheets into separate files using *Partials*. The separate files will represent different components. We then *import* our partials using an `@import` directive, into one master stylesheet — typically the `main.scss` file. For example:\n\n```sass\n// File: main.scss\n\n@import 'layout/header';\n```\n\nWe could then create a layout folder for our layout specific files, such as:\n\n```sass\n// File: _header.scss\n\n// This file contains all styles related to the header of the site/application.\n\n/* STYLES GO HERE */\n```\n\n*Remember:* The name of a partial file should always begin with an underscore `_`.\n\nNext up, let’s take a look at some of the ways we could choose to structure our projects!\n\nKeep in mind that there is no one *correct* structure — it’s entirely up to you!\n\nLets take a look at how to go about structuring your projects..\n\n## Simple Structure\n\nIf you’re using Sass on a small project, for example - a single web page. A very minimal structure could be as follows:\n\n```sass\n_base.scss\n_layout.scss\n_components.scss\n\nmain.scss\n```\n\nHere we have 3 partials connecting up to our `main.scss`.\n\n**Base:** contained within this file are all y*o*ur resets, variables, mixins, and any utility classes.\n\n**Layout:** contains all the CSS that handles the layout, such as the container and any grid systems.\n\n**Components:** anything reusable such as buttons, navbars, cards etc.\n\n**Main:** it should ONLY contain the imports for the above files.\n\nIf any file grows too cluttered or disorganized, it’s time to expand our structure. Consider adding a folder for your components for example, and breaking it up into individual files such as `_button.scss` & `_carousel.scss`.\n\nHowever, when we’re working on a larger project, we’ll need a more rigorous architecture, which we’ll look at in the next section.\n\n## The 7–1 Pattern\n\nThe architecture known as the *7–1 pattern* (7 folders, 1 file), is a widely-adopted structure that serves as a basis for large projects. You have all your partials organized into 7 different folders, and a single file sits at the root level (usually named `main.scss`) to handle the imports — which is the file you compile into CSS.\n\nHere’s a sample 7–1 directory structure, I’ve included some examples of files that would sit inside of each folder:\n\n```sass\nsass/\n|\n|– abstracts/ (or utilities/)\n|   |– _variables.scss    // Sass Variables\n|   |– _functions.scss    // Sass Functions\n|   |– _mixins.scss       // Sass Mixins\n|\n|– base/\n|   |– _reset.scss        // Reset/normalize\n|   |– _typography.scss   // Typography rules\n|\n|– components/ (or modules/)\n|   |– _buttons.scss      // Buttons\n|   |– _carousel.scss     // Carousel\n|   |– _slider.scss       // Slider\n|\n|– layout/\n|   |– _navigation.scss   // Navigation\n|   |– _grid.scss         // Grid system\n|   |– _header.scss       // Header\n|   |– _footer.scss       // Footer\n|   |– _sidebar.scss      // Sidebar\n|   |– _forms.scss        // Forms\n|\n|– pages/\n|   |– _home.scss         // Home specific styles\n|   |– _about.scss        // About specific styles\n|   |– _contact.scss      // Contact specific styles\n|\n|– themes/\n|   |– _theme.scss        // Default theme\n|   |– _admin.scss        // Admin theme\n|\n|– vendors/\n|   |– _bootstrap.scss    // Bootstrap\n|   |– _jquery-ui.scss    // jQuery UI\n|\n`– main.scss              // Main Sass file\n```\n\n**Abstracts (or utilities):** holds Sass tools, helper files, variables, functions, mixins and other config files. These files are meant to be just helpers which don’t output any CSS when compiled.\n\n**Base:** holds the boilerplate code for the project. Including standard styles such as resets and typographic rules, which are commonly used throughout your project.\n\n**Components (or modules):** holds all of your styles for buttons, carousels, sliders, and similar page components (think widgets). Your project will typically contain a lot of component files — as the whole site/app should be mostly composed of small modules.\n\n**Layout:** contains all styles involved with the layout of your project. Such as styles for your header, footer, navigation and the grid system.\n\n**Pages:** any styles specific to individual pages will sit here. For example it’s not uncommon for the home page of your site to require page specific styles that no other page receives.\n\n**Themes:** this is likely not used in many projects. It would hold files that create project specific themes. For example if sections of your site contain alternate color schemes.\n\n**Vendors:** contains all third party code from external libraries and frameworks — such as Normalize, Bootstrap, jQueryUI, etc. However, there is often a need to override vendor code. If this is required, its good practice to create a new folder called `vendors-extensions/` and then name any files after the vendors they overwrite. The file`vendors-extensions/_bootstrap.scss` would contain all your Bootstrap overrides — as editing the vendor files themselves, isn’t generally a good idea.\n\n**Main.scss:** This file should only contain your imports! For example..\n\n```sass\n@import 'abstracts/variables';\n@import 'abstracts/functions';\n@import 'abstracts/mixins';\n\n@import 'vendors/bootstrap';\n@import 'vendors/jquery-ui';\n\n@import 'base/reset';\n@import 'base/typography';\n\n@import 'layout/navigation';\n@import 'layout/grid';\n@import 'layout/header';\n@import 'layout/footer';\n@import 'layout/sidebar';\n@import 'layout/forms';\n\n@import 'components/buttons';\n@import 'components/carousel';\n@import 'components/slider';\n\n@import 'pages/home';\n@import 'pages/about';\n@import 'pages/contact';\n\n@import 'themes/theme';\n@import 'themes/admin';\n```\n\n*Note*: There’s no need to include the `_` or `.scss` file extension when importing.\n\n## Get up and running with 7–1:\n\nThe official boilerplate is up on [github](https://github.com/HugoGiraudel/sass-boilerplate). You can download or clone it with the following terminal command:\n\n```\ngit clone https://github.com/HugoGiraudel/sass-boilerplate.git\n```\n\n## Wrapping up\n\nAnd that’s it! You’ve learned how you can go about structuring your Sass projects. The thing to keep in mind is that there are no explicit rules here. You should structure your projects in a way that is meaningful to you (and your team!). The way that helps you quickly and easily find and isolate your styles — is the way to go!\n\n## Related Posts:\n\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)\n* [Setting up SASS](https://www.easeout.co/blog/2020-07-09-setting-up-sass)\n* [Using SASS Variables](https://www.easeout.co/blog/2020-07-14-using-sass-variables)",
  "title": "Structuring your SASS projects",
  "description": "Learn how to structure your SASS projects.",
  "short": "Learn how to structure your SASS projects.",
  "category": "SASS",
  "thumbnail": "/images/uploads/sass-structuring-projects-min.png"
}