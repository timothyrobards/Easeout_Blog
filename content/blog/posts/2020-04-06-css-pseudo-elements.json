{
  "title": "CSS Pseudo-Elements",
  "date": "Monday April 6th, 2020",
  "dateshort": "April 6th",
  "description": "Learn all about styling with pseudo-elements.",
  "short": "Learn all about styling with CSS pseudo-elements.",
  "category": "CSS",
  "body": "In this tutorial, weâ€™ll be learning about CSS pseudo-elements!\n\nA pseudo-element is used to style specified parts of an element. For example, we could use it to style the first letter (`::first-letter`), or line (`::first-line`), of an element. Or we could use it to add content before (`::before`), or after (`::after`), the content of an element.\n\nFor example:\n\n```css\np::first-letter {\n  color: red;\n  text-transform: uppercase;\n}\n```\n\nHere the first letter of every `<p>` is selected with the `::first-letter` pseudo-element. The color is changed to red and text set to uppercase.\n\nYouâ€™ll know when you see a pseudo-element, as they start with a double colon `::`. Whilst a single colon could also be used, the convention is to use a double to distinguish them from pseudo-classes.\n\n# List of pseudo-elements\n\n`::first-letter` is used to style the first letter of a block of text.\\\n`::first-line` is used to style the first line of a block of text.\\\n`::before` lets you add content before an element.\\\n`::after` lets you add content after an element.\\\n`::selection` targets text selected by the user.\n\nThere are more, however theyâ€™re considered experimental. In this tutorial, our focus will be on these main pseudo-elements.\n\n## ::first-letter\n\nAs we saw earlier, the `::first-letter` pseudo-element is used to add styles to just the *first letter* of text.\n\nFor example, letâ€™s change the first letter of the text in all `<p>` elements, to a larger font size:\n\n```css\np::first-letter {\n  font-size: 150%;\n}\n```\n\nIt should be noted that `::first-letter` can only be applied to block-level elements. That is any element that starts on a new line & takes up the full width of the page, such as `<div>`, `<h1>` to `<h6>`, `<p>`, etc. It cannot be applied to inline elements such as `<span>` or `<code>`.\n\nA neat trick is to combine pseudo-element selectors with classes:\n\n```css\np.summary::first-letter {\n  color: red;\n}\n```\n\nSo here we can style the first letter of every paragraph with the *summary* class.\n\n## ::first-line\n\nThe `::first-line` pseudo-element is used to style the first line of a block of text.\n\nSo for example, to give the first line of all `<p>` elements a bolder font â€” we could use the following:\n\n```css\np::first-line {\n  font-weight: 600;\n}\n```\n\nNote that only a subset of the available CSS properties can be used to style a `::first-line.` Typically only the font, text & background-related properties.\n\n## ::before and ::after\n\nThese are probably the most used pseudo-elements. With `::before` and `::after`, we can insert content onto a page without it needing to be in our HTML. The end result is not actually in the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction), though it appears on the page as if it is.\n\nTo illustrate, see the following CSS:\n\n```css\ndiv::before {   \n   content: \"before\"; \n} \ndiv::after {   \n   content: \"after\"; \n}\n```\n\n*Note:* the `content` property is required, as it specifies the content to be added!\n\nThis translates into the following HTML:\n\n```html\n<div>   \n   before   \n   <!-- Everything else in our div -->   \n   after \n</div>\n```\n\n### ::before\n\nSo the `::before` pseudo-element can be used to insert some content before the content of an element.\n\nA common use case could be to add an icon *before* the content of each `<h1>` element:\n\n```css\nh1::before {\n  content: url(icon.png);\n}\n```\n\nWith the `content` property, you can insert any kind of content:\n\n```css\np::before {\n  content: \"Check this out: \");\n  color: green;\n  font-weight: bold;\n}\n.company::before {\n   content: url(\"images/logo.png\");\n}\n```\n\n### ::after\n\nThe `::after` pseudo-element can be used to insert some content after the content of an element.\n\nHere we insert an icon *after* the content of each `<h1>` element:\n\n```css\nh1::after {\n  content: url(icon.png);\n}\n```\n\nOr we could add an arrow after any links:\n\n```css\na::after {\n  content: \"â†’\";\n}\n```\n\n## ::selection\n\nThe `::selection` pseudo-element is another extremely useful property. It matches the portion of an element that is selected by a user.\n\nWe can use this for styling text as its highlighted. Here we set it to be green with a grey background:\n\n```css\n::selection {\n  color: green;\n  background: grey;\n}\n```\n\nThe properties which can be applied to `::selection` are: `color`, `background`, `cursor`, and `outline`.\n\n## Conclusion \n\nAnd there we go! Weâ€™ve learned all about how to use pseudo-elements to style our content ðŸŽ‰. Pseudo-elements are great! They provide some extremely useful solutions, for when we need to style parts of elements."
}