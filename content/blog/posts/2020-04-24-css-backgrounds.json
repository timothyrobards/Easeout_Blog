{
  "date": "Friday April 24th, 2020",
  "dateshort": "April 24th",
  "body": "In this tutorial, we’ll learn how to change the backgrounds of CSS elements.\n\nThe `background` property allows you to control the background of any element. It’s a *shorthand* property, so we can write multiple properties in one code block. For example:\n\n```css\nbody {\n  background:\n     fixed                    /* attachment *\n     blue;                    /* color */\n     content-box              /* clip */\n     url(background.jpg)      /* image */\n     padding-box              /* origin */\n     top center 300px 300px   /* position & size */\n     no-repeat                /* repeat */\n}\n```\n\nThis example contains each of different properties that we can apply to backgrounds. Let’s take a look at these now..\n\n# Background properties\n\nThe background of an element can be changed using each of these properties:\n\n* `background-attachment`\n* `background-color`\n* `background-clip`\n* `background-image`\n* `background-origin`\n* `background-position`\n* `background-repeat`\n* `background-size`\n\n## background-attachment\n\nUsing `background-attachment` we can define how the background moves relative to the viewport (the part of the website, which is visible in the browser window).\n\nWe can use any of three values: `scroll`, `fixed`, and `local`.\n\n`scroll` is the default behavior. The background will scroll with the page.\n\n`fixed` attaches the background to the viewport, so that scrolling will not affect the background:\n\n```css\ndiv {\n  background-attachment: fixed;\n}\n```\n\nThis is often used to achieve parallax effects.\n\n`local` is new to CSS3, it causes an element’s background to be fixed to the element itself. This resolves unexpected behavior when working with backgrounds inside of scroll box on a page.\n\n## background-color\n\nThe `background-color` property is quite self-explanatory. It changes our background color by accepting a color value, it can be a color keyword, an `rgb` or `hsl` value:\n\n```css\nbody {\n  background-color: lime;\n}\ndiv {\n  background-color: #ff0000;\n}\n```\n\nCheck out my post to learn about [working with colors](https://www.easeout.co/blog/2020-04-23-css-colors).\n\n## background-clip\n\nWe can use `background-clip` to create some neat effects. It lets you choose the area used by the background. The values we can use are:\n\n* `border-box` the default value. The background will extend to the outside edge of the element’s border.\n* `padding-box` clips the background at the edge of the element’s padding, without the border.\n* `content-box`clips the background at the edge of the content box, without the padding.\n* `inherit` applies the `background-clip` value of the parent to the element.\n\n## background-image\n\nThe `background-image` property applies a graphic to the background of an element.\n\nWe specify the our image location using URL, like so:\n\n```css\ndiv {\n  background-image: url(image.png);\n}\n```\n\nWe can use a relative path (as above) or a full web address if located externally.\n\n## background-origin\n\nWith `background-origin` we can choose where to apply the background. It’s very similar to `background-clip` except it *resizes* the background instead clipping it.\n\nBy default our background to is applied to the entire element (including padding) with `padding-box`. We could also set our background to the entire element including the border with `border-box`, or to the element without padding using `content-box`.\n\nWe’ll often use `background-size: cover` and `background-repeat: no-repeat` with this property. To prevent a background image from repeating under any borders or padding. More on these later.\n\n## background-position\n\nWhen using a background image you’ll most often need to set it’s position. For this we use the `background-position` property. With this we can set the background image to the position specified within its container.\n\nWe can set the values using the keywords of `left`, `right` & `center` for the X (horizontal) axis, and `top`or `bottom` for the Y (vertical) axis:\n\n```css\ndiv {\n  background-position: top right;\n}\n```\n\nThe default values are 0 0. This puts your background image at the top left of the container.\n\nTo be more specific with our positioning, we could instead use length values:\n\n```css\ndiv {\n  background-position: 100px 50px; \n}\n```\n\nHere the first value is the horizontal position, second value is the vertical position. So `100px 50px` will move the image 100px to the right and 50px down. The values can be set in `px`, `em`, or any other valid CSS length value.\n\nWe can also use percentages:\n\n```css\ndiv {\n  background-position: 100% 50%; \n}\n```\n\nMoving a background image by percentage means the X% point in the image will align to the X% point in the container. So `50%` will align the middle of the image with the middle of the container. `100%` will align the last pixel of the image with the last pixel of the container.\n\n## background-repeat\n\nWhen using an image that is smaller than the background, you can set its behavior with `background-repeat`, like so:\n\n```css\nhtml {\n  background-image: url(logo.png);\n  background-repeat: repeat-x; \n}\n```\n\nThe possible values for this property are:\n\n* `repeat`: repeat the image in both directions (this is the default!).\n* `repeat-x`: repeat the image horizontally.\n* `repeat-y`: repeat the image vertically.\n* `no-repeat`: don’t repeat the image, just show it once.\n* `space`: repeats the image in both directions, spacing them out evenly.\n* `round`: repeats the image in both directions, stretching them to fill any available space.\n\nWe could also apply differing values to our axis’ in one line:\n\n```css\n.div {\n   background-repeat: repeat space;\n}\n```\n\nThe first value being our horizontal axis, the second our vertical.\n\n## background-size\n\nThe last background property is `background-size`, and its perhaps one of the most useful! We can use 3 keywords: `auto`, `cover` and `contain`. With `auto`being the default.\n\n`auto` the browser automatically calculates the size based on the actual size of the image, preserving its aspect ratio.\n\n`cover` expands the image to cover the entire element. If the element stretches, the image will crop a bit off at one of the edges to fit.\n\n`contain` stops expanding the background image when one axis (x or y) covers the smallest edge of the image, which makes it fully contained within the element. Essentially, the whole image will always be shown, meaning there might be some space at the sides or bottom.\n\nAdditionally can specify a length value, which sets the width of the background image (the height will be automatic):\n\n```css\ndiv {\n  background: url(image.jpg);\n  background-size: 100%;\n}\n```\n\nIf you specify a second value, the first is the width and the second the height:\n\n```css\ndiv {\n  background: url(image.jpg);\n  background-size: 400px 100px;\n}\n```\n\nNote: Any CSS size unit can be used, including px, %’s, ems, vh, vw, etc.\n\n## **Multiple Background Images**\n\nYou can also *combine* any of the above methods and apply them to multiple images, simply by adding commas between each:\n\n```css\nhtml {\n  background: url(firstimage.jpg), url(secondimage.jpg);\n  background-size: 500px 100px, cover;\n}\n```\n\nIn this example, our first image is set to 500x100 pixels, it sits above our second image which covers the entire area.\n\nWhen using multiple images for the background its important to remember the stacking order. Each value corresponds to a layer: the first is the top layer, the second is the second layer, and so on. If a background color is set, it’ll always be the last layer.\n\nAnd that’s it! We’ve examined each of the background properties that we can work with in CSS. With this knowledge you can create some very unique layouts & unleash your inner creativity!\n\n## Related posts:\n\n* [CSS Colors](https://www.easeout.co/blog/2020-04-23-css-colors)\n* [The Box Model](https://www.easeout.co/blog/2020-04-14-the-css-box-model)",
  "title": "CSS Backgrounds",
  "description": "Learn how to change the backgrounds of CSS elements.",
  "short": "Learn how to change the backgrounds of CSS elements.",
  "category": "CSS"
}