{
  "date": "Monday December 28th, 2020",
  "dateshort": "December 28th",
  "body": "In this article, we’re going to learn all about traversing DOM elements. When we traverse the DOM, we’re essentially navigating through the DOM. We work with parent, child and sibling properties to apply our JavaScript to DOM elements.\n\nLet's use the following example:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Traversing the DOM</title>\n</head>\n<body>\n  <h1>Traversing the DOM</h1>\n  <p>Let's work with this example to <strong>MASTER</strong> the DOM!</p>\n  <h2>List of Items..</h2>\n  <ul>\n    <li>Pizza</li>\n    <li>Burgers</li>\n    <li>Doritos</li>\n  </ul>\n</body>\n<script>\n  const h1 = document.getElementsByTagName('h1')[0];\n  const p = document.getElementsByTagName('p')[0];\n  const ul = document.getElementsByTagName('ul')[0];\n</script>\n</html>\n```\n\nOur file will open up in the browser like so:\n\n![Traversing the DOM Demo](/images/uploads/dom-traversing-1.png)\n\n## Root Nodes\n\nThe `document` object is the root of every node in the DOM.* *The next level up is the `window` object* — which includes things such as *browser tabs, toolbars, prompts and alerts. We’ll be working with the DOM and thus the `document` object, which consists of what is inside of the inner `window`.\n\nBy default, every document contains the `html`, `head`, and `body` elements.\n\nCheck the contents of each by running the following in your *console*:\n\n```\ndocument.head;     // ► <head>...</head>\ndocument.body;     // ► <body>...</body>\n```\n\n## Parent Nodes\n\nAs mentioned earlier, the nodes in the DOM are referred to as parents, children, and siblings, depending on their relation to other nodes. *The parent of any particular node is the node that is one level above it in the DOM hierarchy.*\n\nIn our example:\n\n* `html` is the parent of `head`, `body`, and `script`.\n* `body` is the parent of `h1`, `h2`, `p` and `ul`, but not `li`, as `li` is two levels down from `body`.\n\nWe can check the parent of our `p` element for example, with the `parentNode` property. As we’ve assigned `p` to a variable all we need to do is type:\n\n```\np.parentNode;      // ► <body>...</body>\n```\n\nWe can even go two levels up with:\n\n```\np.parentNode.parentNode;      // ► <html>...</html>\n```\n\n## Child Nodes\n\n*The children of a node are the nodes that are one level below.* Any nodes beyond one level of nesting are usually referred to as descendants.\n\nThere are a number of properties we’ll often be working with here, such as `childNodes`, `firstChild`, `lastChild`, `children`, `firstElementChild` and `lastElementChild`.\n\nLet's start with the `childNodes` property, it will return a list of every child of a given node:\n\n```\nul.childNodes   // ► NodeList(7) [text, li, text, li, text, li, text]\n```\n\nPerhaps you we’re expecting just three `li`’s to be returned? The `text` nodes are actually whitespace caused by indentation between elements — which the DOM considers as nodes. You can’t see them under your *Elements* tab, as Dev Tools removes these nodes automatically.\n\nFor this reason, if we attempt to alter the background color of the first child node for example, it’d fail as the first child is text.\n\n```\nul.firstChild.style.background = \"purple\";\n\n// output:\n\nUncaught TypeError: Cannot set property 'background' of undefined\n```\n\nWhen we want to work with element nodes only, we should use the `children`, `firstElementChild` and `lastElementChild` properties.\n\n`ul.children` would return only the three `li` elements.\n\nAnd to change just our first `li`, we’d use:\n\n```\nul.firstElementChild.style.background = 'purple';\n```\n\nHere’s our updated page:\n\n![Traversing the DOM Demo 2](/images/uploads/dom-traversing-2.png)\n\nIf we want to alter all of our `children` elements, we could use a `for...of` loop like so:\n\n```\nfor (let element of ul.children) {\n  element.style.background = 'purple';\n}\n```\n\nNow all our child elements have the background color change:\n\n![Traversing the DOM Demo 3](/images/uploads/dom-traversing-3.png)\n\nIf we take a look at our `p` element, we’ll see it contains both text and other elements (our `strong` tag).\n\n```\nfor (let element of p.childNodes) {\n  console.log(element);\n}\n\n// output:\n\n\"Let's work with this example to \" \n<strong>MASTER</strong> \n\" the DOM!\"\n```\n\nThe `childNodes` property is useful when we wish to access that information.\n\nBoth `childNodes` and `children` do not return traditional JavaScript arrays (with all their associated properties & methods), but rather array-like objects. As you would with an array, however, you can access nodes by index number, or even find their `length` property.\n\n```\ndocument.body.children[3].lastElementChild.style.background = 'pink';\n```\n\nWith this code, we’ll find the last element child `li` of the fourth child element `ul` of `body` and apply our style..\n\n![Traversing the DOM Demo 4](/images/uploads/dom-traversing-4.png)\n\nBy using parent and child properties, you can retrieve any node in the DOM!\n\n## Sibling Nodes\n\nLet’s now take a look at sibling nodes. Siblings of a node are any node on the same tree level in the DOM. They don’t have to be the same type of node — text, element, and comment nodes can all be siblings. The properties we’ll often work with here are `nextSibling`, `previousSibling`, `nextElementSibling` and `previousElementSibling`.\n\nSibling properties work in the same way as child nodes: `previousSibling` and `nextSibling` will get the next node that immediately precedes or follows the specified node, and `previousElementSibling` and `nextElementSibling` will only get element nodes.\n\nLet’ s get the middle element from our `ul`:\n\n```\nconst burger = ul.children[1];\n```\n\nAnd let’s use the element sibling properties to access the next and previous elements (avoiding the whitespace text):\n\n```\nburger.nextElementSibling.style.background = 'orange';\nburger.previousElementSibling.style.background = 'green';\n```\n\nThese changes will now show in our example:\n\n![Traversing the DOM Demo 5](/images/uploads/dom-traversing-5.png)\n\nIn the next tutorial, we’ll move on to making changes to the DOM. Stay tuned!\n\n## Related Posts:\n\n* [An Introduction to the DOM](https://www.easeout.co/blog/2020-12-14-an-introduction-to-the-dom)\n* [Accessing DOM Elements](https://www.easeout.co/blog/2020-12-21-accessing-dom-elements)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)",
  "title": "Traversing the DOM",
  "description": "How to traverse DOM elements with JavaScript.",
  "short": "How to traverse DOM elements with JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-traversing-the-dom.png"
}