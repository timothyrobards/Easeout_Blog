{
  "date": "Tuesday October 27th, 2020",
  "dateshort": "October 27th",
  "body": "Let’s take a look at data type fundamentals in JavaScript! \n\nBy the end of the article, you’ll have an increased understanding of working with many of the major data types. Which is a fundamental skill to pickup, as you move forward with JavaScript.\n\n## What are Data Types?\n\nData types are classifications of specific types of data. We have numbers, Booleans (true or false), strings (character sequences enclosed in quotes `‘’` or `“”`) and more complex data types known as arrays and objects (we’ll look at these a bit later).\n\n```javascript\nlet a = 1;           // a is a number\nlet a = \"Avocado\";   // a is a string\nlet a = true;        // a is a Boolean\nlet a;               // a is undefined\n```\n\nFor example, `a`, has been defined as a variable using the `let` keyword. We can assign any *data* type to it, or even just initialize it by leaving it blank.\n\n**Why Does it matter?**\n\nWhen storing data in a variable, it’s important that we know its type, as that determines what we can do with it! For instance, you can add numbers `1 + 1 = 2`, and that’s fine. However, if you attempt to add numbers when they have the data type of string `“1” + “1” = 11` Your result will be 1 and 1, not the sum equaling 2 as you may have expected. Let's now take a look at each type in detail.\n\n### Numbers\n\nNumbers in JavaScript can be written with *or* without decimals, such as:\n\n```javascript\nlet a = 1;\nlet b = 1.1;\n```\n\n*And they can be abbreviated using the `e` exponent, for example:*\n\n```javascript\nlet million = 1000000;\n\n// or..\n\nlet million = 1e6;\n```\n\nThe 6 is the amount of 0’s, which in this case equals one million.\n\nThere are a few special values that we often encounter when working with numbers, `Infinity`, `-Infinity` and `NaN.`\n\nIf you attempt to divide a number by 0, such as:\n\n```javascript\n3/0    // Infinity\n```\n\nThe result will be Infinity. As the JavaScript computes the result outside its largest possible number of `9007199254740992`. The opposite would yield:\n\n```javascript\n-3/0   // -Infinity\n```\n\nThe value of `NaN` represents ‘Not a Number’, meaning the value isn’t considered a number. This would generate in illegal expressions, such as:\n\n```javascript\nlet a = 100 / \"Greg\";     // a will be NaN\n```\n\nAs of course you can’t divide a number by a string!\n\nHowever, JavaScript is smart enough to convert your data type in some cases, such as:\n\n```javascript\nlet a = 100 / \"2\"         // a will be 50\n```\n\nJavaScript will use type coercion to consider your “2” string to be a number in this case.\n\n### Strings\n\nAs mentioned earlier, strings are sequences of characters that exist within either single or double quotes:\n\n```javascript\nlet foodChoice = 'Crunchy cheddar jalapeno cheetos';\nlet foodChoice = \"Crunchy cheddar jalapeno cheetos\";\n```\n\nStrings aren’t limited to letters either, numbers and symbols are also acceptable. It’s the quotes that define our string data type.\n\nIt really comes down to personal preference as to whether you use single or double quotes, consistency is what’s most important within your code!\n\n```javascript\nlet eater = “Bruce”;\nlet foodChoice = \"Crunchy cheddar jalapeno cheetos\";\n\nalert(eater + \" loves \" + foodChoice + \"!\")\n\n// Bruce loves Crunchy cheddar jalapeno cheetos!\n```\n\n### Booleans\n\nWe use the keywords `true` and `false` to set variables as Boolean data type.\n\n```javascript\nlet a = true;\nlet b = false;\n```\n\nBooleans are especially useful when performing mathematical operations, in determining whether an expression is true or false, such as:\n\n```javascript\n10 > 5     // true, 10 is greater than 5\n5 > 10     // false, 5 is not greater than 10\n5 < 10     // true, 5 is less than 10\n5 = 5      // true, 5 equals 5\n```\n\nIf we assign our expression to a variable, such as:\n\n```javascript\nlet a = 10 > 5;   // true\n```\n\nOur variable `a` will of course, hold the value of true.\n\nBooleans are used within programs when we need to perform operations based on the evaluation of truth or falsehood. For example, do the received login credentials evaluate to true? Grant access ✔️. Or are they false? Deny access ❌.\n\n### Arrays\n\nAn array is a slightly more complex data type, however they are really quite simple to grasp! An array is a way to have multiple values held by a single variable. For example:\n\n```javascript\nlet colors = [\"red\", \"green\", \"blue\", \"yellow\"]\n```\n\nAn array is defined by using square brackets `[]` as in the above example. We’ve assigned an array to the variable `colors`, contained within are our **elements** of red, green, blue and yellow.\n\nA call to our `colors` variable will output our entire array of `[“red”, “green”, “blue”, “yellow”]`.\n\nThe true power of arrays is that their contents can be iterated, we can call out a single item within the array variable. To do this we use an index number, inside of square brackets:\n\n```javascript\ncolors[0]     // red\ncolors[1]     // green\ncolors[2]     // blue\ncolors[3]     // yellow\ncolors[4]     // undefined\n```\n\n*Note:* Our first array element always has the index position of 0. So remember to start counting from 0 instead of 1!\n\nArrays have a large amount of flexibility, they can have elements added, removed and changed. Let’s now take a look at our final data type: objects!\n\n### Objects\n\nThe object data type is typically used for holding large amounts of related data. Object data values are stored in key/value pairs, the pairs make for a logical way to store and access our data, using curly braces `{}`, for example:\n\n```javascript\nlet user = {firstName:\"Jane\", lastName:\"Doe\", age:34, location:\"Vancouver\"};\n```\n\nFor clarity we’d write this out over multiple lines:\n\n```javascript\nlet user = {\n    firstName: \"Jane\",\n    lastName: \"Doe\",\n    age: 34,\n    location: \"Vancouver\"\n};\n```\n\nOur above example contains four properties `firstName`, `lastName`, `age`, and `location`. Our properties can be of any data type, which are accessed using *objectName.property* as follows:\n\n```javascript\nuser.firstName     // Jane\nuser.lastName      // Doe\nuser.age           // 34\nuser.location      // Vancouver\n```\n\n## Conclusion\n\nUnderstanding how we classify data types is a fundamental skill to posses when moving forward with JavaScript. In this article, we looked at and what distinguishes each type. \n\nStay tuned for my next post, where we'll expand upon this knowledge by learning how to perform data type conversions.\n\n## Related Posts:\n\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)\n* [JavaScript Syntax & Structure](https://www.easeout.co/blog/2020-10-19-javascript-syntax-structure)",
  "title": "Understanding JavaScript Data Types",
  "description": "Learn all about data types in JavaScript.",
  "short": "Learn all about data types in JavaScript.",
  "category": "JavaScript"
}