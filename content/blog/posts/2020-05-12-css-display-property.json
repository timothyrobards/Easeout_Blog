{
  "date": "Tuesday May 12th, 2020",
  "dateshort": "May 12th",
  "body": "The display property is perhaps one of the most important properties in CSS.\n\nEvery element in an HTML document is treated as a box, and it’s the display property that determines how these boxes will be shown.\n\nThere are a [large amount](https://developer.mozilla.org/en-US/docs/Web/CSS/display) of values that can be used with this property. However, only some of them of commonly used, we’ll be focusing on these:\n\n* `inline`\n* `inline-block`\n* `block`\n* `flexbox`\n* `grid`\n* `none`\n* `table`\n\n## Inline\n\nThe `inline` value is the default for every element in CSS.\n\n```css\ndisplay: inline;\n```\n\nA neat way to visualize `inline` is to think of a paragraph containing some words in wrapped in bold `<b>` or `<span>` tags:\n\n![Display inline example](/images/uploads/display-inline.png)\n\nHere the `<span>` element has a blue border applied, and the flow of text isn’t broken. It sits `inline` with the text.\n\nWe can apply padding and margins to inline elements, however the surrounding elements will be pushed aside in a horizontal direction (not vertical). Also, `height` and `width` are ignored by `inline` elements.\n\nEvery HTML tag is displayed inline unless otherwise specified, with a few exceptions such as `div`, `p` and `section`, which are set as `block`.\n\n## Inline-block\n\n```css\ndisplay: inline-block;\n```\n\nAn element with `inline-block` is very similar to `inline`, however the `width` and `height` are able to be applied as specified.\n\n## Block\n\n```css\ndisplay: block;\n```\n\nAs mentioned, a number of elements are set to `block` by default. They are layout elements, such as `<div>`, `<section>`, and `<ul>`. Also text elements such as `<p>` and `<h1>`.\n\nBlock level elements are stacked one after each other in a vertical direction. By default each element takes up 100% of the page width.\n\nIf specified, the values assigned to the `width` and `height` as well as `margin` and `padding` are all adhered to.\n\n## Flexbox\n\nThe `display` property is also used when working with flexbox:\n\n```css\ndisplay: flex;\n```\n\nCheck out the complete [Flexbox guide](https://www.easeout.co/blog/2020-05-22-the-flexbox-guide) to learn more about this method.\n\n## Grid\n\nWhen using CSS Grid, we also set the display property:\n\n```css\ndisplay: grid;\n```\n\nCheck out the complete [CSS Grid guide](https://www.easeout.co/blog/2020-05-29-the-css-grid-guide) to learn more about this method.\n\n## None\n\n```css\ndisplay: none;\n```\n\nWe use `display: none` to make an element disappear.\n\nIt’s still loaded in our HTML, just not rendered visible by the browser.\n\n## Table Values\n\n```css\ndisplay: table;\n```\n\nWith the advent of modern layout methods such as flexbox & grid, the `<table>` HTML element is a bit of a relic.\n\nHowever, we could use a number of display values to get non-table elements to behave like table elements, if we’re so inclined:\n\n```css\nelement {\n  display: table;\n  display: table-cell;\n  display: table-column;\n  display: table-row;\n  display: table-caption;\n}\n```\n\nWe could use this like so:\n\n```css\n<div style=\"display: table;\">\n  <div style=\"display: table-row;\">\n    <div style=\"display: table-cell;\">\n      Cell content.\n    </div>\n  </div>\n</div>\n```\n\nIt’s not a common technique as it makes for messy markup, however it may have the odd use-case.\n\n## Related Posts:\n\n* [The Display Property](https://www.easeout.co/blog/2020-05-12-css-display-property)\n* [The Box Model](https://www.easeout.co/blog/2020-04-14-the-css-box-model)\n* [CSS Units](https://www.easeout.co/blog/2020-04-30-css-units)",
  "title": "The Display Property",
  "description": "Common uses for the CSS display property.",
  "short": "Common uses for the CSS display property.",
  "category": "CSS"
}