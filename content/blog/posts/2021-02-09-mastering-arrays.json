{
  "date": "Monday February 8th, 2021",
  "dateshort": "February 8th",
  "body": "An *array* in JavaScript can be looked at as a kind of special variable, which is able to hold more than one value at a time. Arrays can contain any data type, including numbers, strings, Booleans and objects.\n\nMore specifically, an array is a type of a high-level, list-like object, which consists of an ordered collection (or list) containing zero or more data types. We use numbered indices starting from 0 to access specific items.\n\nLet’s cover the basics with some examples!\n\n## **Creating an Array**\n\n```javascript\nvar shapes = [‘Square’, ‘Circle’, 'Triangle']; \nconsole.log(shapes.length); // 3\n```\n\nHow can we access each array item?\n\n```javascript\nvar first = shapes[0]; // Square \nvar second = shapes[1]; // Circle\nvar last = shapes[shapes.length — 1]; // Triangle\n```\n\n## **Looping over an Array**\n\nYou could use any looping method, but let's go with `forEach`:\n\n```javascript\nshapes.forEach(function(item, index, array){\n  console.log(item, index);\n});\n\n// Square 0\n// Circle 1\n// Triangle 2\n```\n\n## **Adding to the end of an Array**\n\nWe use the `push()` method:\n\n```javascript\nvar addItem = shapes.push(‘Rectangle’); \n\n// [“Square”, “Circle”, “Triangle”, \"Rectangle\"]\n```\n\n## **Removing from the end of an Array**\n\nWe use the `pop()` method:\n\n```javascript\nvar removeItemEnd = shapes.pop();\n\n// [“Square”, “Circle”, “Triangle\"]\n```\n\n## **Removing from the front of an Array**\n\nWe use the `shift()` method:\n\n```javascript\nvar removeItemFront = shapes.shift(); \n\n// [“Circle”, \"Triangle\"];\n```\n\n## **Adding to the front of an Array**\n\nWe use the `unshift()` method:\n\n```javascript\nvar addItemFront = shapes.unshift(‘Hexagon’);\n\n// [“Hexagon”, “Circle”, \"Triangle\"];\n```\n\n## **Getting the index of an Array item**\n\nWe use the `indexOf()` method:\n\n```javascript\nvar pos = shapes.indexOf(‘Circle’); \n\n// 1\n```\n\n## **Removing an item by index position**\n\nWe use the `splice()` method:\n\n```javascript\nvar removedItem = shapes.splice(1, 1); \n\n// [“Hexagon”, “Triangle”]\n```\n\n## **Remove multiple items from an index position**\n\n```javascript\nvar colors = [‘Red’, ‘Green’, ‘Blue’, ‘Yellow’]; \n\nconsole.log(colors); \n\n// [“Red”, “Green”, “Blue”, “Yellow”] \n\nvar pos = 1, n = 2; \nvar removedItems = colors.splice(pos, n); \n\n// We use n to define the number of items to be removed, from pos until n inclusive.\n\nconsole.log(colors); \n// [“Red”, “Yellow”] \n\nconsole.log(removedItems); \n// [“Green”, “Blue”]\n```\n\n## **Copying an Array**\n\nWe assign our array to a new variable using the `slice()` method:\n\n```javascript\nvar arrayCopy = shapes.slice(); \n\n// [“Hexagon”, “Triangle”]\n```\n\n## Checking if an object is an Array\n\nWe use the `isArray()` method to test if objects are arrays:\n\n```javascript\nArray.isArray(shapes);\n\n// true\n```\n\n## Reversing the order of an Array\n\nWe use the `reverse()` method:\n\n```javascript\nvar food = ['pizza', 'pasta', 'salad', 'bread'];\n\nfood.reverse();\n\n// [\"bread\", \"salad\", \"pasta\", \"pizza\"]\n```\n\n## Replacing Array elements with static values\n\nWe use the `fill()` method to replace elements with a static value:\n\n```javascript\nfood.fill(\"yum\");\n\n// [\"yum\", \"yum\", \"yum\", \"yum\"]\n```\n\nIf instead, we wished to replace only some elements, we can set start and end points:\n\n```javascript\nfood.fill(\"yum\", 1);\n\n// [\"bread\", \"yum\", \"yum\", \"yum\"]\n\nfood.fill(\"yuck\", 2,4);\n\n// [\"pizza\", \"pasta\", \"yuck\", \"yuck\"]\n```\n\n## Sorting an Array\n\nWe use the `sort()` method to sort our elements based on the first character in the element.\n\n*Note:* If our first character is identical, it will compare the second, then the third and so on.\n\n```javascript\nvar food = ['pizza', 'pasta', 'salad', 'bread'];\n\nfood.sort();\n\n// [\"bread\", \"pasta\", \"pizza\", \"salad\"]\n```\n\nIf any of our Array items begin with an uppercase character, they would be sorted before lowercase items, such as:\n\n```javascript\nvar food = ['pizza', 'pasta', 'Salad', 'bread'];\n\nfood.sort();\n\n// [\"Salad\", \"bread\", \"pasta\", \"pizza\"]\n```\n\nWhen working with arrays of numbers, the default behaviour is not what you might expect:\n\n```javascript\nvar numbers = [111, 2, 45, 32, 788, 4, 7];\n\n// [111, 2, 32, 4, 45, 7, 788]\n```\n\nThe `sort()` method only checks the first character in the number.\n\nSo for proper ordering, you could create a function like so:\n\n```javascript\nfunction sortNumber(a,b) {\n  return a - b;\n}\n\nnumbers.sort(sortNumber);\n\n// [2, 4, 7, 32, 45, 111, 788]\n```\n\nOr you could go for extra fancy points by using arrow functions:\n\n```javascript\nnumbers.sort((a, b) => a - b); // For ascending sort\nnumbers.sort((a, b) => b - a); // For descending sort\n```\n\n## Merging Arrays\n\nWe use the `concat()` method to merge two or more arrays together:\n\n```javascript\nvar dogs = ['Labrador', 'Chihuahua', 'Greyhound', 'Beagle'];\n\nvar cats = ['Persian', 'Siamese', 'Ragdoll', 'Bengal'];\n\nvar animals = dogs.concat(cats);\n\nanimals;\n\n// [\"Labrador\", \"Chihuahua\", \"Greyhound\", \"Beagle\", \"Persian\", \"Siamese\", \"Ragdoll\", \"Bengal\"]\n```\n\n## Converting Array Elements into a String\n\nWe use the `join()` method:\n\n```javascript\nvar dogs = ['Labrador', 'Chihuahua', 'Greyhound', 'Beagle'];\n\nvar joinedDogs = dogs.join();\n\njoinedDogs;\n\n// \"Labrador,Chihuahua,Greyhound,Beagle\"\n```\n\nIf we want whitespace in our new string or any other separator for that matter, we add it as a parameter to our `join()`, like so:\n\n```javascript\nvar joinedDogs = dogs.join(', ');\n\njoinedDogs;\n\n// \"Labrador, Chihuahua, Greyhound, Beagle\"\n```\n\n## map(), filter() and reduce()\n\nWe use the `map()` method to apply a function to every element of an array.\n\nSay we want to add 10 to every number in an array:\n\n```javascript\nvar numbers = [1, 2, 3, 4, 5];\n\nvar add10 = numbers.map((val, i, arr) => {\n  return val + 10;\n});\n\nnumbers;\n\n// [1, 2, 3, 4, 5];\n\nadd10;\n\n// [11, 12, 13, 14, 15]\n```\n\nWe use the `filter()` method to create a new array with the elements that satisfy a condition set by an argument function.\n\nSay we want to filter out negative numbers from an array:\n\n```javascript\nvar numbers = [-52, 520, 0, -100, 34];\n\nfunction isPositive(value) {\n  return value > 0;\n}\n\nvar filtered = numbers.filter(isPositive);\n\nfiltered;\n\n// [520, 34]\n```\n\nWe use the `reduce()` method to reduce an array to a single value.\n\nSay we want to produce the average of all numbers in an array:\n\n```javascript\nvar numbers = [300, 43, 888, 2];\n\nvar average = numbers.reduce((total, amount, index, array) => {\n  total += amount;\n  if( index === array.length - 1) { \n    return total / array.length;\n  }else { \n    return total;\n  }\n});\n\naverage;\n\n// 308.25\n```\n\n## Find the first element that satisfies a function\n\nWe use the `find()` method:\n\n```javascript\nvar numbers = [10, 20, 30, 40, 50];\n\nvar found = numbers.find(function(element) {\n  return element > 30;\n});\n\nfound;\n\n// 40 \n```\n\nSimilarly, we can use the `findIndex()` method to return the first index position, rather than the element itself:\n\n```javascript\nvar numbers = [10, 20, 30, 40, 50];\n\nvar found = numbers.findIndex(function(element) {\n  return element > 30;\n});\n\nfound;\n\n// 3\n```\n\n# Wrapping up\n\nAnd there you have it! We’ve reviewed many of the major array methods in JavaScript. We covered how to create and loop an array, how to add and remove elements, how to manipulate arrays and how to apply functions to array elements!\n\n## Related Posts:\n\n* [Understanding Variables, Scope and Hoisting](https://www.easeout.co/blog/2021-01-25-understanding-variables-scope-and-hoisting/)\n* [Working with Strings in JavaScript](easeout.co/blog/2020-11-23-working-with-strings-in-javascript/)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion/)",
  "title": "Mastering Arrays",
  "description": "Learn all about the array methods of JavaScript.",
  "short": "Learn all about the array methods of JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-mastering-arrays.png"
}