{
  "date": "Friday May 22nd, 2020",
  "dateshort": "May 22nd",
  "body": "In this tutorial, we’ll learn how to add a ton of flexibility to our layouts using Flexbox!\n\nWe use the *Flexible Box Module (*aka. Flexbox), to create responsive elements within containers that can be automatically arranged based on the screen size. It also has a number of properties that give us total control over how space is distributed between items on a page.\n\nOtherwise known as the “one dimensional” model, Flexbox is ideal for laying out elements in a single direction (either in a row or a column). The [CSS Grid Layout](https://www.easeout.co/blog/2020-05-29-the-css-grid-guide) is the “two dimensional” model which is better suited to laying out elements in both directions simultaneously. \n\nFlexbox gives us some very powerful features, which we’ll be exploring in this guide!\n\n## The Flexbox Layout\n\nHere we have a container (in pink), containing a number of elements (in yellow boxes):\n\n![Flexbox Layout](/images/uploads/flexbox-layout.png)\n\n**HTML:**\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>  \n  <div>4</div>\n  <div>5</div>\n  <div>6</div> \n</div>\n```\n\n**CSS:**\n\n```css\n* {\n  font-family: monospace;\n  text-align: center;\n  font-size: 44px;\n}\n.flex-container {\n  display: flex;\n  flex-wrap: nowrap;\n  background-color: pink;\n  border: 2px solid #000;\n}\n.flex-container > div {\n  width: 100px;\n  margin: 20px 15px;\n  padding: 10px;\n  line-height: 75px;\n  background-color: yellow;\n  border: 2px solid #000;\n}\n```\n\nThis is the code we’ll be working with throughout the guide. Let’s now break it down by examining the key properties!\n\n## The Container Element\n\nThe first step when using Flexbox is to define a flex container. We do this by setting the `display` property to *flex*, like so:\n\n```css\n.flex-container {\n  display: flex;\n}\n```\n\nWe now have a number of flex container properties available:\n\n* `flex-direction`\n* `flex-wrap`\n* `flex-flow`\n* `justify-content`\n* `align-items`\n* `align-content`\n\nSetting the container also enables a context for all its direct children (known as flex items). More on this later. For now, let’s focus on the flex container properties!\n\n### flex-direction\n\nThe `flex-direction` property defines the main-axis, thus defining the direction in which items are placed.\n\nFlex items lay either horizontally with *row* or vertically with *column*.\n\nUse the *row* value to place items in horizontal order (from left to right):\n\n![Flexbox Elements](/images/uploads/flexbox-elements.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-direction: row;\n}\n```\n\nThe order can be reversed with *row-reverse* (items will be from right to left):\n\n![Flexbox Layout Row Reverse](/images/uploads/flexbox-row-reverse.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-direction: row-reverse;\n}\n```\n\nTo place our items vertically (from top to bottom), we use the *column* value:\n\n![Flexbox Layout Column Direction](/images/uploads/flexbox-direction-column.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-direction: column;\n}\n```\n\nAnd *column-reverse* will reverse the order (from bottom to top):\n\n![Flexbox Layout Column Reverse Direction](/images/uploads/flexbox-direction-column-reverse.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-direction: column-reverse;\n}\n```\n\n### flex-wrap\n\nThe `flex-wrap` property lets us choose whether our items should wrap or not.\n\nBy default, flex items will always try to fit on one line:\n\n![Flexbox Layout nowrap](/images/uploads/flexbox-nowrap.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: nowrap;\n}\n```\n\nNote that as it’s the default, *nowrap* doesn’t need to be set. Our flex items will not wrap.\n\nWhen we set the *wrap* value, our flex items will wrap if necessary:\n\n![Flexbox Layout Row Wrap](/images/uploads/flexbox-row-wrap.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n}\n```\n\nWe can also use *wrap-reverse* to reverse the order:\n\n![Flexbox Layout Wrap Reverse](/images/uploads/flexbox-wrap-reverse.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap-reverse;\n}\n```\n\n### flex-flow\n\nThe `flex-flow` property is a shorthand for the `flex-direction` and `flex-wrap` properties. The default value is `row nowrap`.\n\n![Flexbox Layout Row Wrap](/images/uploads/flexbox-row-wrap.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-flow: row wrap;\n}\n```\n\n### justify-content\n\nThe `justify-content` property defines the alignment of flex items on the main axis:\n\n![Flexbox Layout Justify Content Center](/images/uploads/flexbox-justify-content.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: center;\n}\n```\n\nThat’s how simple it is to center our flex items!\n\nWe can also use *flex-start* to place our items at the beginning of the container (this is the default):\n\n![Flexbox Layout Justify Content Start](/images/uploads/flexbox-justify-content-start.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: flex-start;\n}\n```\n\nTo place our items at the end, use *flex-end:*\n\n![Flexbox Layout Justify Content End](/images/uploads/flexbox-justify-content-end.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: flex-end;\n}\n```\n\nUse *space-around* to display flex items with space before, between, and after:\n\n![Flexbox Layout Justify Content Space Around](/images/uploads/flexbox-space-around.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: space-around;\n}\n```\n\nWhich differs from *space-between* which distributes space between our flex items:\n\n![Flexbox Layout Justify Content Space Between](/images/uploads/flexbox-space-between.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: space-between;\n}\n```\n\n### align-items\n\nThe `align-items` property defines how items are laid out along the cross axis.\n\nI’ve increased the height of the container in our demo code to 250px, to better show the effects.\n\nTo align items in the middle of the container, we use *center*:\n\n![Flexbox Layout Align Items Center](/images/uploads/flexbox-align-items.png)\n\n```css\n.flex-container {\n  display: flex;\n  align-items: center;\n}\n```\n\nTo place at the top, use *flex-start:*\n\n![Flexbox Layout Align Items Start](/images/uploads/flexbox-align-items-start.png)\n\n```css\n.flex-container {\n  display: flex;\n  align-items: flex-start;\n}\n```\n\nOr use *flex-end* to place at bottom of the container:\n\n![Flexbox Layout Align Items End](/images/uploads/flexbox-align-items-end.png)\n\n```css\n.flex-container {\n  display: flex;\n  align-items: flex-end;\n}\n```\n\nThe default value of *stretch* will stretch our items to fill the container:\n\n![Flexbox Layout Align Items Stretch](/images/uploads/flexbox-align-items-stretch.png)\n\n```css\n.flex-container {\n  display: flex;\n  align-items: stretch;\n}\n```\n\nThe *baseline* value will align items according to their baselines (I’ve used alternating font-size values for illustration):\n\n![Flexbox Layout Align Items Baseline](/images/uploads/flexbox-align-items-baseline.png)\n\n```css\n.flex-container {\n  display: flex;\n  align-items: baseline;\n}\n```\n\n### align-content\n\nThe `align-content` property is used to align the flex containers’ lines.\n\nIn these examples, the demo container height has been increased to 350px and the `flex-wrap` property to is set to *wrap*, to better illustrate how `align-content` works.\n\n**Note:** this property has no effect when there is only one line of flex items!\n\nSetting *space-between* will display each flex line with equal space between them:\n\n![Flexbox Layout Align Content Space Between](/images/uploads/flexbox-align-content-space-between.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-between;\n}\n```\n\nThe *space-around* value will distribute space before, between, and after each flex line:\n\n![Flexbox Layout Align Content Space Around](/images/uploads/flexbox-align-content-space-around.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-around;\n}\n```\n\nThe default *stretch* value stretches the flex lines to fill any remaining space:\n\n![Flexbox Layout Align Content Stretch](/images/uploads/flexbox-align-content-stretch.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: stretch;\n}\n```\n\nWe can use *center* to display the flex lines in the middle of the container:\n\n![Flexbox Layout Align Content Center](/images/uploads/flexbox-align-content-center.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: center;\n}\n```\n\nOr *flex-start* to position at the start of the container:\n\n![Flexbox Layout Align Content Start](/images/uploads/flexbox-align-content-start.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-start;\n}\n```\n\nAnd finally *flex-end* to position our lines at the end of the container:\n\n![Flexbox Layout Align Content End](/images/uploads/flexbox-align-content-end.png)\n\n```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-end;\n}\n```\n\n### How to achieve perfect centering\n\nIt’s quite simple with Flexbox! Just ensure both `justify-content` and `align-items` are set to *center:*\n\n![Flexbox Layout Perfect Centering](/images/uploads/flexbox-centering.png)\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n## Child Elements (Flex items)\n\nNow we’ll take a look the set of properties we can apply to child elements (otherwise known as our flex items).\n\nAny direct child elements of a flex container will automatically become flex items.\n\n![Flexbox Layout Child Items](/images/uploads/flexbox-child-items.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n</div>\n```\n\nSo the four yellow boxes are our flex items, as they’re direct children of `flex-container`.\n\nThe flex item properties are:\n\n* `order`\n* `flex-grow`\n* `flex-shrink`\n* `flex-basis`\n* `align-self`\n* `flex`\n\n### order\n\nThe `order` property controls the order in which flex items appear in the flex container.\n\nThe value must be a number, like so:\n\n![Flexbox Layout Child Items Order](/images/uploads/flexbox-item-order.png)\n\n```css\n<div class=\"flex-container\">\n  <div style=\"order: 4\">1</div>\n  <div style=\"order: 1\">2</div>\n  <div style=\"order: 3\">3</div>\n  <div style=\"order: 2\">4</div>\n</div>\n```\n\n### flex-grow\n\nThe `flex-grow` property gives a flex item the ability to grow. It defines the amount of available space that the item should take up, relative to the rest of the flex items.\n\nThe value must be a number.\n\nIf all items have `flex-grow` set to 1, the remaining space in the container will be distributed equally to each flex item.\n\nIf one of the children has a value of 2, the remaining space would (attempt to) take up double the space of the others:\n\n![Flexbox Layout Child Items Grow](/images/uploads/flexbox-item-grow.png)\n\n```html\n<div class=\"flex-container\">\n  <div style=\"flex-grow: 1\">1</div>\n  <div style=\"flex-grow: 2\">2</div>\n  <div style=\"flex-grow: 1\">3</div>\n  <div style=\"flex-grow: 1\">4</div>\n</div>\n```\n\n### flex-shrink\n\nThe `flex-shrink` property defines the ability for a flex item to shrink relative to the rest of the flex items.\n\nFor example, we might not want the second flex item to shrink as much as the others:\n\n![Flexbox Layout Child Items Shrink](/images/uploads/flexbox-item-shrink.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div style=\"flex-shrink: 0\">2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n  <div>7</div>\n  <div>8</div>\n</div>\n```\n\n### flex-basis\n\nThe `flex-basis` property defines the default size of an element before any remaining space is distributed.\n\nLet’s set the initial length of the third item to 300 pixels:\n\n![Flexbox Layout Child Items Basis](/images/uploads/flexbox-item-basis.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"flex-basis: 300px\">3</div>\n  <div>4</div>\n</div>\n```\n\n### align-self\n\nThe `align-self` property allows the default alignment (the one specified by `align-items`) to be overridden for individual flex items.\n\nIn these examples we’ll use a 200 pixels high container, to better illustrate the `align-self` property.\n\nLet’s align the third flex item in the middle of the container (the others are defaulting to *stretch*:\n\n![Flexbox Layout Align Self](/images/uploads/flexbox-align-self.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"align-self: center\">3</div>\n  <div>4</div>\n</div>\n```\n\nAnd let’s align the second flex item with the bottom, and the third flex item with the top:\n\n![Flexbox Layout Align Self Multiple](/images/uploads/flexbox-align-self-multiple.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div style=\"align-self: flex-end\">2</div>\n  <div style=\"align-self: flex-start\">3</div>\n  <div>4</div>\n</div>\n```\n\n### flex (shorthand)\n\nThe `flex` property is shorthand for `flex-grow`, `flex-shrink`, and `flex-basis` combined. The `flex-shrink` and `flex-basis` properties are optional, with the default being `0 1 auto`.\n\nFor example, let’s make the second flex item not growable (`0`), not shrinkable (`0`), and give it an initial length of 300px:\n\n![Flexbox Layout Shorthand](/images/uploads/flexbox-shorthand.png)\n\n```html\n<div class=\"flex-container\">\n  <div>1</div>\n  <div style=\"flex: 0 0 300px\">2</div>\n  <div>3</div>\n  <div>4</div>\n</div>\n```\n\n## Related Posts:\n\n* [The CSS Grid Guide](https://www.easeout.co/blog/2020-05-29-the-css-grid-guide)\n* [CSS Positioning](https://www.easeout.co/blog/2020-05-15-css-positioning)\n* [The Display Property](https://www.easeout.co/blog/2020-05-12-css-display-property)",
  "title": "The Flexbox Guide",
  "description": "The complete guide to the flexbox layout method.",
  "short": "The complete guide to the flexbox layout method.",
  "category": "CSS",
  "thumbnail": "/images/uploads/css-flexbox-min.png"
}