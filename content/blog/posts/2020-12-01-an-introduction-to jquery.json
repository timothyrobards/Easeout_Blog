{
  "date": "Tuesday December 1st, 2020",
  "dateshort": "December 1st",
  "body": "Does jQuery have a place today? It has of course, largely fallen out of favor in recent years. However, don’t let that discourage you from taking some time to learn about it. We’ll be taking a brief look at the state of jQuery in this article. And for those interested in learning a bit about it, we’ll run through the basics — including element manipulation, events, and effects. And we’ll finish up with some useful examples showing jQuery in action.\n\n## What is jQuery?\n\njQuery is a DOM manipulation library that essentially helps us do many JavaScript tasks much faster and more simply.\n\nIt comes with a number of useful methods for:\n\n* Selecting/Manipulating/Creating Elements\n* Adding Event Listeners\n* Animating Elements\n* Adding Effects\n* Making HTTP Requests (AJAX)\n\n### Why Use jQuery?\n\n* It’s easy to learn and use\n* Makes DOM manipulation a breeze\n* Has cross-browser support\n* Working with AJAX is easy\n* Lots of knowledge out there if you need help\n\n### Why Should I Not Use jQuery?\n\n* It doesn’t do anything you can’t do on your own (see [You Might Not Need jQuery](http://youmightnotneedjquery.com/))\n* It’s an unnecessary dependency\n* Reduces performance\n* It’s old and everyone has moved to React/Angular/Vue\n\n![jQuery use comparison](/images/uploads/jquery-use.png)\n\n## If you don’t already know jQuery, is it worth learning today?\n\nIn my opinion, jQuery shouldn’t really be used on new projects, for those we should be looking at modern frameworks such as React, Angular or Vue. However that doesn’t mean jQuery should be completely forgotten about just yet.\n\nSome projects may be using libraries such as Bootstrap, which for the time being has a dependency on jQuery. As do some ready-made templates. Some developer teams are comfortable working with jQuery and that’s fine too.\n\nIn these cases, jQuery remains relevant. Also, if you’re looking to secure your first developer job, many companies still use jQuery. So knowing a bit about it would be a good idea!\n\n## Using jQuery\n\nSo assuming you want to learn some jQuery, let’s get started!\n\n### **Create a demo project**\n\nWe’ll begin by creating a demo project. Add a `style.css` in a `css/`directory, a `scripts.js` in a `js/` directory, and a main `index.html` in the root directory of the project.\n\n```\njquery-demo/\n├── css/\n|   └── style.css\n├── js/\n|   └── scripts.js\n└── index.html\n```\n\n### Setting up jQuery\n\njQuery is simply a JavaScript file that you’ll link to in your HTML. There are two ways to include it in your project:\n\n* [Download](https://jquery.com/download/) a local copy\n* Link to the file via Content Delivery Network (CDN)\n\nIf you choose to download a local copy, link to it with the following:\n\n```\n<script type=\"text/javascript\" src=\"js/jquery-3.3.1.js\"</script>\n```\n\n*Note: the version number will likely change but that’s fine!*\n\nIf you choose the CDN option, use this code instead:\n\n```\n<script src=\"https://code.jquery.com/jquery-3.3.1.js\"</script>\n```\n\nLet's open our `index.html`, and copy in the following code:\n\n*Note: We will be working with these elements* `<h1>, <ul>, <img>, <div>`*, later on in this article — so copy it all in now to save time!*\n\n```html\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <title>jQuery Demo</title>\n  <link rel=\"stylesheet\" href=\"css/style.css\">\n</head>\n\n<body>\n  <h1 id=\"demo\"></h1>\n  <ul>\n    <li>First</li>\n    <li>Second</li>\n    <li>Third</li> \n  </ul>\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/d/d3/Logo_jQuery.svg\" width=\"300px\">\n<div>\n    <button id=\"submit\">Click me</button>\n    <input type=\"text\">\n</div>\n  <script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n  <script src=\"js/scripts.js\" />\n</body>\n</html>\n```\n\nAnd make sure you place the script tags just before the`</body>` tag, ensuring `scripts.js` is placed *after* your jQuery script — or it won’t work!\n\nNow open up `scripts.js` and add the following:\n\n```\n$(document).ready(function() {\n    // All your jQuery will go here!\n});\n```\n\nWe do this as in order to manipulate a page with jQuery, we need to ensure the document is “ready” first. All the code we write will need to be wrapped in this code (it’s best practice).\n\nLet's see it in action with a quick demo! Add the following line to your `scripts.js`\n\n```\n$(document).ready(function() {\n    $(\"#demo\").html(\"This text is brought to you by jQuery!\");\n});\n```\n\nIf you open up `index.html` you'll see the text has been added to the `h1` element via jQuery!\n\n### Selecting with jQuery\n\nTo begin, we call jQuery with the dollar sign`$`. We access the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction#What_is_the_DOM) using mostly CSS syntax, and apply an action using a method. The basic syntax is like so:\n\n```\n$(\"selector\").method();\n```\n\nSelectors are essentially how we tell jQuery which elements we want to work on. Let's look at a few of the ways we can select elements (see the [complete list](https://api.jquery.com/category/selectors/)).\n\n```\n// Select all image tags\n$(\"img\")\n\n// Select all elements with the 'social' class\n$(\".social\")\n\n// Select all elements with the 'social' id\n$(\"#social\")\n\n// Select all <a> tags inside of <li>'s\n$(\"li a\")\n\n// Selects the current element being used within a function\n$(this)\n```\n\nNow go and have a play around in the browser! Open your `index.html` and practice selecting elements in your browser console. For example, running `$(“h1”)` will display your `<h1>.` You could even change its color with `$(“h1”).css(\"color\", \"yellow\");` See the full list of CSS manipulations [here](http://api.jquery.com/css/).\n\n## jQuery Methods\n\nLet's now take a look at a few of the more common [jQuery methods](https://api.jquery.com/) in action.\n\n**text()**\n\n> Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.\n\nRunning `$(“h1”).text()` in your console will output `“This text is brought to you by jQuery!”` which is the text content of our `<h1>`. We can change this text by passing in new text, such as`$(“h1”).text(\"Time for a new heading!\")`\n\n**html()**\n\n> Get the HTML content of the first element in the set of matched elements or the set of HTML contents of every matched element.\n\nLet's ask for the HTML of our `<ul>` element with `$(“ul”).html()`, this will retrieve our inner HTML: `<li>First</li> <li>Second</li> <li>Third</li>.`And we can change it by passing in the new HTML, for example `$(“ul”).html(\"<li>Your</li> <li>New</li> <li>List items</li>\")`\n\n**attr()**\n\n> Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.\n\nLet's work with the `<img>` in our HTML. We can retrieve its source with `$(‘img’).attr(“src”);` and we can replace it with a new image, with `$(‘img’).attr(“src”,“https://upload.wikimedia.org/wikipedia/commons/1/1c/Logo_Rad.jpg\");`\n\n#### Class Manipulation\n\nThe next 3 methods will be looking at how we manipulate classes on our page. Open up the `style.css` we created earlier and add the following:\n\n```\n.green {\n  color: green;\n}\n\n.red {\n  color: red;\n}\n```\n\n**addClass()**\n\n> Adds the specified class(es) to each element in the set of matched elements.\n\nWe can add our green class to the first item in our list with `$(“li:first-of-type”).addClass(“green”);` If we now inspect our element we can see the class has been added to our HTML. If we wanted to add the class to all li’s, we’d simply say `$(“li”).addClass(“green”);`\n\n**removeClass()**\n\n> Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\n\nWe can easily remove the class we just added to our first li with `$(“li:first-of-type”).removeClass(“green”);`\n\n**toggleClass()**\n\n> Add or remove one or more classes from each element in the set of matched elements, depending on either the classes presence or the value of the state argument.\n\nWe can toggle a class like so `$(“li”).toggleClass(“red”);`Each time we run this code the class will toggle on and off, adding and then removing the styles we’ve included.\n\n### jQuery Event Methods\n\nNext, we're going to take a look at a few examples of events — or, how we can make things interactive! See the complete list of event methods [here](https://api.jquery.com/category/events/).\n\n**click()**\n\n> Bind an event handler to the “click” JavaScript event, or trigger that event on an element.\n\nWe can add a click event to our `<button id=\"submit\">` like so:\n\n```\n$(\"#submit\").click(function() {\n  alert(\"You clicked me!\");\n});\n```\n\nWhen we click on the button we now get an alert stating “You clicked me!”.\n\n**keypress()**\n\n> Bind an event handler to the “keypress” JavaScript event, or trigger that event on an element.\n\nWe can log keys which are pressed using this method. This is very handy for detecting when enter is pressed in an input field, for example:\n\n```\n$(\"input\").keypress(function(event){\n  console.log(event);\n});\n```\n\nWhat we’re doing here is listening for a keypress using the `event` and logging it to the console. Type any key into the input box & check out the event that it logs. You’ll see `charCode`, `keyCode` and `which` all have a unique number, which corresponds to the key you pressed. You can see the full list of character codes [here](https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes). Let’s use `which` to detect when *enter* (its code is 13) is pressed:\n\n```\n$(\"input\").keypress(function(event){\n  if(event.which == 13){\n    alert(\"You pressed enter!\");\n  }\n});\n```\n\nNow the alert event will fire when we press *enter* in our input box!\n\n**on()**\n\n> Attach an event handler function for one or more events to the selected elements.\n\nThe *on* method works similarly to the pure js `addEventListener`, it lets you specify the type of event to listen for. It’s far and away the most used jQuery event method!\n\nLet's look at an example of *on* using the *click* event:\n\n```\n$(\"li\").on(\"click\", function(){\n  $(this).css(\"color\", \"green\");\n});\n```\n\nNow when you click on any of the li’s it will change to green. We use `$(this)`as if we used `$(\"li\")` it would change ALL li’s to green when one was selected!\n\nLet's see another example, this time using `mouseenter` & `mouseleave`, remember you can use `on()` with any [event](https://api.jquery.com/category/events/).\n\n```\n$(\"h1\").on(\"mouseenter\", function(){\n  $(this).css(\"text-decoration\", \"underline\");\n});\n\n$(\"h1\").on(\"mouseleave\", function(){\n  $(this).css(\"text-decoration\", \"none\");\n});\n```\n\nNow when your mouse enters `<h1>`, it’ll underline. And when it leaves it’ll remove the underline.\n\n`on(‘click’)` **or** `click()` **?**\n\nThey will both get the job done, however there is one key difference.\n\n* `click()` only adds listeners to existing elements\n* `on(‘click’)` is much more dynamic, it’ll add listeners for all potential future elements\n\n## jQuery Effects\n\nEffects work with events by allowing you to add animations and otherwise manipulate elements on the page. See the complete list of effects [here](https://api.jquery.com/category/effects/).\n\n**fadeOut()**\n\n> Hide the matched elements by fading them to transparent.\n\nLet's use the following code to fade out our image:\n\n```\n$('img').on(\"click\", function(){\n  $(this).fadeOut(1000, function(){\n    $(this).remove;\n  });\n});\n```\n\nWhat is happening here? We have a callback function on our `img` which will use the `fadeOut` effect with a delay of 1000 (1 second). We then nest another callback function to `remove` the element once the fade-out has completed.\n\n**slideUp()**\n\n> Hide the matched elements with a sliding motion.\n\n```\n$(\"button\").click(function() {\n  $(\"img\").slideUp(\"slow\");\n});\n```\nNow when we click on the button on our page, the image will ‘slide up’ out of view. The reverse of course is `slideDown()`, whilst `slideToggle()` will toggle between states.\n\n## jQuery Demos\n\nHere are a few demos I’ve created showing jQuery in action:\n\n### Accordion\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Accordion\" src=\"https://codepen.io/trobes/embed/PXyOMz?height=265&theme-id=light&default-tab=html,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/PXyOMz'>Simple jQuery Accordion</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n### Drop down\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Dropdown\" src=\"https://codepen.io/trobes/embed/yGQLvM?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/yGQLvM'>Simple jQuery Dropdown</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n### Image Slider\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Image Slider\" src=\"https://codepen.io/trobes/embed/WLYbMd?height=265&theme-id=light&default-tab=html,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/WLYbMd'>Simple jQuery Image Slider</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n### Modal\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Modal\" src=\"https://codepen.io/trobes/embed/Kbrpjw?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/Kbrpjw'>Simple jQuery Modal</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n### Smooth Scroll\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Smooth Scroll\" src=\"https://codepen.io/trobes/embed/yGQYGX?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/yGQYGX'>Simple jQuery Smooth Scroll</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n### Tabs\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"Simple jQuery Tabs\" src=\"https://codepen.io/trobes/embed/XoyNrv?height=265&theme-id=light&default-tab=html,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/trobes/pen/XoyNrv'>Simple jQuery Tabs</a> by Timothy Robards\r\n  (<a href='https://codepen.io/trobes'>@trobes</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\n\n## Summing up\nAnd there you go! We've looked at how to select and manipulate elements with jQuery, and how we can work with events and effects to enhance user experience. We've also looked at a number of examples of jQuery in action - showing how simple it can be to get up and running, writing your own code!\n\n## Related Posts:\n\n* [JavaScript Syntax & Structure](https://www.easeout.co/blog/2020-10-19-javascript-syntax-structure)\n* [Understanding JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)\n* [The Basics of JavaScript Strings](https://www.easeout.co/blog/2020-11-16-the-basics-of-javascript-strings)",
  "title": "An Introduction to jQuery",
  "description": "A review of the core fundamentals of jQuery.",
  "short": "A review of the core fundamentals of jQuery.",
  "category": "JavaScript"
}