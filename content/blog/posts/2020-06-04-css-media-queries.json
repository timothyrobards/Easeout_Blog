{
  "date": "Thursday June 4th, 2020",
  "dateshort": "June 4th",
  "body": "*Media queries* are a CSS technique that we can utilize when making our pages responsive.\n\nWe use `@media` to create a CSS rule that only executes **if** a specified condition is true.\n\nFor example, if the device browser window is 600px or smaller, set the `background-color` to orange:\n\n```css\n@media only screen and (max-width: 600px) {\n  body {\n    background-color: orange;\n  }\n}\n```\n\nAnd just like that we have a rule targeting small devices!\n\n## Using media queries\n\nWe can media queries to check things, such as:\n\n* width and height of the viewport\n* width and height of the device\n* screen orientation (is the device landscape or portrait?)\n* screen resolution\n\nBy being able to check this information, we’re able to deliver a better experience for our users. We can create rules that display the layout in a way that best suits the device being used.\n\nTo understand the anatomy of a media query, let’s look at our options with media types, media features & logical operators.\n\n### Media types\n\n*Media types* allow us load CSS based on the device type.\n\nThe following **media types** are available:\n\n* `all` for all media devices\n* `print` used for printers\n* `screen` used for displaying on a screen (computers, tablets, phones, etc)\n* `speech` used for screen readers\n\n`screen` is the most commonly used type.\n\n### Media features\n\n*Media features* describe specific characteristics of the users’ device.\n\nThe media query will apply when it evaluates as ‘true’.\n\nHere’s the list of features we can test for:\n\n* `width`\n* `height`\n* `device-width`\n* `device-height`\n* `aspect-ratio`\n* `device-aspect-ratio`\n* `resolution`\n* `orientation`\n* `scan`\n* `grid`\n* `color`\n* `color-index`\n* `monochrome`\n\nNote that each has a corresponding `min-*` and `max-*` value. And all are optional!\n\n### Logical operators\n\nWe use the *logical operators* `not`, `and`, and `only` to create a more complex media query.\n\n#### and\n\nWe use `and` to combine multiple media features together into a single media query. Each feature must be true for the query to return true. It’s also used for joining media features with media types.\n\n#### not\n\nThe `not` operator is used to negate a media query. It will be true if the query would otherwise return false. When using `not` you *must also* specify a media type.\n\n#### only\n\nThe `only` operator is used to apply a style only if an entire query matches, It’s useful for preventing older browsers from applying selected styles. When using `only`, you *must also* specify a media type.\n\n#### , (comma)\n\nWe can also combine multiple media queries into a single rule by separating them with commas. If any of the queries in the list are true, the entire media statement returns true. So it can be thought of as acting like an `or` operator.\n\n### Media query syntax\n\nSo armed with this knowledge, lets revisit the media query syntax!\n\nA media query consists of a media type (in this case `screen`) and can contain one or a number of expressions (here we use `max-width`):\n\n```css\n@media screen and (max-width: 600px) {\n  /* ... */\n}\n```\n\nThe query will return true if the media type matches the type of device the page is being displayed on & if all expressions in the media query are true.\n\nWhen a media query returns true, the corresponding style rules will be applied!\n\nLet’s look at a more complex example..\n\nHere the rule applies when the user has a `screen` device (a computer, tablet or phone), the width is between 600 and 768 pixels, and the orientation is landscape:\n\n```css\n@media screen and (max-width: 768px) and (min-width: 600px) and (orientation: landscape) {\n  /* ... */\n}\n```\n\n### Typical device breakpoints\n\nThere are tons of screens and devices with different heights and widths, so it’s quite difficult to create an exact breakpoint for each device.\n\nOften to simply the process of coding responsive layouts, we create media queries targeting devices based screen size ranges:\n\n```css\n/* Extra small devices (phones, less than 600px wide) */\n@media only screen and (max-width: 600px) {...}\n/* Small devices (portrait tablets & large phones, 600px and up) */\n@media only screen and (min-width: 600px) {...}\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {...}\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {...}\n/* Extra large devices (large laptops & desktops, 1200px and up) */\n@media only screen and (min-width: 1200px) {...}\n```\n\nA better practice however, is to create your media queries in accordance with the needs of your content. This way you’ll reduce the likelihood of having your layout break, on devices you may not have considered.\n\n\n\n## Related Posts:\n\n* [Feature Queries](https://www.easeout.co/blog/2020-06-08-css-feature-queries)\n* [CSS Variables](https://www.easeout.co/blog/2020-06-03-css-variables)\n* [CSS Grid](https://www.easeout.co/blog/2020-05-29-the-css-grid-guide)\n* [Flexbox](https://www.easeout.co/blog/2020-05-22-the-flexbox-guide)",
  "title": "CSS Media Queries",
  "description": "How to build responsive web pages with media queries.",
  "short": "How to build responsive web pages with media queries.",
  "category": "CSS"
}