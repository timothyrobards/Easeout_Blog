{
  "date": "Thursday September 3rd, 2020",
  "dateshort": "September 3rd",
  "title": "Getting started with BEM",
  "short": "Learn all about the BEM methodology.",
  "category": "CSS",
  "description": "Learn all about the BEM methodology.",
  "body": "If you’re unfamiliar with BEM, its simple to get started! It’ll add a ton of structure, scalability & robustness to an otherwise un-BEM’d stylesheet.\n\n## What is BEM?\n\n> BEM — **B**lock **E**lement **M**odifier is a methodology that helps you to create reusable components and code sharing in front-end development — [getbem.com](http://getbem.com/)\n\nIf you’ve ever seen class names like `form__submit--disabled` that’s BEM in action. The use of this methodology allows us to create a more consistent coding structure in both our HTML and CSS/Sass files.\n\n## How do I BEM?\n\nAll you need to do is name your classes in accordance with the BEM naming convention. This article provides a quick run down..\n\n## Block\n\nThe *block* is the container or context where the elements are situated. It should be able to stand alone and still make sense in the overall structure of your code. A typical layout often includes a header, sidebar, main content area & footer, each of these would be considered blocks:\n\n![Image for post](/images/uploads/bem-blocks.png)\n\nSo blocks are standalone elements that form the root of your code structure, in this example we have `.header, .sidebar, .main` and `.footer`. They have no dependencies on any other blocks/elements on the page.\n\nContained within each block are elements..\n\n## Element\n\n*Elements* are parts of a block which have no semantic meaning outside of the block. As each element is semantically tied to its block. The syntax is as follows:\n\n`.block__element{}`\n\nElements are written using the block name, connected by two underscores.\n\nSo for example, our header might contain a logo, nav bar, and search box. These element classes would be named as follows:\n\n`.header__logo{}`\n\n`.header__navbar{}`\n\n`.header__searchbox{}`\n\nAlready you can see the beginnings of a more readable code structure. The importance of convention increases dramatically when working on larger projects, especially when working collaboratively.\n\n## Modifiers\n\nA *modifier* is a flag on a block or an element which is used to change appearance, behavior or state. It’s where the one of the great strengths of BEM shines through; modularity. By using modifiers, you can extend a block or element to make it repeatable. This is a big win as it facilitates code reuse and component driven coding. The syntax is like so:\n\n`.block--modifier{}`\n\n`.block__element--modifier{}`\n\nA double hyphen `--` is added after the block or element followed by the modifier name.\n\nSo take our `.header__navbar{}` element. We may wish to create a modifier for a secondary navbar, which extends the element with additional styles, like so..\n\n`.header__navbar--secondary{}`\n\nIf your styles are basically the same, using Sass you can simply extend from the parent element and then add the modifiers as required. See the below example, which changes the background color of the secondary navbar..\n\n```css\n.header__navbar {\n  list-style-type: none;\n  background: #ff0000;\n  padding: 1rem 0;\n  text-transform: uppercase; \n}\n.header__navbar--secondary {\n  @extend .header__navbar;\n  background: #ff4500;\n}\n```\n\nAnd that’s it! The modifier styles will override the parent. Your code will be much more concise and easier to work with.\n\n## Wrapping up\n\nBEM is a simple way to add structure and hierarchy to your front-end development. I hope this brief guide is enough to get you up and running! As always, there’s much more to explore. Check out the following:\n\n* [Bem.info: Methodology](https://en.bem.info/methodology/)\n* [BEM by example](https://seesparkbox.com/foundry/bem_by_example)\n* [BEM Homepage](http://bem.info/)\n\n## Related Posts:\n\n* [Basic Selectors](https://www.easeout.co/blog/2020-03-10-css-basic-selectors)\n* [The Cascade, Inheritance & Specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity)\n* [Structuring your SASS projects](https://www.easeout.co/blog/2020-08-25-structuring-your-sass-projects)",
  "thumbnail": "/images/uploads/bem.png"
}