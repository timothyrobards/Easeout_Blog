{
  "date": "Monday February 15th, 2021",
  "dateshort": "February 15th",
  "title": "React Components & Props",
  "short": "Learn about components and props in React.",
  "category": "React",
  "description": "Learn about components and props in React.",
  "body": "**Components** in React are independent, reusable pieces of UI. A typical web page may consist of a navbar, content area & footer. In React, we create these areas as components (which in turn may consist of other components!). It saves on code duplication & as we’ll see, allows for an immense amount of flexibility.\n\nAnother way to think of components is like JavaScript functions. Instead of receiving arguments, they receive “props”, and then return React elements to build what we see on the screen!\n\n## Components\n\nIn fact, in React — everything is a component! Even standard HTML tags are components, they’re built-in and added by default.\n\nLet’s take a look at an example:\n\n```\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\n\n\r\nReactDOM.render(<h1>I'm a component!</h1>, \ndocument.getElementById('myapp'))\n```\n\nHere we’ve used JSX to insert`<h1>I'm a component!</h1>` into an element with id of `myapp`. Our `h1` is considered a component, courtesy of `React.DOM`, and in fact so are all HTML tags. You can check them out by typing `React.DOM` into your browser console.\n\n## Building custom components\n\nThis is great, but how do we build our own components? This is where React exceeds, it gives us the ability to build UI’s by composing our own custom components.\n\nWe can define components in 2 ways, let’s take a look at each now:\n\n### **Function components**\n\nFunction components are really just JavaScript functions:\n\n```\nfunction Greeting(props) {\r\n  return <h1>Hello, {props.username}!</h1>;\r\n}\n```\n\nWhat makes this function a React component, is that it accepts “props” (or properties) as an argument with data, and then it returns a React element.\n\n### Class components\n\nES6 Classes can also be used to create components:\n\n```\nclass Greeting extends React.Component {\r\n  render() {\r\n    return <h1>Hello, {this.props.username}!</h1>;\r\n  }\r\n}\n```\n\nBoth our above code examples are equivalent — and perfectly valid ways to create components.\n\nUntil recently in the React world, class components were used more frequently — as class components allowed components to be defined with their own state (I’ll be writing about state in my next article!).\n\nHowever, with the advent of React Hooks, function components are now much more powerful than before, and we may see this trend switch back.\n\nHooks are outside the scope of this article! So let's continue on with components & props..\n\n### Rendering components\n\nWe can render our elements, which represent DOM tags:\n\n```\nconst element = <div />;\n```\n\nAnd we can also render our elements with user-defined components:\n\n```\nconst element = <Greet username=\"Bruce\" />;\n```\n\nWhen an element contains a user-defined component, it will pass the JSX attributes to the component as an object. In React this object is what we call “props”.\n\n## Props\n\nSo “props” are how our components get their properties.\n\nLet’s see this in action:\n\n```\nfunction Greeting(props) {\r\n  return <h1>Hello, {props.username}!</h1>;\r\n}\n\n\r\nconst element = <Greet username=\"Bruce\" />;\n\n\r\nReactDOM.render(\r\n  element,\r\n  document.getElementById('root')\r\n);\n```\n\nThis code will render “Hello, Bruce!” on the page.\n\nWhat is happening here?\n\n* `ReactDOM.render()` is called with the `<Greet username=\"Bruce\" />` element.\n* React calls the `Greet` component with `{name: 'Bruce'}` as the props.\n* Our `Greet` component returns a `<h1>Hello, Bruce!</h1>` element as the result.\n* React DOM updates the DOM to match `<h1>Hello, Bruce!</h1>`.\n\n*Note:* Always start component names with a capital letter! Why? React treats components starting with lowercase letters as DOM tags.\n\n## Props in function components\n\nIt should be noted that when working with components that have multiple children (see below with `h1` and `p`), each child component gets its props from the parent.\n\nWhen using a function component, props are all that gets passed, they’re available by adding `props` as the function argument:\n\n```\nconst BlogPostInfo = props => {\r\n  return (\r\n    <div>\r\n      <h1>{props.title}</h1>\r\n      <p>{props.description}</p>\r\n    </div>\r\n  )\r\n}\n```\n\n## Props in class components\n\nIn a class component, props are passed by default. They’re accessible as `this.props` in a component instance.\n\n```\nimport React, { Component } from 'react'\n\n\r\nclass BlogPostInfo extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.props.title}</h1>\r\n        <p>{this.props.description}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\n```\n\nPassing props to child components is a great way to pass values around in your applications. Components either hold data (have state) or receive data through their props.\n\n## Extra credits…\n\nNow that we know how to use props with our components. Let’s take a look at some of the more common tasks we’re likely to encounter:\n\n### Prop defaults\n\nIf any values are missing when a component is initialized, we’ll need to provide a default. Defaults can be specified, like so:\n\n```\nBlogPostInfo.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string\r\n}\n\n\r\nBlogPostInfo.defaultProps = {\r\n  title: '',\r\n  description: ''\r\n}\n```\n\n### Passing props\n\nWhen we initialize a component, we pass in our props like so:\n\n```\nconst desc = 'My blog post description'\n\n\r\n\r\n<BlogPostInfo title=\"My blog post title\" description={desc} />\n```\n\nIf we are working with strings, we can pass in our prop as a string (as we have above with ‘title’. Otherwise, we use variables, as we have with the above description being set to `desc`.\n\n### The ‘children’ prop\n\nThe `children` prop is a little different from the norm. It contains the value of anything that is passed in the `body` of the component, for example:\n\n```\n<BlogPostInfo title=\"My blog post title\" description=\"{desc}\">\r\n  More words\r\n</BlogPostInfo>\n```\n\nIn this example, inside `BlogPostInfo` we could access \"More words\" via `this.props.children`.\n\n### Components in Components\n\nComponents can include other components in their output.\n\nIt’s perfectly fine to create a `MyApp` component, that renders `Greet` a number of times:\n\n```\nfunction Greet(props) {\r\n  return <h1>Hello, {props.username}!</h1>;\r\n}\n\n\r\nfunction MyApp() {\r\n  return (\r\n    <div>\r\n      <Greet name=\"Bruce\" />\r\n      <Greet name=\"Bethany\" />\r\n      <Greet name=\"Bilbo\" />\r\n    </div>\r\n  );\r\n}\n\n\r\nReactDOM.render(\r\n  <MyApp />,\r\n  document.getElementById('root')\r\n);\n```\n\n### Props are read-only!\n\nWhether your component is declared as a function or class component, it can never modify its own props. See the following example:\n\n```\nfunction sum(a, b) {\r\n  return a + b;\r\n}\n```\n\nThis is a “pure” function, as it doesn’t attempt to change its inputs, and will always return the same result for the same inputs.\n\nAn “impure” function is a function that changes its own input:\n\n```\nfunction withdraw(account, amount) {\r\n  account.total -= amount;\r\n}\n```\n\nIn React, this is a no-no! Every component must act like a pure function with respect to its prop.\n\nMy next article will be looking at “state” in React. With state, our components are able to change their output in response to triggers such as user actions or network responses — without being in violation of this rule.\n\n## Conclusion\n\nAnd there we go! We’ve covered the basics of building components, as well as seeing how they fit into the overall structure of our React apps. We’ve also seen how to use props to give properties to our components. And we’ve looked at some of the common tasks we’ll likely run into when working with components & props.\n\n## Related Posts:\n\n* [React Installation & Setup](https://www.easeout.co/blog/2020-09-27-react-installation-setup)\n* [React JSX & Rendering](https://www.easeout.co/blog/2020-10-07-react-jsx-and-rendering)",
  "thumbnail": "/images/uploads/react-components-props.png"
}