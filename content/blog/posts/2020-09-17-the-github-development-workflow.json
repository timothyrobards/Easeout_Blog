{
  "date": "Thursday September 17th, 2020",
  "dateshort": "September 17th",
  "title": "The GitHub Development Workflow",
  "short": "Learn the basic flow of development tasks using GitHub.",
  "category": "GIT",
  "description": "Learn the basic flow of development tasks using GitHub.",
  "body": "**GitHub** is a code hosting platform for version control and collaboration. It’s designed around Git, a system for tracking changes in software code. It lets you and others work together on projects from anywhere. In this article, we’ll take a look at the key concepts of the GitHub development workflow. Including working with repositories, branches, forks, commits, pull requests, and merging. Let’s get started!\n\n## What is version control?\n\n*Version control is a system that helps developers track and manage changes to a software projects' code*. As projects grow, the need for version control becomes vital — especially in a collaborative project. We can work safely by using what's known as **branching** and **merging**.\n\n**Branching** allows us to duplicate our source code (aka ‘the repository’), so we can safely make changes without affecting the entire project. Once the changes have been reviewed and approval is agreed upon, we **merge** our branch into the master to update our official code. If any bugs are identified— we have the option to revert back to our original code, as our changes have been tracked.\n\n## What is Git?\n\nGit and Github are not synonymous! Git is a specific open-source version control system created by [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds) in 2005. It’s the program that actually tracks your changes, and ensures the entire code-base is available on each developer's computer. GitHub however, is simply hosting your repositories (as well as providing some additional functionality).\n\n## The Fundamentals\n\nLet’s get started! If you haven’t signed up for a GitHub account, go ahead and [sign up here](https://github.com/join).\n\n### Creating a Repository\n\nA GitHub **repository** (or “repo”) can be thought of as the root folder for your project. It contains all your project files and gives you the ability to access each file's revision history. If you’re working in a team you can give other people access to your repository for project collaboration.\n\nLet's create our first repository! Make sure you're signed in to GitHub, then:\n\n1. In the upper-right corner, click the settings `+` icon & then New repository\n2. Give your repository a name\n3. Add a description if you like\n4. Choose between creating a public or private repository (either is fine)\n5. Select Initialize this repository with a README (eg. “My first repo!”)\n6. Click Create repository!\n7. Add files to your repository ~\n\n~ We’re only testing so it really doesn't matter what you add. Find an HTML file for example, and add it to your repository via the Upload files button.\n\n### Creating an Issue\n\n**Issues** are how we track the tasks, enhancements, and bugs in our projects. They’re meant to be shared amongst your team to facilitate discussion for review as well as for managing task delegation. If you open an issue on a project managed by someone else, it’ll stay open until either you close it (for example if you figure out the problem) or if the repo owner closes it. When you create an issue, be sure to give a clear explanation of the task at hand. Let’s create an issue in our repository:\n\n1. In your repository, select the Issues tab\n2. Click the New Issue button\n3. Give your issue the title ‘Setup GitHub pages’\n4. Give a clear description e.g. ‘Need to setup GitHub Pages in this repository’\n5. Click Submit new issue\n\n### Assigning an Issue\n\nWe need to **assign** issues so our team members know who’s job it is to handle the task!\n\n* On the right side of the screen, under the “Assignees” section, click the settings icon and select yourself\n\nLet’s resolve our first issue! We want to setup GitHub pages. You can read about GitHub Pages [here](https://pages.github.com/). But for now, our focus on completing the task:\n\n1. Click on the Settings tab in your repository\n2. Scroll down to the “GitHub Pages” section\n3. From the “Source” drop-down, select master branch\n4. Click Save\n\n### Closing an Issue\n\nNow you’ve completed the task — you can go ahead and close it! You can delete an issue on GitHub, however closing it tells your team members that the task has been completed. To close:\n\n* Open up your completed issue and click Close issue\n\n## The GitHub Flow\n\nNow that we know how to work with issues, it’s time to look at the **GitHub Flow**. Simply put its a workflow where we can experiment with new ideas safely, without the risk of compromising our project. This is primarily achieved through the use of **branching**.\n\n![GitHub Flow Diagram](/images/uploads/github-flow.png)\n\nBy default, our project lives on the master branch — any changes to the master will update directly to our project (This can be dangerous is you haven’t properly reviewed your changes!).\n\nWhen we want to experiment with a new feature, or even fix an issue, we create a new **branch** on the project. The branch will initially be a duplicate of your master, now when you make changes —they’ll reflect only on the branch.\n\nWhile working on changes, you’ll **commit** the changes to your branch. When you’re satisfied that the changes are complete, its time to open a **pull request.** From here your team will discuss and further refine the project changes. Once the changes have been approved, the branch will be **merged** onto the **master branch**. Let’s go through an example of this process now!\n\n### Creating a Branch\n\n1. Open your repository and click the Code tab\n2. Click `Branch: master` in the drop-down\n3. In the field, enter a name for your branch (e.g. ‘development’)\n4. Click Create branch\n\nNow that you’ve created a branch, you can modify your project without changing the deployed `master` branch.\n\nA note on forks — A **fork** is different from a branch in that it allows you to **clone** another repo in your own account. It essentially allows you to start a new project based on a previous project.\n\n### Committing a file\n\nNow we can safely work within our branch, let’s create a file and make our first commit.\n\n1. Make an edit (anything! just add a simple comment to your code) to one of the files you had added to the repository earlier\n2. Give the commit a name and description\n3. Make sure your newly created (development) branch is selected\n4. Click Commit changes\n\nYou’ve made your first commit! The next step is to share the changes with your team via a pull request.\n\n### Opening a Pull Request\n\nA pull request is where we share our proposed project changes with our team — with the intent of discussing & revising them before applying the changes to the `master` branch.\n\n1. Open the Pull requests tab and click New pull request\n2. In the base: drop-down menu, ensure the master branch is selected\n3. In the compare: drop-down menu, select the development branch you created earlier\n4. Click Create pull request\n5. Now enter a title for your pull request, for example, “Add my changes”\n6. Add an accurate description of the changes you made\n7. Click Create pull request!\n\nYour team members now have the ability to discuss and review your proposed changes. Once everyone is happy and the changes are approved— it’s time to merge to `master.`\n\nNote: If you forked a repo and made changes, you can create a pull request to merge your changes from there as well.\n\n**Merging a Pull Request**\n\n1. Inside of your Pull request, click Merge pull request\n2. Click Confirm merge\n3. Once your branch has been merged, you don’t need it anymore. You can click Delete branch!\n\n## Summing up\n\nAnd that’s it! You’ve learned how to work collaboratively on projects using GitHub. GitHub is an amazing tool to take advantage of! You can now create repositories and issues, create branches, fork projects and make commits, submit pull requests for review, and merge to the master branch. Not bad!\n\n## Related Posts:\n\n* [The Cascade, Inheritance & Specificity](https://www.easeout.co/blog/2020-03-18-css-the-cascade-inheritance-specificity)\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass/)"
}