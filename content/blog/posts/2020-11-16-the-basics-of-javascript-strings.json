{
  "date": "Monday November 16th, 2020",
  "dateshort": "November 16th",
  "body": "JavaScript *strings* are used for storing and manipulating text — they can consist of a sequence of letters, numbers and/or symbols. In this article, we’re going to first take a look at how we create strings, concatenate strings and we’ll see some fundamental syntax rules that apply to strings.\n\n## Creating Strings\n\nThere are three ways to write a string — with single quotes `‘ ’`, double quotes `“ ”` or back-ticks `` ` ` ``. Let’s assign some strings to a `myString` variable with each technique:\n\n```JavaScript\nlet myString = 'I am a string!';\nlet myString = \"I am a string!\";\nlet myString = `I am a string!`;\n```\n\nThere is no syntactic difference between single or double quotes, you’re free to go with your preference — however it’s a good idea to stay consistent within your projects! However, back-ticks (known as *template literals*), have a few super powers which we’ll be taking a look at later in the article.\n\nAnd of course the reason we assign strings to variables, is so they’re much easier to work with & manipulate within our programs!\n\n## Concatenation\n\nWe use *string concatenation* to combine two or more strings together to form a new string. We combine our strings using the `+` operator.\n\n```javascript\nconst firstName = 'Barry';\nconst secondName = 'Dingus';\n\nconst concat = firstName + secondName;\n\nconsole.log(concat);    \n\n// output: BarryDingus\n```\n\nHere we’ve combined two strings stored in separate variables into a new `concat` variable. However, you’ll notice we have **no space** between the names in our new variable as concatenation joins strings end to end. To add the space, use a pair of quotes `‘ ’` like so:\n\n```javascript\nconst concat = firstName + ' ' + secondName;\n\nconsole.log(concat);\n\n// output: Barry Dingus\n```\n\nNow we have our desired output!\n\n### Concatenation with Template Literals\n\nWhen we use template literals `` ` ` ``, we no longer need to use the `+` operator to concatenate. We include expressions and variables within our strings using the `${}` syntax . For example,\n\n```javascript\nconst fullName = 'Barry Dingus';\nconst location = 'Mullet Creek';\n\nconst concat2 = `Welcome ${fullName}! We think ${location} is alright!`;\n\nconsole.log(concat2);\n\n// output: Welcome Barry Dingus! We think Mullet Creek is alright!\n```\n\nTemplate literals are much easier read & write.\n\n## Syntax Rules\n\n### Using Quotes and Apostrophes\n\nKnowing that quotes `“` and apostrophes `‘` are interpreted by JavaScript to mark where a string begins & ends. How can we include them *within* a string? For example:\n\n```javascript\nconst greeting = 'G'day Barry!';\n\nconsole.log(greeting);\n\n// Uncaught Syntax Error: Unexpected identifier\n```\n\nThe additional apostrophe in `’G’day Barry!'` is the problem. JavaScript thinks `‘G’` is the string and attempts to parse the rest as code, thus generating the error.\n\nUsing quotes within a string would cause the same error:\n\n```javascript\nconst quote = 'Barry said 'I lost my keys'';\n\nconsole.log(quote);\n\n// Uncaught Syntax Error: Unexpected identifier\n```\n\nThere are a number of ways we can avoid these errors…\n\n**Alternate your syntax**\n\nUse the opposite quote style to enclose any quotes or apostrophes within your strings, such as:\n\n```javascript\n'G'day Barry!'     // error\n\"G'day Barry!\"     // correct\n\n'Barry said 'I lost my keys''   // error\n'Barry said \"I lost my keys\"'   // correct\n\"Barry said 'I lost my keys'\"   // correct\n```\n\nWhilst this technique works just fine. It’s preferable to be more consistent within our code.\n\n**Using the Escape Character** `\\`\n\nBy using a backslash we can prevent JavaScript from interpreting a quote as the end of the string. The \\ should go before any single or double quote:\n\n```javascript\n'G\\'day Barry!'   // correct\n\n'Barry said \\'I lost my keys\\''   // also correct!\n```\n\n**Using Template Literals**\n\nIf we enclose our string in template literals ``` `` ```, our string will be valid and it’ll look much cleaner too:\n\n```javascript\n`Barry said \"I lost my keys\" and \"I'm now concerned\"!`; \n\n// correct\n```\n\n### Longer Strings\n\nWe use either the newline character `\\n` or carriage return `\\r`, to break longer strings up over multiple lines:\n\n```javascript\nconst multipleLines = \"This string is long\\nso lets display it\\nacross multiple lines.\";\n\n// output:\n\n\"This string is long\nso lets display it\nacross multiple lines.\"\n```\n\nThis works fine but it’s quite messy. We could tidy it up by using some concatenation:\n\n```javascript\nconst multipleLines = \"This string is long\\n\" +\n\"so lets display it\\n\" +\n\"across multiple lines.\";\n```\n\nOr go for a gold star with template literals:\n\n```javascript\nconst multipleLines = `This string is long\nso lets display it\nacross multiple lines.`;\n```\n\nBack-ticks to the rescue! No escapes or concatenation required, the newlines are preserved and it looks much neater.\n\n# Conclusion\n\nAnd that’s it! We’ve covered the basics of creating strings, string concatenation, and syntax rules. In the next one, we'll move on to manipulating strings with many of the common methods, such as formatting, finding, replacing, and converting values.\n\n## Related Posts:\n\n* [Working with Strings in JavaScript](https://www.easeout.co/blog/2020-11-23-working-with-strings-in-javascript)\n* [JavaScript Data Types](https://www.easeout.co/blog/2020-10-27-understanding-javascript-data-types)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion)",
  "title": "The Basics of JavaScript Strings",
  "description": "Learn the basics of JavaScript Strings.",
  "short": "Learn the basics of JavaScript Strings.",
  "category": "JavaScript"
}