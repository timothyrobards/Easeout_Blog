{
  "date": "Wednesday August 5th, 2020",
  "dateshort": "August 5th",
  "body": "Control directives and expressions are used in SASS to include styles only under certain defined conditions.\n\nAs a feature, they’re quite advanced and are mainly useful in mixins. Common directives include `@if`, `@else`, `@for` and `@while`.\n\n## @if and @else\n\nThe `@if` and `@else` directives are similar to `if` and `else` statements in JavaScript.\n\n`@if` takes an expression and executes the styles contained within its block — if the evaluation **is not false** (or null).\n\n`@else` will then be checked, if the previous `@if` evaluated to false.\n\nFor example:\n\n```sass\n@mixin heading($size) {\n  @if $size == large {\n    font-size: 4rem;\n  }\n  @else if $size == medium{\n    font-size: 3rem;\n  }\n  @else if $size == small {\n    font-size: 2rem;\n  }\n  @else {\n    font-size: 1rem;\n  }\n}\n \n.h1 {\n  @include heading(large);\n}\n \n.h6 {\n  @include heading(small);\n}\n```\nHere, we are using a *heading* mixin which accepts `$size` as an argument. We can have a different size for each of our headings depending on which value we pass to the mixin.\n\n## @for\n\nYou can use the `@for` directive to execute a group of statements a specified number of times. Effectively this is a loop.\n\nIt has two variations. The first uses the `through` keyword, it’ll execute the statements from start to end, inclusive.\n\nAn example using ’through`:\n\n```sass\n@for $i from 1 through 5 {\n   .list-#{$i} {\n      width: 2px * $i;\n   }\n}\n```\n\nThis will produce the following CSS output:\n\n```css\n.list-1 {\n  margin-left: 2px; \n}\n \n.list-2 {\n  margin-left: 4px; \n}\n \n.list-3 {\n  margin-left: 6px; \n}\n \n.list-4 {\n  margin-left: 8px; \n}\n \n.list-5 {\n  margin-left: 10px; \n}\n```\n\nIf we replace the `through` keyword with `to`, it makes the loop exclusive. The difference being that it won’t execute when the variable is equal to **end**.\n\nAn example using `to`:\n\n```sass\n@for $i from 1 to 5 {\n   .list-#{$i} {\n      width: 2px * $i;\n   }\n}\n```\n\nThis produces the following CSS:\n\n```css\n.list-1 {\n  margin-left: 2px; \n}\n \n.list-2 {\n  margin-left: 4px; \n}\n \n.list-3 {\n  margin-left: 6px; \n}\n \n.list-4 {\n  margin-left: 8px; \n}\n```\n\n## @while\n\nWe could instead implement the above code using the `@while` directive. As its name implies, it will continue to output CSS produced by the statements while the condition returns true.\n\nThe syntax is as follows:\n\n```sass\n$i: 1;\n@while $i < 6 {\n  .list-#{$i} {       \n     width: 2px * $i;   \n  }\n  $i: $i + 1;\n}\n```\n\nThe output is identical, so you could opt for your personal preference based on the syntax.\n\nIn the next article, we’ll look at SASS interpolation.\n\n\n## Related Posts:\n\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)\n* [Setting up SASS](https://www.easeout.co/blog/2020-07-09-setting-up-sass)\n* [Using SASS Variables](https://www.easeout.co/blog/2020-07-14-using-sass-variables)",
  "title": "Understanding SASS Control Directives",
  "description": "How to add looping and conditionals to our stylesheets.",
  "short": "How to add looping and conditionals to our stylesheets.",
  "category": "SASS"
}