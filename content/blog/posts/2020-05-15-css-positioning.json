{
  "date": "Friday May 15th, 2020",
  "dateshort": "May 15th",
  "body": "In CSS, we set the location of an element by using the `position` property.\n\nFor example:\n\n```css\n.element {\n  position: relative;\n  top: 10px;\n}\n```\n\nOur elements’ position will be moved down 10px from the top, relative to its original position in the document.\n\nThe `position` property can have one of 5 values:\n\n* `static`\n* `relative`\n* `absolute`\n* `fixed`\n* `sticky`\n\nLet’s take a look at each!\n\n## Values\n\n### Static\n\nEvery element has a `static` position by default. Static positioned elements are displayed in the normal page flow.\n\nLet’s use the following HTML as an example:\n\n```html\n<div class=\"parent\">\n  <p>parent</p>\n  <div class=\"child\">\n     <p>child</p>\n     <div class=\"element\">\n       <p>element</p>\n     </div>\n  </div>\n</div>\n```\n\nAnd some basic CSS:\n\n```css\n* {\n  font-family: monospace;\n  text-align: center;\n  font-size: 24px;\n}\n.parent {\n  background-color: pink;\n  padding: 40px;\n  width: 500px;\n  border: 2px solid #000;\n}\n.child {\n  background-color: green;\n  padding: 30px;  \n  border: 2px solid #000;\n}\n.element {\n  background-color: yellow;\n  padding: 30px;\n  border: 2px solid #000;\n}\n```\n\nThis gives us the following:\n\n![Position Static Diagram](/images/uploads/position-static.png)\n\nWe have our default `static` layout. The `static` position doesn’t need to be set as its assumed.\n\nIf we attempted to apply properties such `top`, `bottom`, `left`or `right` to a static element, there would be no effect.\n\n### Relative\n\nAn element with a `relative` position will also remain in the document flow, only now `top`, `bottom`, `left` & `right` will work!\n\nThese properties (known as “offset” properties) move element from the original position in the specified direction.\n\nThey accept any length value or a percentage.\n\nLet’s add `position: relative`& `left` with an offset value of 100px to our element:\n\n```css\n.element {\n  /* other styles ... */\n  position: relative;\n  left: 100px;\n}\n```\n\n![Position Relative Diagram](/images/uploads/position-relative.png)\n\nOur element will move 100px from the left, relative to its container.\n\nWe could also set multiple values:\n\n```css\n.element {\n  /* other styles ... */\n  position: relative;\n  top: -200px;\n  left: 100px;\n}\n```\n\n![Position Relative Multiple Diagram](/images/uploads/position-relative2.png)\n\nThe negative value for `top` moves box move up relative to its container.\n\nYou’ll also notice the space previously occupied by the `element` box still remains. As it’s position is offset relative to its original position.\n\nWe can also apply [z-index](https://www.easeout.co/blog/2020-05-19-the-z-index-property) to relatively positioned elements!\n\n### Absolute\n\nWhen the `absolute` position is set on an element, its completely removed from the document flow. Meaning all other page elements will behave as if it no longer exists.\n\nLets give our element a `position: absolute`, we can see that its original space has now collapsed, as the element exists outside of the document flow.\n\n```css\n.element {\n  /* other styles ... */\n  position: absolute;\n}\n```\n\n![Position Absolute Diagram](/images/uploads/absolute.png)\n\nWe can use positional properties with an `absolute` element. So we can move it around using `top`, `right`, `bottom`, or `left`:\n\n```css\n.element {\n  /* other styles ... */\n  position: absolute;\n  top: 0px;\n  left: 0px;\n}\n```\n\n![Position Absolute Top Corner Diagram](/images/uploads/absolute2.png)\n\nIt’ll position itself at the 0,0 coordinates of the browser window (the top-left corner).\n\nOr:\n\n```css\n.element {\n  /* other styles ... */\n  position: absolute;\n  top: 250px;\n  left: 100px;\n}\n```\n\n![Position Absolute Offset Diagram](/images/uploads/absolute3.png)\n\nOur offset properties always set the position relative to the closest container that is **not** `static`.\n\nIf all parent containers are static, it’ll sit relative to the window.\n\nBut if we add `position: relative` to the `.child` element, and set the `top` and `left` to 0, the element will be positioned at the 0, 0 coordinates of `.child` :\n\n```css\n.child {\n  /* other styles ... */\n  position: relative;\n}\n.element {\n  /* other styles ... */\n  position: absolute;\n  top: 0px;\n  left: 0px;\n}\n```\n\n![Position Absolute relative to container diagram](/images/uploads/absolute4.png)\n\nThis is a great trick to remember when positioning elements on a page!\n\nYou can also use `z-index` placement with absolute positioning.\n\n### Fixed\n\nAn element with a `fixed` value is similar to absolute in that it’s also removed from the flow of the document.\n\nA fixed positioned element is **always** relative to the *window itself*, **not** any particular parent container:\n\n```css\n.element {\n  /* other styles ... */\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n```\n\n![Position Fixed Diagram](/images/uploads/absolute5.png)\n\nAlso, `fixed` elements are not affected by scrolling. Meaning its position will stay the same even when the page is scrolled.\n\nFor example, you might use the `fixed` element to place a “scroll to top” icon at the bottom-right side of the page!\n\n### Sticky\n\nThe `sticky` value is a hybrid of the `relative` and `fixed` values. It’s treated like a `relative` value until the scroll location (of the viewport) hits a specified threshold. At that point it “sticks” in place, acting like a `fixed` element.\n\nYou might want a landing image with a navigation menu located underneath. As you scroll down past the landing image, you could have the menu then “stick” to the top of the window.\n\nFor example:\n\n```css\n.element {\n  position: sticky; \n  top: 0;\n}\n```\n\nOur element will be relatively positioned until the scroll location of the viewport reaches it. Then it’ll stick to the page in a `fixed` position at the top (`0`) of the screen.\n\nAt this stage, `sticky` remains an experimental value, with only partial adoption by the major browsers:\n\n![Can I Use Sticky Property](/images/uploads/can-i-use-sticky.png)\n\nFor now at least, it’d be worth considering a JavaScript solution if your looking to use this technique in production.\n\n## Related Posts:\n\n* [The Display Property](https://www.easeout.co/blog/2020-05-12-css-display-property)\n* [z-index](https://www.easeout.co/blog/2020-05-19-the-z-index-property)\n* [The Box Model](https://www.easeout.co/blog/2020-04-14-the-css-box-model)",
  "title": "CSS Positioning",
  "description": "Learn all about positioning elements in CSS.",
  "short": "Learn all about positioning elements in CSS.",
  "category": "CSS"
}