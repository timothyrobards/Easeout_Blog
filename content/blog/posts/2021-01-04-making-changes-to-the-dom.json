{
  "date": "Monday January 4th, 2021",
  "dateshort": "January 4th",
  "body": "In this article, we’re going to learn all about how we can add, change, replace, and remove nodes from the DOM. We’ll be looking specifically at the `createElement()` and `createTextNode()` methods.\n\n## Creating New Nodes\n\nLet's create the following HTML file:\n\n```html\\<!DOCTYPE\n<html lang=\"en\">\n<head>\n    <title>Master the DOM!</title>\n  </head>\n<body>\n    <h1>Master the DOM!</h1>\n  </body>\n</html>\n```\n\nOpen up the *Console* tab in Developer Tools.\n\nLet’s use the `createElement()` method on the `document` object to create a new `p` element.\n\n```\nconst paragraph = document.createElement('p');\n\nconsole.log(paragraph);     // <p></p>\n```\n\nSuccess! The `paragraph` variable gives us our `p` element.\n\nWe can now add text to our element, with the `textContent` property:\n\n```\nparagraph.textContent = \"I'm a paragraph!\";\n\nconsole.log(paragraph);     // <p>I'm a paragraph!</p>\n```\n\nBy combining `createElement()` and `textContent` we can create a complete element node.\n\nWe could also use the `innerHTML` property to add content to an element. With this property we can add both text and HTML to our element:\n\n```\nparagraph.innerHTML = \"I'm a <strong>bold</strong> paragraph!\";\n```\n\nOf the two methods, `textContent` is superior — it’s slightly faster to render than `innerHTML`.\n\nIt’s also possible to create a text node using the `createTextNode()` method:\n\n```\nconst text = document.createTextNode(\"I'm a text node!\");\n\nconsole.log(text);    // \"I'm a text node!\"\n```\n\nAll of these methods have created new elements and text nodes, however, they are not visible on the front end of a website until they’ve been inserted into the document!\n\n## Inserting Nodes into the DOM\n\nTo see the new text nodes and elements we create on the front end, we need to insert them into the `document`. The methods `appendChild()` & `insertBefore()` are used to add items to the beginning, middle, or end of a parent element, and `replaceChild()` is used to replace an old node with a new node.\n\nLet's demo this by adding a list to our HTML:\n\n```html\n<ul>\n  <li>Get pizza</li>\n  <li>Get burgers</li>\n  <li>Get Doritos</li>\n</ul>\n```\n\nAnd here’s our page:\n\n![DOM Example](/images/uploads/dom6.png)\n\nSay we want to add a new item to the end of our list, we have to create the element and add text to it first, as we did previously, like so:\n\n```\n// Get the ul element\nconst list = document.querySelector('ul');\n\n// Create new list item\nconst newItem = document.createElement('li');\nnewItem.textContent = 'Get nice cheese';\n```\n\nWe now have a complete element for our new list item! So we can add it to the end of the list using `appendChild()`:\n\n```\n// Add our new item to the end of the list\nlist.appendChild(newItem);\n```\n\nAnd our new `li` element has been appended to the end of the `ul`:\n\n![DOM Example](/images/uploads/dom7.png)\n\nTo add an item to the beginning of our list, let’s create another element (we have to again create a new element, as `createElement()` can‘t be reused):\n\n```\n// Create a new list item\nconst anotherNewItem = document.createElement('li');\nanotherNewItem.textContent = 'Get Party Whistles';\n```\n\nWe use the `insertBefore()` method to add it to the beginning of our list. It will take two arguments, the first being the new child node to be added, and the second is the sibling node that will immediately follow.\n\n```\nparentNode.insertBefore(newNode, nextSibling);\n```\n\nSo for our example, we’ll add the new `anotherNewItem` element to the start of our list, like so:\n\n```\n// Add a new item to the beginning of the list\nlist.insertBefore(anotherNewItem, list.firstElementChild);\n```\n\n![DOM Example](/images/uploads/dom8.png)\n\nAnd now our new node has been added to the start of our list!\n\nLet’s also take a look at how we can replace an existing node with a new node using `replaceChild()`. First, we create a new element:\n\n```\nconst modifiedItem = document.createElement('li');\nmodifiedItem.textContent = \"Get Poppin' Jalapeno Doritos\";\n```\n\n`replaceChild()` also takes two arguments, first the new node, then the node to be replaced...\n\n```\nparentNode.replaceChild(newNode, oldNode);\n```\n\nIn our example, we’re replacing the third element child on our list:\n\n```\n// Replace list item\nlist.replaceChild(modifiedItem, list.children[3])\n```\n\n![DOM Example](/images/uploads/dom9.png)\n\nUsing a combination of `appendChild()`, `insertBefore()`, and `replaceChild()`, we can insert nodes and elements anywhere in the DOM!\n\n## Removing Nodes from the DOM\n\nTo remove nodes from the DOM, we can use `removeChild()` to remove child nodes from their parent, or we can use `remove()` to remove the node itself.\n\nReturning to our example let's remove the last item on our list:\n\n```\n// Remove the last list item\nlist.removeChild(list.lastElementChild);\n```\n\nAnd the result:\n\n![DOM Example](/images/uploads/dom10.png)\n\nAlternatively, we could use `remove()`, to remove the node itself:\n\n```\n// Remove the third element from our list\nlist.children[2].remove();\n```\n\n![DOM Example](/images/uploads/dom11.png)\n\nUsing `removeChild()` and `remove()`, you can remove any node from the DOM.\n\nIn the next tutorial, we’ll take a look at how we can modify classes & styles in the DOM. By modifying HTML element nodes.\n\n## Related Posts:\n\n* [An Introduction to the DOM](https://www.easeout.co/blog/2020-12-14-an-introduction-to-the-dom)\n* [Accessing DOM Elements](https://www.easeout.co/blog/2020-12-21-accessing-dom-elements)\n* [Traversing the DOM](https://www.easeout.co/blog/2020-12-28-traversing-the-dom/)",
  "title": "Making Changes to the DOM",
  "description": "How to make changes to DOM elements with JavaScript.",
  "short": "How to make changes to DOM elements with JavaScript.",
  "category": "JavaScript"
}