{
  "date": "Wednesday August 12th, 2020",
  "dateshort": "August 12th",
  "body": "Interpolation is essentially a code insertion. It allows us to interpolate SASS expressions into our code. We can use it to use a selector or property name, quoted or unquoted strings etc, as variables.\n\n## The syntax\n\nTo interpolate an expression we need to wrap the expression using `#{ }`.\n\n```SASS\n#{$variable_name}\n```\n\nLet’s see an example that shows how we could use interpolation with a mixin:\n\n```SASS\n@mixin interpolation($editable, $val, $val2, $prop1, $prop2)\n{\n    background-#{$editable}: $val;\n    position: $val2;\n    #{$prop1}: 0px; \n    #{$prop2}: 0px;\n}\n \n \n.block1{\n    @include interpolation(\"image\", url(\"img.png\"), absolute, top, right);\n}\n \n.block2{\n    @include interpolation(\"color\", lightgray, absolute, top, left);\n}\n```\n\nThis will compile in CSS as follows:\n\n```CSS\n.block1 {\n    background-image: url(\"img.png\");\n    position: absolute;\n    top: 0px;\n    right: 0px;\n}\n  \n.block2 {\n   background-color: lightgray;\n   position: absolute;\n   top: 0px;\n   left: 0px;\n}\n```\n\nAs you can see, it’s quite easy to use this to create dynamically reusable code!\n\n## Main reasons to use Interpolation\n\n* We can use dynamically created names as a property name, a variable name or for other similar purposes.\n* We can create highly reusable code!\n\nIn the next article, we’ll learn how to use placeholders in SASS.\n\n## Related Posts:\n\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)\n* [Setting up SASS](https://www.easeout.co/blog/2020-07-09-setting-up-sass)\n* [Using SASS Variables](https://www.easeout.co/blog/2020-07-14-using-sass-variables)",
  "title": "SASS Interpolation",
  "description": "How to use interpolation to make SASS code more dynamic.",
  "short": "How to use interpolation to make SASS code more dynamic.",
  "category": "SASS"
}