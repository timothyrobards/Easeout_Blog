{
  "date": "Monday January 11th, 2021",
  "dateshort": "January 11th",
  "body": "In this article, we'll take a look at how we can modify the attributes, classes, and styles of HTML element nodes.\n\n## Modifying Attributes\n\nAttributes are often used in HTML to provide additional information about an element.Â Some common examples are theÂ `src`Â attribute of anÂ `img`Â tag, theÂ `href`Â of anÂ `a`Â tag, as well asÂ `class`,Â `id`Â andÂ `style`. You may also have seen attributes beginning withÂ `data-,` these areÂ custom attributes that we can also modify.\n\nThe methods we have in JavaScript for modifying element attributes are:\n\n`hasAttribute()`Â â€” Returns a Boolean.\n\n`getAttribute()`Â â€” Returns the value of a specific attribute.\n\n`setAttribute()`Â â€” Adds or updates the value of a specific attribute.\n\n`removeAttribute()`Â â€” Removes an attribute from an element.\n\nLetâ€™s use the following HTML as our example:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<img src=\"https://res.cloudinary.com/trobes/image/upload/c_scale,w_400/v1549941322/before.png\">\n\n</body>\n</html>\n```\n\n![Before DOM Example](/images/uploads/dom12.png)\n\nOpen up theÂ *console*Â and test out the attribute methods:\n\n```\n// Assign image element\nconst image = document.querySelector('img');\n\nimage.hasAttribute('src');       // true\nimage.getAttribute('src');       // returns the src link\nimage.removeAttribute('src');    // removes the src\n```\n\nAnd let's useÂ `setAttribute()`Â to assign a new image to ourÂ `src`:\n\n```\nimage.setAttribute('src', 'https://res.cloudinary.com/trobes/image/upload/c_scale,w_400/v1549941322/after.png');\n```\n\n![After DOM Example](/images/uploads/dom13.png)\n\nTheÂ `hasAttribute()`Â andÂ `getAttribute()`Â methods are often used with conditional statements, whileÂ `setAttribute()`Â andÂ `removeAttribute()`Â are more often used to directly modify the DOM.\n\n## Modifying Classes\n\nWhen working with CSS, we use classes to apply styles to multiple elements.Â Letâ€™s take a look at how we can work with the class attribute in JavaScript, usingÂ `className`Â andÂ `classList`.\n\n`className`Â â€” Gets or sets the class value.\n\n`classList.add()`â€” Adds class values.\n\n`classList.toggle()`Â â€” Toggles a class on or off.\n\n`classList.contains()`Â â€” Checks if a value exists.\n\n`classList.replace()`Â â€” Replaces old value with a new one.\n\n`classList.remove()`Â â€” Removes a value.\n\nLetâ€™s work with each of these methods in the following example:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<style>\n    .active {\n        border: 5px solid green;\n    }\n    .alert {\n        border: 5px solid red;\n    }\n    .hidden {\n        display: none;\n    }\n    div {\n        border: 5px solid lightgrey;\n        padding: 15px;\n        margin: 5px;\n    }\n</style>\n<body>\n    <div>Div #1</div>\n    <div class=\"active\">Div #2</div>\n</body>\n</html>\n```\n\nAnd hereâ€™s the initial HTML output:\n\n![Selection DOM Example](/images/uploads/dom14.png)\n\nWe useÂ `className`Â to assign values to classes:\n\n```\n// Select div #1\nconst div = document.querySelector('div');\n\n// Assign the alert class to div #1\ndiv.className = 'alert';\n```\n\nNow theÂ `alert`Â class defined in our HTML has been assigned to the firstÂ `div`:\n\n![Selection DOM Example 2](/images/uploads/dom15.png)\n\nThis will override any existing classes on the element. You can add multiple classes usingÂ `className`, if you separate the class names to be applied with spaces.\n\nThe other way to modify our classes is with theÂ `classList`Â property, and it has a few very useful methods:\n\n```\n// Select div #2 by its class name\nconst activeDiv = document.querySelector('.active');\n\n// Add the hidden class\nactiveDiv.classList.add('hidden');   \n   \n// Remove the hidden class\nactiveDiv.classList.remove('hidden'); \n  \n// Switch between hidden true and false\nactiveDiv.classList.toggle('hidden');\n\n// Replace active class with alert class\nactiveDiv.classList.replace('active', 'alert');\n```\n\nAfter running through these methods, our HTML will render like so:\n\n![Selection DOM Example 3](/images/uploads/dom16.png)\n\n*Note:*Â UsingÂ `classList.add()`Â will add a new class to the list of existing classes (rememberÂ `className`Â would override any existing classes). You can also add multiple classes as comma-separated strings.\n\n## Modifying Styles\n\nTypically styles are added via separate CSS stylesheets, however, there are times when we might want to use an inline style â€” and it's useful to know how we can modify it directly with JavaScript! Letâ€™s demo this with the following HTML:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n    <div style=\"height: 200px;\n                width: 200px;\n                border: 5px solid black;\n                display: flex;\n                justify-content: center;\n                align-items: center;\">Style me!</div>\n</body>\n</html>\n```\n\nOur initial output:\n\n![Selection DOM Example 4](/images/uploads/dom17.png)\n\nWhen working with CSS properties in the DOM, we use camelCase. So instead of using dashes as we would with CSS e.g.`border-radius`, we use camel case e.g.Â `borderRadius`. Where our first word is in lower case and any subsequent words are capitalized.\n\n```\n// Select the div\nconst div = document.querySelector('div');\n\n// Make div into a circle, change color and font size\ndiv.style.borderRadius = '50%';\ndiv.style.backgroundColor = 'lightgreen';\ndiv.style.fontSize = '30px';\n```\n\n*Note:*Â We could useÂ `setAttribute()`to modify our styles eg.Â `div.setAttribute('style', 'border-radius: 50%');`Â However,Â *this will remove all existing inline styles*. So itâ€™s much better to use theÂ `style`Â attribute directly.\n\nOur output after adding these styles:\n\n![Selection DOM Example 5](/images/uploads/dom18.png)\n\nOf course, if we have multiple style changes to apply to an element, itâ€™s best to apply them to a class in your CSS and just add the new class to the element via JavaScript ðŸ†’.\n\n## Related Posts:\n\n* [An Introduction to the DOM](https://www.easeout.co/blog/2020-12-14-an-introduction-to-the-dom)\n* [Accessing DOM Elements](https://www.easeout.co/blog/2020-12-21-accessing-dom-elements)\n* [Traversing the DOM](https://www.easeout.co/blog/2020-12-28-traversing-the-dom/)",
  "title": "How to Modify DOM Nodes",
  "description": "Learn how to modify DOM attributes, classes and styles.",
  "short": "Learn how to modify DOM attributes, classes and styles.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-modify-dom-nodes.png"
}