{
  "date": "Saturday June 26th, 2021",
  "dateshort": "June 26th",
  "body": "In JavaScript, we use loops when we want an easy way to handle repetition. In this article, we’re going to take a look at all the different ways we can create loops in our code — and we’ll consider the pros and cons of each method.\n\nA way to think of a loop could be to think of giving commands to a robot. You could tell it to take 10 steps — and rather than issuing 10 separate commands, we can create a loop:\n\n```\nlet i;\nfor (i = 0; i < 10; i++) {\n  document.write(\"Take one step!\\n\");\n} \n```\n\nThis is an example of a `for` loop. At first, this may be confusing — but we’ll break it all down in the next section! In this article, we’ll be reviewing many different kinds of loop statements, such as: `for`, `do...while`, `while`, `labelled statement`, `break statement`, `continue statement`, `for...in` & `for...of`. It’s worth noting that despite their differences in syntax — loops all essentially do the same thing: repeat an action a number of times. The situation dictates which type of loop is best suited.\n\n## the for loop\n\nAs we’ve seen in the above example, a `for` loop will repeat until our condition evaluates to false. The logical structure is like so:\n\n```\nfor ([initialExpression]; [condition]; [incrementExpression])\n  statement\n```\n\nWe are first initializing the `initialExpression`, which usually initializes one or more loop counters, but the syntax even allows for more complex expressions such as variables. We next evaluate our `condition`, if *true*, the loop statements will execute. If *false*, the loop terminates.\n\nThen the `statement` executes. When we wish to execute multiple statements, we use a block statement (`{ ... }`) to group them together. If present, the update expression `incrementExpression` is executed. Control then returns to evaluating the `condition`.\n\nLet’s now return to our previous example:\n\n```\nlet i;\nfor (i = 0; i < 10; i++) {\n  document.write(\"Take one step!\\n\");\n}\n```\n\nHere we can see our `for` statement is counting the number of steps taken up to 10. The variable `i` will ensure we’re starting from the beginning by initializing to zero. Then it will check that `i` is less than the number we specify, which in our case is *10*. The `i++` is the count which will increment `i` by 1 after each pass through the loop. So our loop knows when to complete!\n\n## do...while statement\n\nA `do...while `statement will repeat until the condition evaluates to *false*. The structure is like so:\n\n```\ndo\n  statement\nwhile (condition);\n```\n\nIt’s fairly self-explanatory, `statement` is always executed once prior to the condition being checked. And then again until the while condition returns *false*. We can execute multiple statements, using a block statement (`{ ... }`) to group them. If `condition` is *true*, the statement executes again. At the end of each execution, the condition is checked. When the condition returns *false*, the execution stops and control passes to the statement which follows `do...while`.\n\nLet’s see an example:\n\n```\nlet i = 0;\ndo {\n  i += 1;\n  console.log(i);\n} while (i < 10);\n```\n\nHere our `do` loop iterates at least once and then reiterates until `i` is no longer less than 10.\n\n## while statement\n\nA `while` statement executes its statements as long as a specified condition evaluates to *true*. Its syntax is as follows:\n\n```\nwhile (condition)\n  statement\n```\n\nIf the condition becomes *false*, the `statement` within the loop stops executing and control then passes to the statement following the loop.\n\nThe condition test occurs before the `statement` in the loop is executed. And if the condition returns *true*, the `statement` is executed and the condition is tested again. If the condition returns *false*, execution will stop and control is passed to the statement following `while`.\n\nAnd as with `do...while`, we can execute multiple statements using a block statement ({ … }) to group them together.\n\nThe following `while` loop will iterate as long as `a` is less than three:\n\n```\nlet a = 0;\nlet b = 0;\nwhile (a < 3) {\n  a++;\n  b+= a;\n}\n```\n\nHere with each iteration, the loop increments `a` and adds that value to `b`. Therefore, `a` and `b` take on the following values:\n\n* After the first pass through the loop : `a` = 1 and `b` = 1\n* And the second pass: `a` = 2 and `b` = 3\n* And the third pass: `a` = 3 and `b` = 6\n\nAfter completion of the third pass, the condition `a < 3` is no longer *true*, so that’s where our loop terminates!\n\n**Note:** When you first start working with loops, you may accidentally create an *infinite loop*. This is when a loop condition never evaluates to *false.* The statements in the following `while` loop execute forever because the condition is never false:\n\n```\nwhile (true) {\n  console.log('Hi there!');\n}\n```\n\nCAUTION: If you run this code — please be aware that it’s likely to crash your browser!! So make sure you’ve backed up your open tabs - if you want to see what happens.\n\n## labelled statement\n\nYou can attach a `label` to any statement to serve as an identifier so you can refer to it elsewhere in your program. As an example, you could use a label to identify a loop, and then use `break` or `continue` statements to indicate whether a program should interrupt the loop, or continue its execution (we’ll take a look at these below).\n\n```\nlabel :\n   statement\n```\n\nThe value of `label` may be anything you like (with the exception of a JavaScript reserved word). Then you provide the`statement` to execute.\n\nSo for example, you could use the label `totalLoop` to identify a `while` loop.\n\n```\ntotalLoop:\nwhile (total == true) {\n   doSomething();\n}\n```\n\n## break statement\n\nWe use the `break` statement to terminate a loop or `switch`, or in conjunction with a labelled statement.\n\n* When you use `break` without a label, it terminates the innermost enclosing `while`, `do-while`, `for`, or `switch` immediately and transfers control to the following statement.\n* When you use `break` with a label, it terminates the specified labelled statement.\n\nA `break` statement looks like this:\n\n```\nbreak [label];\n```\n\nFor example, let’s loop through an array until we find the index of an element *with* the value of: `foundMe`\n\n```\nfor (let i = 0; i < a.length; i++) {\n  if (a[i] == foundMe) {\n    break;\n  }\n}\n```\n\nAnd let’s use break with a labelled statement:\n\n```\nlet x = 0;\nlet z = 0;\nendLoops: while (true) {\n  console.log('Outer loops: ' + x);\n  x += 1;\n  z = 1;\n  while (true) {\n    console.log('Inner loops: ' + z);\n    z += 1;\n    if (z === 10 && x === 10) {\n      break endLoops;\n    } else if (z === 10) {\n      break;\n    }\n  }\n}\n```\n\n## continue statement\n\nWe use the `continue` statement to restart a `while`, `do-while`, `for`, or `label `statement.\n\nWhen you use `continue` without a label, it terminates the current iteration of the innermost enclosing `while`, `do-while`, or `for` statement and continues execution of the loop with the next iteration. This contrasts with the `break` statement, as `continue` doesn’t terminate the execution of the loop entirely. In a `while` loop, it jumps back to the condition. In a `for` loop, it jumps to the `initial-expression`.\nWhen you use `continue` with a label, it applies to the looping statement identified with that label.\n\nA `continue` statement looks like so:\n\n```\ncontinue [label];\n```\n\nFor example, the following code block shows a `while` loop with a `continue` statement that will execute when the value of `i` is three. So `n` takes on the values one, three, seven, and twelve.\n\n```\nlet i = 0;\nlet n = 0;\nwhile (i < 5) {\n  i++;\n  if (i == 3) {\n    continue;\n  }\n  n += i;\n  console.log(n);\n}\n// 1,3,7,12\nlet i = 0; \nlet n = 0; \nwhile (i < 5) { \n  i++; \n  if (i == 3) { \n     // continue; \n  } \n  n += i; \n  console.log(n);\n}\n// 1,3,6,10,15\n```\n\n## for...in statement\n\nA `for...in` statement iterates a *specified variable* over all the enumerable properties of an *object*. For each distinct property, JavaScript executes the specified statements. The syntax is as follows:\n\n```\nfor (variable in object) {\n  statements\n}\n```\n\nThe following function takes as its *argument* an *object* and the *object’s name*. It then *iterates* over *all the object’s properties* and *returns a string* that lists the *property names* and their *values*.\n\n```\nfunction get_names(obj, obj_name) {\n  let result = '';\n  for (let i in obj) {\n    result += obj_name + '.' + i + ' = ' + obj[i] + '<br>';\n  }\n  result += '<hr>';\n  return result;\n}\n```\n\nFor an object `food` with properties `lunch` and `dinner`, `result` would be:\n\n```\nfood.lunch = Sandwich\nfood.dinner = Lasagna\n```\n\n*Note:* Given that `for...in` *is built for iterating object properties*, it's not recommended for use with arrays — where the index order is important. For arrays, it’s better to use the more traditional `for` loop.\n\n## for...of statement\n\nA `for … of` statement creates a loop that iterates over iterable objects, such as `Array`, `Map`, `Set`, `arguments` and so on. The syntax is like so:\n\n```\nfor (variable of object) {\n  statement\n}\n```\n\nThe below example shows the difference between a `for...of` loop and a `for … in` loop. While `for...in` iterates over property names, `for...of` iterates over property values:\n\n```\nlet arr = [10, 20, 30];\narr.greet = 'hello';\nfor (let i in arr) {\n   console.log(i); // logs \"0\", \"1\", \"2\", \"greet\"\n}\nfor (let i of arr) {\n   console.log(i); // logs 10, 20, 30\n}\n```\n\n## Wrapping up\n\nAnd that’s it! We’ve learned about many of the different loop statements, such as: `for`, `do...while`, `while`, `labeled statement`, `break statement`, `continue statement`, `for..in` & `for...of`. And we’ve looked at a number of examples highlighting ideal use cases for each type of loop. Whichever statements we choose to utilize, we’re now well equipped to add logic and reasoning to our programs.\n\n\n\n### Related Posts:\n\n* [Understanding Variables, Scope and Hoisting](https://www.easeout.co/blog/2021-01-25-understanding-variables-scope-and-hoisting/)\n* [Working with Strings in JavaScript](easeout.co/blog/2020-11-23-working-with-strings-in-javascript/)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion/)",
  "title": "Mastering Loops",
  "description": "A review of the various ways to loop in JavaScript.",
  "short": "A review of the various ways to loop in JavaScript.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-loops.png"
}