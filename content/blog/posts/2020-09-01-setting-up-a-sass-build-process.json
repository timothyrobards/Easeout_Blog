{
  "date": "Tuesday September 1st, 2020",
  "dateshort": "September 1st",
  "body": "Let's take a look at how we can use npm scripts to setup a Sass build process — and boost our development workflow.\n\n## What is a build process?\n\nIt’s essentially just a sequence of tasks that perform automatically — which we run after project completion. Our production files are generated, and are then ready to be deployed to a web server.\n\n## The build process\n\n*Please note:* The below process assumes you have a Sass project already up and running! If not please see the article [Setting up Sass](https://www.easeout.co/blog/2020-07-09-setting-up-sass), where I walk through the steps involved to setup up a Sass development environment.\n\n**Ok! So what build process are we going to implement?**\n\nWe will be compiling, concatenating, prefixing and compressing our stylesheets, as shown in the chart below..\n\n![SASS Build Process Chart](/images/uploads/sass-build.png)\n\n`main.scss` — we start with our main sass file, which performs the **compilation** to CSS.\n\nNext were going to take a look at **concatenation**. In this process, we want to merge our all of CSS files into one. To test out this process, I’ve created a file called `additional.css`.\n\nThen we’ll be looking at **prefixing** with autoprefixer. Prefixing will automatically add vendor prefixes ( -webkit, -moz, etc) to our code, to help ensure its functionality across the major browsers.\n\nThe final step in our process will be **compressing**. We will compress all the code we have at this stage, to maximize performance.\n\nLet's go ahead and create our build process with NPM scripts.\n\n## Creating the Build Process\n\n### Compilation\n\nOpen up your **package.json** file. The file that generates when you run `npm init` in your Sass project directory.\n\nAdd the following scripts..\n\n```\n\"scripts\": {\n  \"watch-sass\": \"node-sass sass/main.scss css/style.css --watch\",\n  \"compile-sass\": \"node-sass sass/main.scss css/style.comp.css\"\n},\n```\n\nAnd let's ensure the compile is working. In terminal, open up to your Sass project folder and run:\n\n```\nnpm run compile-sass\n```\n\nIt should complete the render and output the style.comp.css file to your CSS folder. We will run this task at the end of the project — to complete our final build!\n\nWhile we are developing the project, we run the watch task with:\n\n```\nnpm run watch-sass\n```\n\nThis tells the compiler to watch the source files for changes, and re-compile to CSS automatically, each time you save your Sass files — just be sure to keep the task running while you work!\n\n### Concatenation\n\nThe next step is to add the script to concatenate our existing CSS files. As mentioned earlier I’ve created the `additional.css` file for our merge. Inside of it there are a few additional styles. Go ahead and also create a new CSS file in your CSS folder. Just give it some additional styles — it doesn’t matter what. Then add the following line to our script, like so:\n\n```\n\"scripts\": {\n  \"watch-sass\": \"node-sass sass/main.scss css/style.css --watch\",\n  \"compile-sass\": \"node-sass sass/main.scss css/style.comp.css\",\n  \"concat-css\": \"concat -o css/style.concat.css css/additional.css css/style.comp.css\"\n},\n```\n\n`concat-css:`is our script name.\\\n`concat -o css/style.concat.css`our package output file.\\\n`css/additional.css css/style.comp.css`are our CSS files to be concatenated.\n\nWe’ll need to install the [concat](https://www.npmjs.com/package/concat) npm package, run the following command:\n\n```\nnpm install concat --save-dev\n```\n\nOnce the install completes you’ll see it listed under the *“devDependencies”* of your **package.json**.\n\nNow run the concat to make sure it works..\n\n```\nnpm run concat-css\n```\n\nYou’ll now see the `style.concat.css` output file in your CSS directory! Open it up and take a look at your CSS, you’ll see that the contents of your `additional.css` and your `style.comp.css` have merged into one — sweet!\n\n### Prefixing\n\nWe now move on to adding prefixing into our build. Our script now looks as follows:\n\n```\n\"scripts\": {\n  \"watch-sass\": \"node-sass sass/main.scss css/style.css --watch\",\n  \"compile-sass\": \"node-sass sass/main.scss css/style.comp.css\",\n  \"concat-css\": \"concat -o css/style.concat.css css/additional.css css/style.comp.css\",\n  “prefix-css”: “postcss --use autoprefixer -b 'last 5 versions' css/style.concat.css -o css/style.prefix.css”\n},\n```\n\n`prefix-css:` is our script name.\\\n`postcss --use autoprefixer` autoprefixer is selected.\\\n`-b 'last 5 versions'`we specify which browser versions we want our autoprefixes to cover.\\\n`css/style.concat.css` is our input file.\\\n`-o css/style.prefix.css` we specify our output file.\n\nWe’re using the npm [autoprefixer](https://www.npmjs.com/package/autoprefixer) package, which will need to be installed by running:\n\n```\nnpm install autoprefixer --save-dev\n```\n\nWe also need to install [PostCSS](https://www.npmjs.com/package/postcss) (autoprefixer is part of this plugin). We use the following command:\n\n```\nnpm install postcss-cli --save-dev\n```\n\nAnd then run the script as follows:\n\n```\nnpm run prefix-css\n```\n\nIt will generate our `css/style.prefix.css` file. Take a look at the code in this file and you’ll see the browser prefixes have been added for you. This is great as we can now forget about prefixing and concentrate on writing clean code!\n\n### Compressing\n\nWe’re now at the final step in our build process. Lets add the following line to our scripts:\n\n```\n\"scripts\": {\n  \"watch-sass\": \"node-sass sass/main.scss css/style.css --watch\",\n  \"compile-sass\": \"node-sass sass/main.scss css/style.comp.css\",\n  \"concat-css\": \"concat -o css/style.concat.css css/additional.css css/style.comp.css\",\n  “prefix-css”: “postcss --use autoprefixer -b 'last 5 versions' css/style.concat.css -o css/style.prefix.css”,\n  \"compress-css\": \"node-sass css/style.prefix.css css/style.css --output-style compressed\"\n},\n```\n\nThis is a nice easy one! Here all we do is tel our`css/style.prefix.css` input file, to output to `css/style.css`. The `--output-style compressed`option will compress the code!\n\nLets test it out..\n\n```\nnpm run compress-css\n```\n\nNow take a look at your `style.css` file. You’ll see that all of your styles have compressed into a single line of code! All white-space and comments have been removed. You can compare the file size of your `style.prefix.css` input file with the newly generated `style.css` file, to see the compressed file size. With this simple step we have just significantly reduced our page load!\n\n### Build\n\nLet's now write one final script to run everything at once! Add the following:\n\n```\n\"scripts\": {\n  \"watch-sass\": \"node-sass sass/main.scss css/style.css --watch\",\n  \"compile-sass\": \"node-sass sass/main.scss css/style.comp.css\",\n  \"concat-css\": \"concat -o css/style.concat.css css/additional.css css/style.comp.css\",\n  “prefix-css”: “postcss --use autoprefixer -b 'last 5 versions' css/style.concat.css -o css/style.prefix.css”,\n  \"compress-css\": \"node-sass css/style.prefix.css css/style.css --output-style compressed\",\n  \"build-css\": \"npm-run-all compile-sass concat-css prefix-css compress-css\"\n},\n```\n\nHere we’ve simply added all our tasks `compile-sass`, `concat-css`, `prefix-css` & `compress-css` to be run when we execute our build command.\n\nWe use the [npm-run-all](https://www.npmjs.com/package/npm-run-all) package to ensure it works on all platforms. Enter the following command:\n\n```\nnpm install npm-run-all --save-dev\n```\n\nLet's run a final test to confirm everything is working. Delete all of the files (except `additional.css`), from the CSS folder. Once that’s done, run the build command..\n\n```\nnpm run build-css\n```\n\nAnd there you go! All of your CSS files have been generated with this one command — powerful stuff!\n\nTo get this build setup on future projects, all you need to do is copy the *scripts* and *devDependencies* from this project, into the **package.json** of your new project & run an `npm install`.\n\n\n## Summing up\n\nWe have now created a build process for our Sass projects! We can compile, merge, prefix and compress our stylesheets with a single command. And thus, we’ve significantly improved upon our development workflow.\n\n## Related Posts:\n\n* [An Introduction to SASS](https://www.easeout.co/blog/2020-07-07-an-introduction-to-sass)\n* [Setting up SASS](https://www.easeout.co/blog/2020-07-09-setting-up-sass)\n* [Using SASS Variables](https://www.easeout.co/blog/2020-07-14-using-sass-variables)",
  "title": "Setting up a SASS Build Process",
  "description": "Learn how to set up a SASS build process.",
  "short": "Learn how to set up a SASS build process.",
  "category": "SASS",
  "thumbnail": "/images/uploads/sass-build-process.png"
}