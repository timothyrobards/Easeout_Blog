{
  "date": "Thursday April 8th, 2021",
  "dateshort": "April 8th",
  "body": "Objects in JavaScript are used to store collections of data in the format of “key: value” pairs. Contained within an object we can have any number of variables and/or functions which are then referred to as object properties and methods.\n\n## Creating an Object\n\nLet’s work with an example! To initialize a variable **car** as an object**,** we use curly braces **{}**:\n\n```\nvar car = {};\n```\n\nWe now have an empty object which can be accessed via the Developer Tools console, by simply typing our variable name:\n\n```\ncar\n\n// {} [object]\n```\n\nAn empty object isn’t all that useful, so let's update it with some data:\n\n```\nvar car = {\n  name: 'Tesla',\n  model: 'Model 3',\n  weight: 1700,\n  extras: ['heated seats', 'wood decor', 'tinted glass'],\n  details: function() {\n    alert('This ' + this.name + ' is a ' + this.model + ' it weighs ' + this.weight + 'kg and includes the following extras: ' + this.extras[0] + ', ' + this.extras[1] + ' and ' + this.extras[2] + '.');\n  },\n  display: function() {\n    alert('This car is a ' + this.name + '.');\n  }\n};\n```\n\nLet’s access this data in our developer tools console:\n\n```\ncar.name         // Tesla\ncar.model        // Model 3\ncar.weight       // 1700\ncar.extras[1]    // wood decor\ncar.details()    // This Tesla is a Model 3 it weighs 1700kg and   includes the following extras: heated seats, wood decor and tinted glass.\ncar.display()    // This car is a Tesla.\n```\n\nAs you can see, each name/value pair must be separated by a comma, and the name and value in each case are separated by a colon. The syntax will always follow this pattern:\n\n```\nvar objectName = {\n  member1Name: member1Value,\n  member2Name: member2Value,\n  member3Name: member3Value\n};\n```\n\nThe value of an object member can be pretty much anything — in our car object, we have two strings, a number, an array, and two functions. The first four items are data items and are referred to as the object’s **properties**. The last two items are functions that allow the object to do something with that data and are referred to as the object’s **methods**.\n\nThis kind of object is called an **object literal** — we’ve literally written out the object contents as we’ve created it. This is in comparison to objects instantiated from classes, which we’ll take a look at later on.\n\n## Dot notation\n\nAbove, you’ve seen the object’s properties and methods accessed using **dot notation**. The object name `car` acts as the **namespace** — it needs to be entered first to access anything within the object. Then you write a dot, followed by the item you want to access — this can be the name of a simple property, an item of an array property, or a call to one of the object’s methods, for example:\n\n```\ncar.name\ncar.extras[1]\ncar.details() \n```\n\n## Deleting Properties\n\nWe can use the delete operator to remove properties, like so:\n\n```\ncar.model\n// Tesla 3\n\ndelete car.model\n\ncar.model\n// undefined\n```\n\n## Square Brackets\n\nIf for example, we had a multi-word property within our object, such as:\n\n```\nvar user = {\n  name: \"Sam\",\n  age: 32,\n  \"likes potatoes\": true  // a multiword property name must be quoted\n};\n```\n\nWe couldn’t access the multi-word property with dot-notation:\n\n```\nuser.likes potatoes     // syntax error!\n```\n\nThis is because a dot requires the key to be a valid variable identifier. That is no spaces and other limitations.\n\nThe alternative is to use square brackets, which works with any string:\n\n```\nlet user = {};\n\n// set\nuser[\"likes potatoes\"] = true;\n\n// get\nalert(user[\"likes potatoes\"]); // true\n\n// delete\ndelete user[\"likes potatoes\"];\n```\n\n## Updating object members\n\nWe can update the values within our objects by simply declaring the property you’d like to set with the new value, like so:\n\n```\nuser.age          // 32\nuser.age = 33     // 33\nuser.age          // 33\n```\n\nYou can also create completely new members of your object. For example:\n\n```\nuser.surname = 'Smithessson';\n// user\n{name: \"Sam\", age: 33, likes potatoes: true, surname: \"Smithessson\"}\n```\n\n## What is “this”?\n\nYou may have noticed the use of the word ‘this’ in our earlier example. See the following:\n\n```\ndisplay: function() {\n  alert('This car is a ' + this.name + '.');\n}\n```\n\n*The `this` keyword refers to the current object that the code is being written inside of— so in this case `this` is equivalent to `car`.*\n\nWhy not just write `car` instead? It’s best practice to write well-constructed object-orientated code, and in doing so the use of `this` is extremely useful. It will ensure the correct values are used when a member's context changes (e.g. two different `car` object instances may have different names, but will want to use their own name when displaying their own information).\n\nFor example:\n\n```\nvar car1 = {\n  name: 'Tesla',\n  display: function() {\n    alert('This car is a ' + this.name + '.');\n  }\n}\nvar car2 = {\n  name: 'Toyota',\n  display: function() {\n    alert('This car is a ' + this.name + '.');\n  }\n}\n```\n\nIn this case, `car1.display()` will output \"This car is a Tesla.\" And `car2.display()` will output \"This car is a Toyota.\", even though the method's code is exactly the same in both cases.\n\nAs `this` is equal to the object the code is inside —`this` becomes really useful when you are dynamically generating objects (for example using constructors), which is outside the scope of this article!\n\n## Conclusion\n\nAnd that’s it! You should now have a good idea of how to work with objects in JavaScript — including creating your own simple objects, as well as accessing and manipulating object properties. You‘ll also begin to see how objects are very useful as structures for storing related data and functionality.\n\nFor instance, if you tried to keep track of all the properties and methods in our `car` object as separate variables and functions, it would be extremely inefficient, and we'd run the risk of clashing with other variables and functions that have the same names. Objects let us keep the information safely locked away in their own package.\n\n## Related Posts:\n\n* [Understanding Variables, Scope and Hoisting](https://www.easeout.co/blog/2021-01-25-understanding-variables-scope-and-hoisting/)\n* [Working with Strings in JavaScript](easeout.co/blog/2020-11-23-working-with-strings-in-javascript/)\n* [JavaScript Data Type Conversion](https://www.easeout.co/blog/2020-11-05-javascript-data-type-conversion/)",
  "title": "Mastering Objects",
  "description": "Learn all about JavaScript Object methods.",
  "short": "Learn all about JavaScript Object methods.",
  "category": "JavaScript",
  "thumbnail": "/images/uploads/javascript-objects.png"
}