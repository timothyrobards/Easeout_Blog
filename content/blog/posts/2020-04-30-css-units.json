{
  "date": "Thursday April 30th, 2020",
  "dateshort": "April 30th",
  "body": "In this tutorial, we’re going to learn about CSS units!\n\nWe use units (`px`, `em`, `rem`, percentages, `vw`, `vh` etc) to determine the size to apply to properties such as length, padding, margin & align.\n\nLearning about each unit type will help you create more flexible & manageable stylesheets!\n\n# What is a CSS Unit?\n\nA CSS unit determines the size of a property you’re setting on an element.\n\nFor example, to set the `padding` on a paragraph, we could choose `10px` like so:\n\n```css\np {\n  padding: 10px;\n}\n```\n\nThe value ‘10px’ includes the CSS unit ‘px’ (or pixel).\n\nThe question is: Is `px` the best unit to use? What about `em`, or `rem`, or `vw`?\n\nLet’s find out!\n\n## Pixels\n\n```css\n.element {   \n  width: 500px;  \n}\n```\n\nPixels are the most common measurement unit. Allowing you to set a length in “pixels”.\n\nInterestingly, they don’t have anything to do with the literal screen pixels of your display device. It’s a standardization of measurement used across the web.\n\nAs we’ll see, pixels lack flexibility in some scenarios & there is often a better option.\n\n## Percentages\n\nPercentages let you specify values as a percentage, relative to the same property in the element’s parent. For example:\n\n```css\n.parent {\n  width: 600px;\n}\n.child {\n  width: 50%;  /* 300px */\n}\n```\n\nSo if a parent element has a width of 600px, a child element with a width of 50% will render at 300px.\n\n## Font-relative units\n\n### Em\n\n```css\n.element {\n  width: 30em; \n}\n```\n\n`em` is the value assigned to the element’s `font-size`, so its exact value changes between elements. The measurement itself the width of the `m` letter.\n\nNote that the length changes **only** when you change the `font-size`, it won’t change if the `font-family` is adjusted.\n\nBy default `1em` is equal to `16px`.\n\nIf any CSS changes the font size, 1em becomes equivalent to whatever the new `font-size` is.\n\n### Rem\n\n```css\n.element {\n  width: 30rem; \n}\n```\n\n`rem` is similar to `em`, only instead of changing based on the font size of the current element, it changes based on the the root (i.e. `:root {}`) element font size.\n\nThis way you can set `font-size` once, and `rem` will be a consistent measurement throughout all pages!\n\n### ex\n\n```css\n.element {\n  width: 40ex;\n}\n```\n\n`ex` is similar to `em`, however its based on the height of the `x` letter.\n\nAnd unlike ems, it can change depending on both the `font-family` used & on the `font-size`.\n\n### ch\n\n```css\n.element {\n  width: 40ch;\n}\n```\n\n`ch` is like `ex` only instead of measuring the height of `x` it measures the width of `0`(the number zero).\n\nIt also changes as the `font-family` changes.\n\n## Viewport units\n\n### vw\n\n```css\n.element {\n  width: 20vw;\n}\n```\n\nThe viewport width unit represents a percentage of the users’ viewport width.\n\nSo `50vw` is equal to 50% of the width of the viewport.\n\nIt’s similar to percentage, only the value remains consistent regardless of the value held by the parent elements. Similar to the way that `rem` units remain relative to the root.\n\n`vw` units are often used for sizing responsive type.\n\n### vh\n\n```css\n.element {\n  width: 20vh;\n}\n```\n\nThe viewport height unit represents a percentage of the users’ viewport height.\n\n`50vh` equals 50% of the height of the viewport.\n\nThis is the same as `vw` only it’s based on height instead.\n\n### vmin\n\n```css\n.element {\n  width: 10vmin;\n}\n```\n\nThe viewport minimum is the minimum between the height or width as a percentage.\n\nThis value will be whichever is currently *smaller*, `vw` or `vh`.\n\nSo `20vmin` is 20% of the current width or height, depending which one is smaller.\n\n### vmax\n\n```css\n.element {\n  width: 20vmax;\n}\n```\n\nThe viewport maximum is the maximum between the height or width as a percentage.\n\nIt’s the opposite of `vmin`, being whichever value is currently *larger*, `vw` or `vh`.\n\nSo `20vmax` is the 20% of the current width or height, depending which one is bigger.\n\n## Which units should I use?\n\nYou can figure out the most appropriate CSS unit by asking yourself:\n\n* Do I want this element to scale when the viewport size changes?\n* If ‘Yes’, what do I want it to scale relative to?\n\nWhen you’ve answered these questions, knowing the most appropriate unit is much simpler!\n\n## Related posts:\n\n* [Margins, Padding & Borders](https://www.easeout.co/blog/2020-04-16-css-margins-padding-borders)\n* [The Box Model](https://www.easeout.co/blog/2020-04-14-the-css-box-model)",
  "title": "CSS Units",
  "description": "How to work with units in CSS (em, rem, vh, vw, etc!).",
  "short": "How to work with units in CSS (em, rem, vh, vw, etc!).",
  "category": "CSS"
}