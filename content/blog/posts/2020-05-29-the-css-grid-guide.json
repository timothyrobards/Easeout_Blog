{
  "date": "Friday May 29th, 2020",
  "dateshort": "May 29th",
  "body": "CSS Grid is a modern layout system that we can use when laying out pages.\n\nIt’s often compared [Flexbox](https://www.easeout.co/blog/2020-05-22-the-flexbox-guide). Whilst they are both excellent systems for working with complex layouts, there is one major difference: CSS Grid works on 2 dimensions (rows **and** columns), while Flexbox works on a single dimension only (rows **or** columns).\n\nIf you only need to define a layout as a row or a column, then Flexbox will likely suit your needs. When working in both dimensions — it’s time for CSS Grid!\n\n## CSS Grid basics\n\nWe activate the grid layout by making an HTML element a grid container:\n\nOur HTML:\n\n```html\n<div class=\"grid-container\">\n  <!-- content -->\n</div>\n```\n\nIn our CSS, we simply set its `display` property to *grid*:\n\n```css\n.grid-container {\n  display: grid;\n}\n```\n\nA grid layout consists of a parent element, with one or more child elements.\n\nThere are a set of properties which can be applied to the container element, as well as any child elements (being each individual item in the grid).\n\nThroughout this guide we’ll work with the following code:\n\n**HTML:**\n\n```html\n<div class=\"grid-container\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n  <div class=\"grid-item\">5</div>\n  <div class=\"grid-item\">6</div>\n  <div class=\"grid-item\">7</div>\n  <div class=\"grid-item\">8</div>\n</div>\n```\n\nAnd our **CSS** styles:\n\n```css\n* {\n  font-family: monospace;\n  text-align: center;\n  font-size: 44px;\n}\n.grid-container {\n  display: grid;\n  padding: 30px;\n  background-color: pink;\n  border: 2px solid #000;\n}\n.grid-container > div {\n  background-color: yellow;\n  border: 2px solid #000;\n}\n```\n\n### Defining Columns & Rows\n\nThe most common container properties are `grid-template-columns` and `grid-template-rows.` With these properties we define both the number of columns & rows as well as the width of each.\n\nFor example, let’s tell our grid to layout its items (child elements) in 4 columns at 200px wide, and 2 rows with a height of 150px each.\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 150px 150px;\n}\n```\n\n![CSS Grid Layout](/images/uploads/grid-basic-layout.png)\n\nAnd lets now make it a smaller 3x3 grid:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 150px 150px 150px;\n  grid-template-rows: 100px 100px 100px;\n}\n```\n\n![CSS Grid Layout 3x3](/images/uploads/grid-basic-layout2.png)\n\n### Auto dimensions\n\nOften you’ll be working with elements with no fixed size. For example, you could have a fixed navbar followed by a flexible content section, then a fixed footer section. For this we can use `auto` and the layout will adapt to the size of our content:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-rows: 50px auto 150px;\n}\n```\n\n### Adding space between grid items\n\nWe can add spacing between grid items using `grid-column-gap` and/or `grid-row-gap`:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 100px 200px 100px;\n  grid-template-rows: 100px 50px;\n  grid-column-gap: 25px;\n  grid-row-gap: 25px;\n}\n```\n\n![CSS Grid Layout Gap](/images/uploads/grid-col-row-gap.png)\n\nWe could also use the shorthand `grid-gap` to set both at once:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 100px 200px 100px;\n  grid-template-rows: 100px 50px;\n  grid-gap: 25px;\n}\n```\n\n### Grid item positioning\n\nWe can control how much space each grid item takes up in the column or row with the following properties:\n\n* `grid-column-start`\n* `grid-column-end`\n* `grid-row-start`\n* `grid-row-end`\n\nLet’s see an example:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 150px 150px;\n}\n.grid-item1 {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n.grid-item6 {\n  grid-column-start: 3;\n  grid-column-end: 5;\n}\n```\n\n![CSS Grid Layout Cols Rows Span](/images/uploads/grid-cols-rows-span.png)\n\nHere’s we’ve added classes to the first & sixth items in our grid.\n\nThe numbers correspond to the vertical line separating each column. So by setting `grid-column-start` to 1 and `grid-column-end` to 3, we’re telling our element to start at the first line & end at the third.\n\nSimilarly we’ve told our sixth element to start at the 3rd line and end at 5.\n\nThis of course also applies to `grid-row-start` and `grid-row-end`, with the cells expanding across rows instead of columns.\n\n#### Item position shorthand\n\nWe can repeat the above using the shorthand properties of `grid-column` & `grid-row`, like so:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 150px 150px;\n}\n.grid-item1 {\n  grid-column: 1 / 3;\n}\n.grid-item6 {\n  grid-column: 3 / 5;\n}\n```\n\nAnd we could take this even further by using `grid-area` as a shorthand for `grid-column` and `grid-row`. This would only apply in cases where we need an item to span **both** rows & columns:\n\n```css\n.grid-item1 {\n  grid-row: 1 / 4;\n  grid-column: 3 / 5;\n}\n```\n\nWould become:\n\n```css\n.grid-item1 {\n  grid-area: 1 / 3 / 4 / 5;\n}\n```\n\nWith the order being: `grid-row-start` > `grid-column-start` > `grid-row-end` > `grid-column-end`.\n\n### Using 'span' to position items\n\nAnother option we have when positioning our items is `span`:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 150px 150px;\n}\n.grid-item1 {\n  grid-column: 1 / span 2;\n}\n.grid-item6 {\n  grid-column: 3 / span 2;\n}\n```\n\nWith `grid-column: 1 / span 2` starting at line 1 and spanning across 2 columns.\n\n### Using fraction units\n\nOne of the great benefits of grid is the ability to easily create highly flexible layouts.\n\nFraction units give us the ability to build layouts without needing to specify fixed dimensions.\n\nFor example, lets divide a grid into 3 columns of equal width, each taking up 1⁄3 of the available space:\n\n```css\n.grid-container {\n  grid-template-columns: 1fr 1fr 1fr;\n}\n```\n\n![CSS Grid Layout Fraction Units](/images/uploads/grid-fraction-units.png)\n\nToo simple!\n\n### Using other CSS units\n\nWe can use any of the CSS [length units](https://www.easeout.co/blog/2020-04-30-css-units). So feel free to use a mix of percentages, pixels, rem, em and fractions:\n\n```css\n.grid-container {\n  grid-template-columns: 2rem 25% 2fr 1fr\n}\n```\n\n### Using repeat()\n\nWe can use `repeat()` to specify the number of times a row or column will be repeated, and the length of each.\n\nIt’s a handy way to quickly put together a layout & it also reduces lines of code! For example, you could define 3 columns of equal width as follows:\n\n```css\n.grid-container {\n  grid-template-columns: repeat(3, 1fr);\n}\n```\n\n### Using minmax()\n\nWe use `minmax()` to specify a minimum or maximum width for a grid track.\n\nLet’s say you want a column to be between 100px and 300px, followed by a 1fr column:\n\n```css\n.grid-container {\n  grid-template-columns: minmax(100px, 300px) 1fr;\n}\n```\n\nThe value for min has to be smaller than the value for max. And `fr` units can’t be used for the min value, but they can be used for the max!\n\nBy using a `1fr` as the max value, you’ll ensure that the track expands and takes up the available space:\n\n```css\n.grid-container {   \n  grid-template-columns: minmax(250px, 1fr) 1fr;   \n}\n```\n\nUsed this way, `minmax()` allows us to create grid tracks that adapt to the available space, but that don’t shrink narrower than a specified size.\n\nNow if the browser is resized, the 1st column won’t shrink to less than 250px.\n\nYou can also use the `auto`, `min-content` and `max-content` keywords as the min or max values.\n\n### Using justify-content\n\nWe use `justify-content` to align the whole grid inside the container.\n\nThere are a number of values we can work with:\n\n* `space-evenly`\n* `space-around`\n* `space-between`\n* `center`\n* `start`\n* `end`\n\nKeep in mind that the grid width has to be less than the container width for the `justify-content` to work!\n\nLet’s see an example of each:\n\n![CSS Grid Layout Space Evenly](/images/uploads/grid-space-evenly.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: space-evenly;\n}\n```\n\n![CSS Grid Layout Space Around](/images/uploads/grid-space-around.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: space-around;\n}\n```\n\n![CSS Grid Layout Space Between](/images/uploads/grid-space-between.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: space-between;\n}\n```\n\n![CSS Grid Layout Center](/images/uploads/grid-center.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: center;\n}\n```\n\n![CSS Grid Layout Start](/images/uploads/grid-start.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: start;\n}\n```\n\n![CSS Grid Layout End](/images/uploads/grid-end.png)\n\n```css\n.grid-container {\n   display: grid;\n   justify-content: end;\n}\n```\n\n### Using align-content\n\nWe use the `align-content` property to *vertically* align the whole grid inside the container.\n\nOur grid height needs to be less than the container height for this property to work.\n\n![CSS Grid Layout Align Space Evenly](/images/uploads/grid-align-space-evenly.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: space-evenly;\n}\n```\n\n![CSS Grid Layout Align Space Around](/images/uploads/grid-align-space-around.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: space-around;\n}\n```\n\n![CSS Grid Layout Align Space Between](/images/uploads/grid-align-space-between.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: space-between;\n}\n```\n\n![CSS Grid Layout Align Center](/images/uploads/grid-align-center.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: center;\n}\n```\n\n![CSS Grid Layout Align Start](/images/uploads/grid-align-start.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: start;\n}\n```\n\n![CSS Grid Layout Align End](/images/uploads/grid-align-end.png)\n\n```css\n.grid-container {\n   display: grid;\n   align-content: end;\n}\n```\n\n### Using grid-template-areas\n\nWe can use `grid-template-areas` to define named areas & move them around inside the grid, and also to expand grid items across multiple rows and/or columns.\n\nLet’s use `grid-template-areas` to build a typical layout with a header up top, a sidebar to the left of the main content, followed by a footer:\n\n![CSS Grid Layout Page Layout](/images/uploads/grid-page-layout.png)\n\nAnd the code used:\n\n**HTML:**\n\n```html\n<div class=\"grid-container\">\n  <main>\n    Main\n  </main>\n  <aside>\n    Sidebar\n  </aside>\n  <footer>\n    Footer\n  </footer>\n  <header>\n    Header\n  </header>\n</div>\n```\n\n**CSS:**\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 125px 225px;\n  grid-template-areas:\n    \"header header header header\"\n    \"sidebar main main main\"\n    \"footer footer footer footer\";\n}\nmain {\n  grid-area: main;\n}\naside {\n  grid-area: sidebar;\n}\nheader {\n  grid-area: header;\n}\nfooter {\n  grid-area: footer;\n}\n```\n\nNotice that despite the header being the last element in our HTML, it’s still at the top of our page. This is because we’ve defined it’s position in CSS with `grid-template-areas` using the `grid-area` property.\n\n#### Making this responsive\n\nIf we want the sidebar to move below our main content on mobile devices, we can easily so using a media query:\n\n```css\n@media (max-width: 500px) {\n  .grid-container {\n    grid-template-columns: 1fr;\n    grid-template-areas:\n      \"header\"\n      \"main\"\n      \"sidebar\"\n      \"footer\";\n  }\n}\n```\n\n## Related Posts:\n\n* [The Flexbox Guide](https://www.easeout.co/blog/2020-05-22-the-flexbox-guide)\n* [CSS Positioning](https://www.easeout.co/blog/2020-05-15-css-positioning)\n* [The Display Property](https://www.easeout.co/blog/2020-05-12-css-display-property)",
  "title": "The CSS Grid Guide",
  "description": "The complete guide to using CSS Grid.",
  "short": "The complete guide to using CSS Grid.",
  "category": "CSS"
}