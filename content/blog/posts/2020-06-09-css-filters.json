{
  "date": "Tuesday June 9th, 2020",
  "dateshort": "June 9th",
  "body": "CSS Filters are an extremely useful way to apply visual effects to elements.\n\nTasks that might usually be performed with Photoshop or other photo editing software, can be done right in CSS!\n\nWe can use the `filter` property to add effects such as blur or saturation, or change the opacity or brightness, and more!\n\nWhilst it’s common to use `filter` for image effects, it can actually be used on *any* element.\n\nThe syntax is:\n\n```css\nimg {\n  filter: *value*;\n}\n```\n\nWhere \\*value\\* is one of the following:\n\n* `blur()`\n* `brightness()`\n* `contrast()`\n* `drop-shadow()`\n* `grayscale()`\n* `hue-rotate()`\n* `invert()`\n* `opacity()`\n* `sepia()`\n* `saturate()`\n* `url()` — for SVG filters\n\nEach filter has a parentheses, this is where we specify its value.\n\nFor example:\n\n```css\nimg {\n  filter: opacity(0.5);\n}\n```\n\nThis will make our image 50% transparent, as `opacity()` has a range of 0 to 1, or a percentage value.\n\nWe can also apply multiple filters in a single line:\n\n```css\nimg {\n  filter: blur(20px) grayscale(20%);\n}\n```\n\nLet’s take a look at each filter in detail.\n\n## blur()\n\n`blur()` applies a blur effect to an element.\n\nThe value chosen determines the size of the blur radius. The higher the value, the more pixels will blend together, which creates more blur.\n\n```css\nimg {\n  filter: blur(4px);\n}\n```\n\nThe value can be expressed in `px`, `em` or `rem` units.\n\n## opacity()\n\n`opacity()` applies transparency to the element.\n\nIt takes a value from 0 to 1, or a percentage (such as 0.5 for 50%), which determines the image transparency.\n\n`0` or `0%`, being fully transparent. `1` or `100%`, being fully visible.\n\n```css\nimg {\n  filter: opacity(0.5);\n}\n```\n\nCSS also has an `opacity` property. However, browser performance is better with the `filter` property, so this should be the preferred method.\n\n## drop-shadow()\n\n`drop-shadow()` applies a shadow to an element.\n\nIt accepts up to 5 parameters, the first 2 (below) are compulsory:\n\n* *offset-x* defines the horizontal offset.\n* *offset-y* defines the vertical offset.\n\n```css\nimg {\n  filter: drop-shadow(10px 10px);\n}\n```\n\n* *blur-radius*(optional), defines a blur radius for the shadow. Defaulting to 0 (no blur).\n\n```css\nimg {\n  filter: drop-shadow(10px 10px 2px);\n}\n```\n\n* *spread-radius*(optional), defines a spread radius. In `px`, `rem` or `em`.\n\n```css\nimg {\n  filter: drop-shadow(10px 10px 2px 5px);\n}\n```\n\n* *colour* (optional), defines the colour.\n\n```css\nimg {\n  filter: drop-shadow(10px 10px 2px 5px red);\n}\n```\n\n## grayscale()\n\nConverts the element to grayscale.\n\nThe value sets the proportion, with 100% being completely grayscale & 0% leaving the element unchanged.\n\n```css\nimg {\n  filter: grayscale(50%);\n}\n```\n\n## sepia()\n\nConverts the element to sepia.\n\nAgain, the value sets the proportion, with 100% being completely sepia & 0% leaving the element unchanged.\n\n```css\nimg {\n  filter: sepia(50%);\n}\n```\n\n## invert()\n\nInverts the colours of an element.\n\nThe inversion selects the opposite of a colour according to the HSL [colour wheel](https://color.adobe.com/create/color-wheel).\n\nA value of 100% is completely inverted & 0% leaves the element unchanged.\n\n50% will always render grey colour, as you end up in the middle of the wheel.\n\n```css\nimg {\n  filter: invert(50%);\n}\n```\n\n## hue-rotate()\n\nThe colour wheel is represented in degrees. `hue-rotate()` lets you rotate the colour using a positive or negative rotation.\n\nThe function accepts a `deg` value. With 0deg leaving the input unchanged & 360deg being the max value.\n\n```css\nimg {\n  filter: hue-rotate(90deg);\n}\n```\n\n## brightness()\n\n`brightness()` makes an element appear more or less bright.\n\nWith a value of 0%, the element will appear completely black. 100% will leave the element unchanged.\n\n```css\nimg {\n  filter: brightness(50%);\n}\n```\n\n## contrast()\n\n`contrast()` changes the contrast of the element.\n\nWith a value of 0%, the element will appear completely grey. 100% will leave the element unchanged.\n\n```css\nimg {\n  filter: contrast(150%);\n}\n```\n\n## saturate()\n\n`saturate()` will alter the saturation of the element.\n\nA value of 0% is completely un-saturated (it will be entirely greyscale). A value of 100% leaves the element unchanged.\n\n```css\nimg {\n  filter: saturate();\n}\n```\n\n## url()\n\n`url()` allows you to apply a filter defined in an SVG file.\n\nThe parameter will be the location of the file.\n\n```css\nimg {\n  filter: url(filter.svg);\n}\n```\n\nFor more on SVG filters check out: <https://tympanus.net/codrops/2019/01/15/svg-filters-101/>\n\n## Related Posts:\n\n* [Media Queries](https://www.easeout.co/blog/2020-06-04-css-media-queries)\n* [Feature Queries](https://www.easeout.co/blog/2020-06-08-css-feature-queries)",
  "title": "CSS Filters",
  "description": "Learn how to use the CSS filter property.",
  "short": "Learn how to use the CSS filter property.",
  "category": "CSS"
}