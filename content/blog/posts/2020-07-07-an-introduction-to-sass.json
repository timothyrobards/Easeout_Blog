{
  "date": "Tuesday July 7th, 2020",
  "dateshort": "July 7th",
  "body": "**SASS** (or Syntactically Awesome Style Sheets) is a tool known as a **CSS preprocessor**. CSS preprocessors are scripting languages that extend the default capabilities of CSS.\n\nOther popular examples include LESS and Stylus. They are in fact all great tools to utilize when you wish to code more maintainable CSS. Especially when working with larger codebases.\n\n## Defining CSS Preprocessors\n\n*“A CSS preprocessor is a program that lets you generate CSS from the preprocessor’s own unique syntax. There are many CSS preprocessors to choose from, however most CSS preprocessors will add some features that don’t exist in pure CSS, such as mixin, nesting selector, inheritance selector, and so on. These features make the CSS structure more readable and easier to maintain”.* — [MDN](https://developer.mozilla.org/en-US/)\n\nOnce you’re comfortable with CSS, the next natural step is to utilize a preprocessor. The biggest advantage is not having to repeat yourself.\n\nThis advantage is known as keeping your CSS **Dry**, which stands for *“Don’t Repeat Yourself.”*\n\n## Why use preprocessors?\n\nThe primary advantages are as follows:\n\n* Cleaner code thanks to variables and nesting.\n* Greater ease of maintenance and organisation as we can separate our files into modules.\n* Ability to implement logic and calculation in our stylesheets.\n* Overall improvement in workflow, which will **save hours of development time!**\n\nOf all the preprocessors, **SASS** is by far the most popular within the developer community.\n\n## What is SASS?\n\n**SASS** is a scripting language that provides us with features and tools that regular CSS doesn’t have.\n\nUsing SASS we can write more readable, maintainable and reusable code. Think of it as an extension that adds power and elegance to CSS.\n\nIt gives us various features such as:\n\n* Variables\n* Nesting\n* Mixins\n* Functions\n* Partials & Imports\n* Inheritance (Extend functionality)\n* Control directives\n\nIn other words, SASS helps us organize large stylesheets in a more maintainable way.\n\nAnd we’ll be looking into all of these features throughout my next series of articles on SASS!\n\n\n## SCSS or Sass?\n\nIn SASS there are **two** different syntaxes: **SCSS** and **Sass**. However after being compiled they generate similar output.\n\n**SCSS** (aka Sassy CSS) is the modern standard. It’s syntax is very similar to CSS in that it uses brackets and semicolons. Even normal CSS is valid in this syntax. The file extension is `.scss`.\n\n**Sass** is an older syntax that focuses on indentation to separate code blocks and newline characters to separate rules. It has the file extension `.sass`.\n\nThroughout this series, I will use **SCSS** as it’s the more natural syntax (when we use SCSS we still call it SASS!).\n\nIt’s also really easy to convert regular CSS to SCSS, as you can just paste in the CSS and work from there!\n\n\n\n## Related Posts:\n\n* [Feature Queries](https://www.easeout.co/blog/2020-06-08-css-feature-queries)",
  "title": "An Introduction to SASS",
  "description": "A look into extending your CSS functionality with SASS.",
  "short": "A look into extending your CSS functionality with SASS.",
  "category": "SASS"
}